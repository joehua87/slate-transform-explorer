!function(t){function e(o){if(n[o])return n[o].exports;var r=n[o]={exports:{},id:o,loaded:!1};return t[o].call(r.exports,r,r.exports,e),r.loaded=!0,r.exports}var n={};return e.m=t,e.c=n,e.p="/",e(0)}(function(t){for(var e in t)if(Object.prototype.hasOwnProperty.call(t,e))switch(typeof t[e]){case"function":break;case"object":t[e]=function(e){var n=e.slice(1),o=t[e[0]];return function(t,e,r){o.apply(this,[t,e,r].concat(n))}}(t[e]);break;default:t[e]=t[t[e]]}return t}([function(t,e,n){n(102),t.exports=n(105)},function(t,e,n){"use strict";function o(t,e,n,o,r,s,a,i){if(!t){var d;if(void 0===e)d=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,o,r,s,a,i],p=0;d=new Error(e.replace(/%s/g,function(){return c[p++]})),d.name="Invariant Violation"}throw d.framesToPop=1,d}}t.exports=o},function(t,e){"use strict";function n(t){for(var e=arguments.length-1,n="Minified React error #"+t+"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant="+t,o=0;o<e;o++)n+="&args[]="+encodeURIComponent(arguments[o+1]);n+=" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";var r=new Error(n);throw r.name="Invariant Violation",r.framesToPop=1,r}t.exports=n},function(t,e,n){"use strict";var o=n(8),r=o;t.exports=r},function(t,e){"use strict";function n(t){if(null===t||void 0===t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}function o(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},n=0;n<10;n++)e["_"+String.fromCharCode(n)]=n;var o=Object.getOwnPropertyNames(e).map(function(t){return e[t]});if("0123456789"!==o.join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(t){r[t]=t}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(s){return!1}}var r=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;t.exports=o()?Object.assign:function(t,e){for(var o,a,i=n(t),d=1;d<arguments.length;d++){o=Object(arguments[d]);for(var c in o)r.call(o,c)&&(i[c]=o[c]);if(Object.getOwnPropertySymbols){a=Object.getOwnPropertySymbols(o);for(var p=0;p<a.length;p++)s.call(o,a[p])&&(i[a[p]]=o[a[p]])}}return i}},function(t,e,n){"use strict";function o(t){for(var e;e=t._renderedComponent;)t=e;return t}function r(t,e){var n=o(t);n._hostNode=e,e[x]=n}function s(t){var e=t._hostNode;e&&(delete e[x],t._hostNode=null)}function a(t,e){if(!(t._flags&k.hasCachedChildNodes)){var n=t._renderedChildren,s=e.firstChild;t:for(var a in n)if(n.hasOwnProperty(a)){var i=n[a],d=o(i)._domID;if(null!=d){for(;null!==s;s=s.nextSibling)if(1===s.nodeType&&s.getAttribute(f)===String(d)||8===s.nodeType&&s.nodeValue===" react-text: "+d+" "||8===s.nodeType&&s.nodeValue===" react-empty: "+d+" "){r(i,s);continue t}p("32",d)}}t._flags|=k.hasCachedChildNodes}}function i(t){if(t[x])return t[x];for(var e=[];!t[x];){if(e.push(t),!t.parentNode)return null;t=t.parentNode}for(var n,o;t&&(o=t[x]);t=e.pop())n=o,e.length&&a(o,t);return n}function d(t){var e=i(t);return null!=e&&e._hostNode===t?e:null}function c(t){if(void 0===t._hostNode?p("33"):void 0,t._hostNode)return t._hostNode;for(var e=[];!t._hostNode;)e.push(t),t._hostParent?void 0:p("34"),t=t._hostParent;for(;e.length;t=e.pop())a(t,t._hostNode);return t._hostNode}var p=n(2),l=n(17),u=n(66),f=(n(1),l.ID_ATTRIBUTE_NAME),k=u,x="__reactInternalInstance$"+Math.random().toString(36).slice(2),g={getClosestInstanceFromNode:i,getInstanceFromNode:d,getNodeFromInstance:c,precacheChildNodes:a,precacheNode:r,uncacheNode:s};t.exports=g},function(t,e){"use strict";var n=!("undefined"==typeof window||!window.document||!window.document.createElement),o={canUseDOM:n,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:n&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:n&&!!window.screen,isInWorker:!n};t.exports=o},function(t,e,n){"use strict";var o=null;t.exports={debugTool:o}},function(t,e){"use strict";function n(t){return function(){return t}}var o=function(){};o.thatReturns=n,o.thatReturnsFalse=n(!1),o.thatReturnsTrue=n(!0),o.thatReturnsNull=n(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(t){return t},t.exports=o},function(t,e,n){"use strict";function o(t){return void 0!==t.ref}function r(t){return void 0!==t.key}var s=n(4),a=n(15),i=(n(3),n(79),Object.prototype.hasOwnProperty),d="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,c={key:!0,ref:!0,__self:!0,__source:!0},p=function(t,e,n,o,r,s,a){var i={$$typeof:d,type:t,key:e,ref:n,props:a,_owner:s};return i};p.createElement=function(t,e,n){var s,d={},l=null,u=null,f=null,k=null;if(null!=e){o(e)&&(u=e.ref),r(e)&&(l=""+e.key),f=void 0===e.__self?null:e.__self,k=void 0===e.__source?null:e.__source;for(s in e)i.call(e,s)&&!c.hasOwnProperty(s)&&(d[s]=e[s])}var x=arguments.length-2;if(1===x)d.children=n;else if(x>1){for(var g=Array(x),y=0;y<x;y++)g[y]=arguments[y+2];d.children=g}if(t&&t.defaultProps){var h=t.defaultProps;for(s in h)void 0===d[s]&&(d[s]=h[s])}return p(t,l,u,f,k,a.current,d)},p.createFactory=function(t){var e=p.createElement.bind(null,t);return e.type=t,e},p.cloneAndReplaceKey=function(t,e){var n=p(t.type,e,t.ref,t._self,t._source,t._owner,t.props);return n},p.cloneElement=function(t,e,n){var d,l=s({},t.props),u=t.key,f=t.ref,k=t._self,x=t._source,g=t._owner;if(null!=e){o(e)&&(f=e.ref,g=a.current),r(e)&&(u=""+e.key);var y;t.type&&t.type.defaultProps&&(y=t.type.defaultProps);for(d in e)i.call(e,d)&&!c.hasOwnProperty(d)&&(void 0===e[d]&&void 0!==y?l[d]=y[d]:l[d]=e[d])}var h=arguments.length-2;if(1===h)l.children=n;else if(h>1){for(var m=Array(h),b=0;b<h;b++)m[b]=arguments[b+2];l.children=m}return p(t.type,u,f,k,x,g,l)},p.isValidElement=function(t){return"object"==typeof t&&null!==t&&t.$$typeof===d},p.REACT_ELEMENT_TYPE=d,t.exports=p},function(t,e,n){"use strict";function o(){C.ReactReconcileTransaction&&v?void 0:p("123")}function r(){this.reinitializeTransaction(),this.dirtyComponentsLength=null,this.callbackQueue=u.getPooled(),this.reconcileTransaction=C.ReactReconcileTransaction.getPooled(!0)}function s(t,e,n,r,s,a){o(),v.batchedUpdates(t,e,n,r,s,a)}function a(t,e){return t._mountOrder-e._mountOrder}function i(t){var e=t.dirtyComponentsLength;e!==y.length?p("124",e,y.length):void 0,y.sort(a),h++;for(var n=0;n<e;n++){var o=y[n],r=o._pendingCallbacks;o._pendingCallbacks=null;var s;if(k.logTopLevelRenders){var i=o;o._currentElement.props===o._renderedComponent._currentElement&&(i=o._renderedComponent),s="React update: "+i.getName(),console.time(s)}if(x.performUpdateIfNecessary(o,t.reconcileTransaction,h),s&&console.timeEnd(s),r)for(var d=0;d<r.length;d++)t.callbackQueue.enqueue(r[d],o.getPublicInstance())}}function d(t){return o(),v.isBatchingUpdates?(y.push(t),void(null==t._updateBatchNumber&&(t._updateBatchNumber=h+1))):void v.batchedUpdates(d,t)}function c(t,e){v.isBatchingUpdates?void 0:p("125"),m.enqueue(t,e),b=!0}var p=n(2),l=n(4),u=n(61),f=n(14),k=n(69),x=n(18),g=n(24),y=(n(1),[]),h=0,m=u.getPooled(),b=!1,v=null,w={initialize:function(){this.dirtyComponentsLength=y.length},close:function(){this.dirtyComponentsLength!==y.length?(y.splice(0,this.dirtyComponentsLength),E()):y.length=0}},T={initialize:function(){this.callbackQueue.reset()},close:function(){this.callbackQueue.notifyAll()}},O=[w,T];l(r.prototype,g.Mixin,{getTransactionWrappers:function(){return O},destructor:function(){this.dirtyComponentsLength=null,u.release(this.callbackQueue),this.callbackQueue=null,C.ReactReconcileTransaction.release(this.reconcileTransaction),this.reconcileTransaction=null},perform:function(t,e,n){return g.Mixin.perform.call(this,this.reconcileTransaction.perform,this.reconcileTransaction,t,e,n)}}),f.addPoolingTo(r);var E=function(){for(;y.length||b;){if(y.length){var t=r.getPooled();t.perform(i,null,t),r.release(t)}if(b){b=!1;var e=m;m=u.getPooled(),e.notifyAll(),u.release(e)}}},_={injectReconcileTransaction:function(t){t?void 0:p("126"),C.ReactReconcileTransaction=t},injectBatchingStrategy:function(t){t?void 0:p("127"),"function"!=typeof t.batchedUpdates?p("128"):void 0,"boolean"!=typeof t.isBatchingUpdates?p("129"):void 0,v=t}},C={ReactReconcileTransaction:null,batchedUpdates:s,enqueueUpdate:d,flushBatchedUpdates:E,injection:_,asap:c};t.exports=C},function(t,e,n){"use strict";var o=n(25),r=o({bubbled:null,captured:null}),s=o({topAbort:null,topAnimationEnd:null,topAnimationIteration:null,topAnimationStart:null,topBlur:null,topCanPlay:null,topCanPlayThrough:null,topChange:null,topClick:null,topCompositionEnd:null,topCompositionStart:null,topCompositionUpdate:null,topContextMenu:null,topCopy:null,topCut:null,topDoubleClick:null,topDrag:null,topDragEnd:null,topDragEnter:null,topDragExit:null,topDragLeave:null,topDragOver:null,topDragStart:null,topDrop:null,topDurationChange:null,topEmptied:null,topEncrypted:null,topEnded:null,topError:null,topFocus:null,topInput:null,topInvalid:null,topKeyDown:null,topKeyPress:null,topKeyUp:null,topLoad:null,topLoadedData:null,topLoadedMetadata:null,topLoadStart:null,topMouseDown:null,topMouseMove:null,topMouseOut:null,topMouseOver:null,topMouseUp:null,topPaste:null,topPause:null,topPlay:null,topPlaying:null,topProgress:null,topRateChange:null,topReset:null,topScroll:null,topSeeked:null,topSeeking:null,topSelectionChange:null,topStalled:null,topSubmit:null,topSuspend:null,topTextInput:null,topTimeUpdate:null,topTouchCancel:null,topTouchEnd:null,topTouchMove:null,topTouchStart:null,topTransitionEnd:null,topVolumeChange:null,topWaiting:null,topWheel:null}),a={topLevelTypes:s,PropagationPhases:r};t.exports=a},function(t,e,n){"use strict";function o(t,e,n,o){this.dispatchConfig=t,this._targetInst=e,this.nativeEvent=n;var r=this.constructor.Interface;for(var s in r)if(r.hasOwnProperty(s)){var i=r[s];i?this[s]=i(n):"target"===s?this.target=o:this[s]=n[s]}var d=null!=n.defaultPrevented?n.defaultPrevented:n.returnValue===!1;return d?this.isDefaultPrevented=a.thatReturnsTrue:this.isDefaultPrevented=a.thatReturnsFalse,this.isPropagationStopped=a.thatReturnsFalse,this}var r=n(4),s=n(14),a=n(8),i=(n(3),"function"==typeof Proxy,["dispatchConfig","_targetInst","nativeEvent","isDefaultPrevented","isPropagationStopped","_dispatchListeners","_dispatchInstances"]),d={type:null,target:null,currentTarget:a.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(t){return t.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};r(o.prototype,{preventDefault:function(){this.defaultPrevented=!0;var t=this.nativeEvent;t&&(t.preventDefault?t.preventDefault():t.returnValue=!1,this.isDefaultPrevented=a.thatReturnsTrue)},stopPropagation:function(){var t=this.nativeEvent;t&&(t.stopPropagation?t.stopPropagation():t.cancelBubble=!0,this.isPropagationStopped=a.thatReturnsTrue)},persist:function(){this.isPersistent=a.thatReturnsTrue},isPersistent:a.thatReturnsFalse,destructor:function(){var t=this.constructor.Interface;for(var e in t)this[e]=null;for(var n=0;n<i.length;n++)this[i[n]]=null}}),o.Interface=d,o.augmentClass=function(t,e){var n=this,o=function(){};o.prototype=n.prototype;var a=new o;r(a,t.prototype),t.prototype=a,t.prototype.constructor=t,t.Interface=r({},n.Interface,e),t.augmentClass=n.augmentClass,s.addPoolingTo(t,s.fourArgumentPooler)},s.addPoolingTo(o,s.fourArgumentPooler),t.exports=o},function(t,e){"use strict";var n=function(t){var e;for(e in t)if(t.hasOwnProperty(e))return e;return null};t.exports=n},function(t,e,n){"use strict";var o=n(2),r=(n(1),function(t){var e=this;if(e.instancePool.length){var n=e.instancePool.pop();return e.call(n,t),n}return new e(t)}),s=function(t,e){var n=this;if(n.instancePool.length){var o=n.instancePool.pop();return n.call(o,t,e),o}return new n(t,e)},a=function(t,e,n){var o=this;if(o.instancePool.length){var r=o.instancePool.pop();return o.call(r,t,e,n),r}return new o(t,e,n)},i=function(t,e,n,o){var r=this;if(r.instancePool.length){var s=r.instancePool.pop();return r.call(s,t,e,n,o),s}return new r(t,e,n,o)},d=function(t,e,n,o,r){var s=this;if(s.instancePool.length){var a=s.instancePool.pop();return s.call(a,t,e,n,o,r),a}return new s(t,e,n,o,r)},c=function(t){var e=this;t instanceof e?void 0:o("25"),t.destructor(),e.instancePool.length<e.poolSize&&e.instancePool.push(t)},p=10,l=r,u=function(t,e){var n=t;return n.instancePool=[],n.getPooled=e||l,n.poolSize||(n.poolSize=p),n.release=c,n},f={addPoolingTo:u,oneArgumentPooler:r,twoArgumentPooler:s,threeArgumentPooler:a,fourArgumentPooler:i,fiveArgumentPooler:d};t.exports=f},function(t,e){"use strict";var n={current:null};t.exports=n},function(t,e,n){"use strict";function o(t){if(g){var e=t.node,n=t.children;if(n.length)for(var o=0;o<n.length;o++)y(e,n[o],null);else null!=t.html?l(e,t.html):null!=t.text&&f(e,t.text)}}function r(t,e){t.parentNode.replaceChild(e.node,t),o(e)}function s(t,e){g?t.children.push(e):t.node.appendChild(e.node)}function a(t,e){g?t.html=e:l(t.node,e)}function i(t,e){g?t.text=e:f(t.node,e)}function d(){return this.node.nodeName}function c(t){return{node:t,children:[],html:null,text:null,toString:d}}var p=n(34),l=n(30),u=n(48),f=n(86),k=1,x=11,g="undefined"!=typeof document&&"number"==typeof document.documentMode||"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent&&/\bEdge\/\d/.test(navigator.userAgent),y=u(function(t,e,n){e.node.nodeType===x||e.node.nodeType===k&&"object"===e.node.nodeName.toLowerCase()&&(null==e.node.namespaceURI||e.node.namespaceURI===p.html)?(o(e),t.insertBefore(e.node,n)):(t.insertBefore(e.node,n),o(e))});c.insertTreeBefore=y,c.replaceChildWithTree=r,c.queueChild=s,c.queueHTML=a,c.queueText=i,t.exports=c},function(t,e,n){"use strict";function o(t,e){return(t&e)===e}var r=n(2),s=(n(1),{MUST_USE_PROPERTY:1,HAS_BOOLEAN_VALUE:4,HAS_NUMERIC_VALUE:8,HAS_POSITIVE_NUMERIC_VALUE:24,HAS_OVERLOADED_BOOLEAN_VALUE:32,injectDOMPropertyConfig:function(t){var e=s,n=t.Properties||{},a=t.DOMAttributeNamespaces||{},d=t.DOMAttributeNames||{},c=t.DOMPropertyNames||{},p=t.DOMMutationMethods||{};t.isCustomAttribute&&i._isCustomAttributeFunctions.push(t.isCustomAttribute);for(var l in n){i.properties.hasOwnProperty(l)?r("48",l):void 0;var u=l.toLowerCase(),f=n[l],k={attributeName:u,attributeNamespace:null,propertyName:l,mutationMethod:null,mustUseProperty:o(f,e.MUST_USE_PROPERTY),hasBooleanValue:o(f,e.HAS_BOOLEAN_VALUE),hasNumericValue:o(f,e.HAS_NUMERIC_VALUE),hasPositiveNumericValue:o(f,e.HAS_POSITIVE_NUMERIC_VALUE),hasOverloadedBooleanValue:o(f,e.HAS_OVERLOADED_BOOLEAN_VALUE)};if(k.hasBooleanValue+k.hasNumericValue+k.hasOverloadedBooleanValue<=1?void 0:r("50",l),d.hasOwnProperty(l)){var x=d[l];k.attributeName=x}a.hasOwnProperty(l)&&(k.attributeNamespace=a[l]),c.hasOwnProperty(l)&&(k.propertyName=c[l]),p.hasOwnProperty(l)&&(k.mutationMethod=p[l]),i.properties[l]=k}}}),a=":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD",i={ID_ATTRIBUTE_NAME:"data-reactid",ROOT_ATTRIBUTE_NAME:"data-reactroot",ATTRIBUTE_NAME_START_CHAR:a,ATTRIBUTE_NAME_CHAR:a+"\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040",properties:{},getPossibleStandardName:null,_isCustomAttributeFunctions:[],isCustomAttribute:function(t){for(var e=0;e<i._isCustomAttributeFunctions.length;e++){var n=i._isCustomAttributeFunctions[e];if(n(t))return!0}return!1},injection:s};t.exports=i},function(t,e,n){"use strict";function o(){r.attachRefs(this,this._currentElement)}var r=n(149),s=(n(7),n(3),{mountComponent:function(t,e,n,r,s){var a=t.mountComponent(e,n,r,s);return t._currentElement&&null!=t._currentElement.ref&&e.getReactMountReady().enqueue(o,t),a},getHostNode:function(t){return t.getHostNode()},unmountComponent:function(t,e){r.detachRefs(t,t._currentElement),t.unmountComponent(e)},receiveComponent:function(t,e,n,s){var a=t._currentElement;if(e!==a||s!==t._context){var i=r.shouldUpdateRefs(a,e);i&&r.detachRefs(t,a),t.receiveComponent(e,n,s),i&&t._currentElement&&null!=t._currentElement.ref&&n.getReactMountReady().enqueue(o,t)}},performUpdateIfNecessary:function(t,e,n){t._updateBatchNumber===n&&t.performUpdateIfNecessary(e)}});t.exports=s},function(t,e,n){"use strict";var o={};t.exports=o},function(t,e,n){"use strict";var o=n(2),r=n(35),s=n(36),a=n(42),i=n(78),d=n(80),c=(n(1),{}),p=null,l=function(t,e){t&&(s.executeDispatchesInOrder(t,e),t.isPersistent()||t.constructor.release(t))},u=function(t){return l(t,!0)},f=function(t){return l(t,!1)},k=function(t){return"."+t._rootNodeID},x={injection:{injectEventPluginOrder:r.injectEventPluginOrder,injectEventPluginsByName:r.injectEventPluginsByName},putListener:function(t,e,n){"function"!=typeof n?o("94",e,typeof n):void 0;var s=k(t),a=c[e]||(c[e]={});a[s]=n;var i=r.registrationNameModules[e];i&&i.didPutListener&&i.didPutListener(t,e,n)},getListener:function(t,e){var n=c[e],o=k(t);return n&&n[o]},deleteListener:function(t,e){var n=r.registrationNameModules[e];n&&n.willDeleteListener&&n.willDeleteListener(t,e);var o=c[e];if(o){var s=k(t);delete o[s]}},deleteAllListeners:function(t){var e=k(t);for(var n in c)if(c.hasOwnProperty(n)&&c[n][e]){var o=r.registrationNameModules[n];o&&o.willDeleteListener&&o.willDeleteListener(t,n),delete c[n][e]}},extractEvents:function(t,e,n,o){for(var s,a=r.plugins,d=0;d<a.length;d++){var c=a[d];if(c){var p=c.extractEvents(t,e,n,o);p&&(s=i(s,p))}}return s},enqueueEvents:function(t){t&&(p=i(p,t))},processEventQueue:function(t){var e=p;p=null,t?d(e,u):d(e,f),p?o("95"):void 0,a.rethrowCaughtError()},__purge:function(){c={}},__getListenerBank:function(){return c}};t.exports=x},function(t,e,n){"use strict";function o(t,e,n){var o=e.dispatchConfig.phasedRegistrationNames[n];return m(t,o)}function r(t,e,n){var r=e?h.bubbled:h.captured,s=o(t,n,r);s&&(n._dispatchListeners=g(n._dispatchListeners,s),n._dispatchInstances=g(n._dispatchInstances,t))}function s(t){t&&t.dispatchConfig.phasedRegistrationNames&&x.traverseTwoPhase(t._targetInst,r,t)}function a(t){if(t&&t.dispatchConfig.phasedRegistrationNames){var e=t._targetInst,n=e?x.getParentInstance(e):null;x.traverseTwoPhase(n,r,t)}}function i(t,e,n){if(n&&n.dispatchConfig.registrationName){var o=n.dispatchConfig.registrationName,r=m(t,o);r&&(n._dispatchListeners=g(n._dispatchListeners,r),n._dispatchInstances=g(n._dispatchInstances,t))}}function d(t){t&&t.dispatchConfig.registrationName&&i(t._targetInst,null,t)}function c(t){y(t,s)}function p(t){y(t,a)}function l(t,e,n,o){x.traverseEnterLeave(n,o,i,t,e)}function u(t){y(t,d)}var f=n(11),k=n(20),x=n(36),g=n(78),y=n(80),h=(n(3),f.PropagationPhases),m=k.getListener,b={accumulateTwoPhaseDispatches:c,accumulateTwoPhaseDispatchesSkipTarget:p,accumulateDirectDispatches:u,accumulateEnterLeaveDispatches:l};t.exports=b},function(t,e){"use strict";var n={remove:function(t){t._reactInternalInstance=void 0},get:function(t){return t._reactInternalInstance},has:function(t){return void 0!==t._reactInternalInstance},set:function(t,e){t._reactInternalInstance=e}};t.exports=n},function(t,e,n){"use strict";function o(t,e,n,o){return r.call(this,t,e,n,o)}var r=n(12),s=n(51),a={view:function(t){if(t.view)return t.view;var e=s(t);if(e.window===e)return e;var n=e.ownerDocument;return n?n.defaultView||n.parentWindow:window},detail:function(t){return t.detail||0}};r.augmentClass(o,a),t.exports=o},function(t,e,n){"use strict";var o=n(2),r=(n(1),{reinitializeTransaction:function(){this.transactionWrappers=this.getTransactionWrappers(),this.wrapperInitData?this.wrapperInitData.length=0:this.wrapperInitData=[],this._isInTransaction=!1},_isInTransaction:!1,getTransactionWrappers:null,isInTransaction:function(){return!!this._isInTransaction},perform:function(t,e,n,r,s,a,i,d){this.isInTransaction()?o("27"):void 0;var c,p;try{this._isInTransaction=!0,c=!0,this.initializeAll(0),p=t.call(e,n,r,s,a,i,d),c=!1}finally{try{if(c)try{this.closeAll(0)}catch(l){}else this.closeAll(0)}finally{this._isInTransaction=!1}}return p},initializeAll:function(t){for(var e=this.transactionWrappers,n=t;n<e.length;n++){var o=e[n];try{this.wrapperInitData[n]=s.OBSERVED_ERROR,this.wrapperInitData[n]=o.initialize?o.initialize.call(this):null}finally{if(this.wrapperInitData[n]===s.OBSERVED_ERROR)try{this.initializeAll(n+1)}catch(r){}}}},closeAll:function(t){this.isInTransaction()?void 0:o("28");for(var e=this.transactionWrappers,n=t;n<e.length;n++){var r,a=e[n],i=this.wrapperInitData[n];try{r=!0,i!==s.OBSERVED_ERROR&&a.close&&a.close.call(this,i),r=!1}finally{if(r)try{this.closeAll(n+1)}catch(d){}}}this.wrapperInitData.length=0}}),s={Mixin:r,OBSERVED_ERROR:{}};t.exports=s},function(t,e,n){"use strict";var o=n(1),r=function(t){var e,n={};t instanceof Object&&!Array.isArray(t)?void 0:o(!1);for(e in t)t.hasOwnProperty(e)&&(n[e]=e);return n};t.exports=r},function(t,e){"use strict";var n={onClick:!0,onDoubleClick:!0,onMouseDown:!0,onMouseMove:!0,onMouseUp:!0,onClickCapture:!0,onDoubleClickCapture:!0,onMouseDownCapture:!0,onMouseMoveCapture:!0,onMouseUpCapture:!0},o={getHostProps:function(t,e){if(!e.disabled)return e;var o={};for(var r in e)!n[r]&&e.hasOwnProperty(r)&&(o[r]=e[r]);return o}};t.exports=o},function(t,e,n){"use strict";function o(t){return Object.prototype.hasOwnProperty.call(t,g)||(t[g]=k++,u[t[g]]={}),u[t[g]]}var r,s=n(4),a=n(11),i=n(35),d=n(141),c=n(77),p=n(172),l=n(52),u={},f=!1,k=0,x={topAbort:"abort",topAnimationEnd:p("animationend")||"animationend",topAnimationIteration:p("animationiteration")||"animationiteration",topAnimationStart:p("animationstart")||"animationstart",topBlur:"blur",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topChange:"change",topClick:"click",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topScroll:"scroll",topSeeked:"seeked",topSeeking:"seeking",topSelectionChange:"selectionchange",topStalled:"stalled",topSuspend:"suspend",topTextInput:"textInput",topTimeUpdate:"timeupdate",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topTransitionEnd:p("transitionend")||"transitionend",topVolumeChange:"volumechange",topWaiting:"waiting",topWheel:"wheel"},g="_reactListenersID"+String(Math.random()).slice(2),y=s({},d,{ReactEventListener:null,injection:{injectReactEventListener:function(t){t.setHandleTopLevel(y.handleTopLevel),y.ReactEventListener=t}},setEnabled:function(t){y.ReactEventListener&&y.ReactEventListener.setEnabled(t)},isEnabled:function(){return!(!y.ReactEventListener||!y.ReactEventListener.isEnabled())},listenTo:function(t,e){for(var n=e,r=o(n),s=i.registrationNameDependencies[t],d=a.topLevelTypes,c=0;c<s.length;c++){var p=s[c];r.hasOwnProperty(p)&&r[p]||(p===d.topWheel?l("wheel")?y.ReactEventListener.trapBubbledEvent(d.topWheel,"wheel",n):l("mousewheel")?y.ReactEventListener.trapBubbledEvent(d.topWheel,"mousewheel",n):y.ReactEventListener.trapBubbledEvent(d.topWheel,"DOMMouseScroll",n):p===d.topScroll?l("scroll",!0)?y.ReactEventListener.trapCapturedEvent(d.topScroll,"scroll",n):y.ReactEventListener.trapBubbledEvent(d.topScroll,"scroll",y.ReactEventListener.WINDOW_HANDLE):p===d.topFocus||p===d.topBlur?(l("focus",!0)?(y.ReactEventListener.trapCapturedEvent(d.topFocus,"focus",n),y.ReactEventListener.trapCapturedEvent(d.topBlur,"blur",n)):l("focusin")&&(y.ReactEventListener.trapBubbledEvent(d.topFocus,"focusin",n),y.ReactEventListener.trapBubbledEvent(d.topBlur,"focusout",n)),r[d.topBlur]=!0,r[d.topFocus]=!0):x.hasOwnProperty(p)&&y.ReactEventListener.trapBubbledEvent(p,x[p],n),r[p]=!0)}},trapBubbledEvent:function(t,e,n){return y.ReactEventListener.trapBubbledEvent(t,e,n)},trapCapturedEvent:function(t,e,n){return y.ReactEventListener.trapCapturedEvent(t,e,n)},ensureScrollValueMonitoring:function(){if(void 0===r&&(r=document.createEvent&&"pageX"in document.createEvent("MouseEvent")),!r&&!f){var t=c.refreshScrollValues;y.ReactEventListener.monitorScrollValue(t),f=!0}}});t.exports=y},function(t,e,n){"use strict";function o(t,e,n,o){return r.call(this,t,e,n,o)}var r=n(23),s=n(77),a=n(50),i={screenX:null,screenY:null,clientX:null,clientY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:a,button:function(t){var e=t.button;return"which"in t?e:2===e?2:4===e?1:0},buttons:null,relatedTarget:function(t){return t.relatedTarget||(t.fromElement===t.srcElement?t.toElement:t.fromElement)},pageX:function(t){return"pageX"in t?t.pageX:t.clientX+s.currentScrollLeft},pageY:function(t){return"pageY"in t?t.pageY:t.clientY+s.currentScrollTop}};r.augmentClass(o,i),t.exports=o},function(t,e){"use strict";function n(t){var e=""+t,n=r.exec(e);if(!n)return e;var o,s="",a=0,i=0;for(a=n.index;a<e.length;a++){switch(e.charCodeAt(a)){case 34:o="&quot;";break;case 38:o="&amp;";break;case 39:o="&#x27;";break;case 60:o="&lt;";break;case 62:o="&gt;";break;default:continue}i!==a&&(s+=e.substring(i,a)),i=a+1,s+=o}return i!==a?s+e.substring(i,a):s}function o(t){return"boolean"==typeof t||"number"==typeof t?""+t:n(t)}var r=/["'&<>]/;t.exports=o},function(t,e,n){"use strict";var o,r=n(6),s=n(34),a=/^[ \r\n\t\f]/,i=/<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/,d=n(48),c=d(function(t,e){if(t.namespaceURI!==s.svg||"innerHTML"in t)t.innerHTML=e;else{o=o||document.createElement("div"),o.innerHTML="<svg>"+e+"</svg>";for(var n=o.firstChild.childNodes,r=0;r<n.length;r++)t.appendChild(n[r])}});if(r.canUseDOM){var p=document.createElement("div");p.innerHTML=" ",""===p.innerHTML&&(c=function(t,e){if(t.parentNode&&t.parentNode.replaceChild(t,t),a.test(e)||"<"===e[0]&&i.test(e)){t.innerHTML=String.fromCharCode(65279)+e;var n=t.firstChild;1===n.data.length?t.removeChild(n):n.deleteData(0,1)}else t.innerHTML=e}),p=null}t.exports=c},function(t,e){"use strict";function n(t,e){return t===e?0!==t||1/t===1/e:t!==t&&e!==e}function o(t,e){if(n(t,e))return!0;if("object"!=typeof t||null===t||"object"!=typeof e||null===e)return!1;var o=Object.keys(t),s=Object.keys(e);if(o.length!==s.length)return!1;for(var a=0;a<o.length;a++)if(!r.call(e,o[a])||!n(t[o[a]],e[o[a]]))return!1;return!0}var r=Object.prototype.hasOwnProperty;t.exports=o},function(t,e){function n(){l&&c&&(l=!1,c.length?p=c.concat(p):u=-1,p.length&&o())}function o(){if(!l){var t=a.call(null,n);l=!0;for(var e=p.length;e;){for(c=p,p=[];++u<e;)c&&c[u].run();u=-1,e=p.length}c=null,l=!1,i.call(null,t)}}function r(t,e){this.fun=t,this.array=e}function s(){}var a,i,d=t.exports={};!function(){try{a=setTimeout}catch(t){a=function(){throw new Error("setTimeout is not defined")}}try{i=clearTimeout}catch(t){i=function(){throw new Error("clearTimeout is not defined")}}}();var c,p=[],l=!1,u=-1;d.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];p.push(new r(t,e)),1!==p.length||l||a.call(null,o,0)},r.prototype.run=function(){this.fun.apply(null,this.array)},d.title="browser",d.browser=!0,d.env={},d.argv=[],d.version="",d.versions={},d.on=s,d.addListener=s,d.once=s,d.off=s,d.removeListener=s,d.removeAllListeners=s,d.emit=s,d.binding=function(t){throw new Error("process.binding is not supported")},d.cwd=function(){return"/"},d.chdir=function(t){throw new Error("process.chdir is not supported")},d.umask=function(){return 0}},function(t,e,n){"use strict";function o(t,e){return Array.isArray(e)&&(e=e[1]),e?e.nextSibling:t.firstChild}function r(t,e,n){p.insertTreeBefore(t,e,n)}function s(t,e,n){Array.isArray(e)?i(t,e[0],e[1],n):g(t,e,n)}function a(t,e){if(Array.isArray(e)){var n=e[1];e=e[0],d(t,e,n),t.removeChild(n)}t.removeChild(e)}function i(t,e,n,o){for(var r=e;;){var s=r.nextSibling;if(g(t,r,o),r===n)break;r=s}}function d(t,e,n){for(;;){var o=e.nextSibling;if(o===n)break;t.removeChild(o)}}function c(t,e,n){var o=t.parentNode,r=t.nextSibling;r===e?n&&g(o,document.createTextNode(n),r):n?(x(r,n),d(o,r,e)):d(o,t,e)}var p=n(16),l=n(116),u=n(73),f=(n(5),n(7),n(48)),k=n(30),x=n(86),g=f(function(t,e,n){t.insertBefore(e,n)}),y=l.dangerouslyReplaceNodeWithMarkup,h={dangerouslyReplaceNodeWithMarkup:y,replaceDelimitedText:c,processUpdates:function(t,e){for(var n=0;n<e.length;n++){var i=e[n];switch(i.type){case u.INSERT_MARKUP:r(t,i.content,o(t,i.afterNode));break;case u.MOVE_EXISTING:s(t,i.fromNode,o(t,i.afterNode));break;case u.SET_MARKUP:k(t,i.content);break;case u.TEXT_CONTENT:x(t,i.content);break;case u.REMOVE_NODE:a(t,i.fromNode)}}}};t.exports=h},function(t,e){"use strict";var n={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};t.exports=n},function(t,e,n){"use strict";function o(){if(i)for(var t in d){var e=d[t],n=i.indexOf(t);if(n>-1?void 0:a("96",t),!c.plugins[n]){e.extractEvents?void 0:a("97",t),c.plugins[n]=e;var o=e.eventTypes;for(var s in o)r(o[s],e,s)?void 0:a("98",s,t)}}}function r(t,e,n){c.eventNameDispatchConfigs.hasOwnProperty(n)?a("99",n):void 0,c.eventNameDispatchConfigs[n]=t;var o=t.phasedRegistrationNames;if(o){for(var r in o)if(o.hasOwnProperty(r)){var i=o[r];s(i,e,n)}return!0}return!!t.registrationName&&(s(t.registrationName,e,n),!0)}function s(t,e,n){c.registrationNameModules[t]?a("100",t):void 0,c.registrationNameModules[t]=e,c.registrationNameDependencies[t]=e.eventTypes[n].dependencies}var a=n(2),i=(n(1),null),d={},c={plugins:[],eventNameDispatchConfigs:{},registrationNameModules:{},registrationNameDependencies:{},possibleRegistrationNames:null,injectEventPluginOrder:function(t){i?a("101"):void 0,i=Array.prototype.slice.call(t),o()},injectEventPluginsByName:function(t){var e=!1;for(var n in t)if(t.hasOwnProperty(n)){var r=t[n];d.hasOwnProperty(n)&&d[n]===r||(d[n]?a("102",n):void 0,d[n]=r,e=!0)}e&&o()},getPluginModuleForEvent:function(t){var e=t.dispatchConfig;if(e.registrationName)return c.registrationNameModules[e.registrationName]||null;for(var n in e.phasedRegistrationNames)if(e.phasedRegistrationNames.hasOwnProperty(n)){var o=c.registrationNameModules[e.phasedRegistrationNames[n]];if(o)return o}return null},_resetEventPlugins:function(){i=null;for(var t in d)d.hasOwnProperty(t)&&delete d[t];c.plugins.length=0;var e=c.eventNameDispatchConfigs;for(var n in e)e.hasOwnProperty(n)&&delete e[n];var o=c.registrationNameModules;for(var r in o)o.hasOwnProperty(r)&&delete o[r]}};t.exports=c},function(t,e,n){"use strict";function o(t){return t===h.topMouseUp||t===h.topTouchEnd||t===h.topTouchCancel}function r(t){return t===h.topMouseMove||t===h.topTouchMove}function s(t){return t===h.topMouseDown||t===h.topTouchStart}function a(t,e,n,o){var r=t.type||"unknown-event";t.currentTarget=m.getNodeFromInstance(o),e?g.invokeGuardedCallbackWithCatch(r,n,t):g.invokeGuardedCallback(r,n,t),t.currentTarget=null}function i(t,e){var n=t._dispatchListeners,o=t._dispatchInstances;if(Array.isArray(n))for(var r=0;r<n.length&&!t.isPropagationStopped();r++)a(t,e,n[r],o[r]);else n&&a(t,e,n,o);t._dispatchListeners=null,t._dispatchInstances=null}function d(t){var e=t._dispatchListeners,n=t._dispatchInstances;if(Array.isArray(e)){for(var o=0;o<e.length&&!t.isPropagationStopped();o++)if(e[o](t,n[o]))return n[o]}else if(e&&e(t,n))return n;
return null}function c(t){var e=d(t);return t._dispatchInstances=null,t._dispatchListeners=null,e}function p(t){var e=t._dispatchListeners,n=t._dispatchInstances;Array.isArray(e)?k("103"):void 0,t.currentTarget=e?m.getNodeFromInstance(n):null;var o=e?e(t):null;return t.currentTarget=null,t._dispatchListeners=null,t._dispatchInstances=null,o}function l(t){return!!t._dispatchListeners}var u,f,k=n(2),x=n(11),g=n(42),y=(n(1),n(3),{injectComponentTree:function(t){u=t},injectTreeTraversal:function(t){f=t}}),h=x.topLevelTypes,m={isEndish:o,isMoveish:r,isStartish:s,executeDirectDispatch:p,executeDispatchesInOrder:i,executeDispatchesInOrderStopAtTrue:c,hasDispatches:l,getInstanceFromNode:function(t){return u.getInstanceFromNode(t)},getNodeFromInstance:function(t){return u.getNodeFromInstance(t)},isAncestor:function(t,e){return f.isAncestor(t,e)},getLowestCommonAncestor:function(t,e){return f.getLowestCommonAncestor(t,e)},getParentInstance:function(t){return f.getParentInstance(t)},traverseTwoPhase:function(t,e,n){return f.traverseTwoPhase(t,e,n)},traverseEnterLeave:function(t,e,n,o,r){return f.traverseEnterLeave(t,e,n,o,r)},injection:y};t.exports=m},function(t,e){"use strict";function n(t){var e=/[=:]/g,n={"=":"=0",":":"=2"},o=(""+t).replace(e,function(t){return n[t]});return"$"+o}function o(t){var e=/(=0|=2)/g,n={"=0":"=","=2":":"},o="."===t[0]&&"$"===t[1]?t.substring(2):t.substring(1);return(""+o).replace(e,function(t){return n[t]})}var r={escape:n,unescape:o};t.exports=r},function(t,e,n){"use strict";function o(t){null!=t.checkedLink&&null!=t.valueLink?i("87"):void 0}function r(t){o(t),null!=t.value||null!=t.onChange?i("88"):void 0}function s(t){o(t),null!=t.checked||null!=t.onChange?i("89"):void 0}function a(t){if(t){var e=t.getName();if(e)return" Check the render method of `"+e+"`."}return""}var i=n(2),d=n(75),c=n(45),p=n(46),l=(n(1),n(3),{button:!0,checkbox:!0,image:!0,hidden:!0,radio:!0,reset:!0,submit:!0}),u={value:function(t,e,n){return!t[e]||l[t.type]||t.onChange||t.readOnly||t.disabled?null:new Error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.")},checked:function(t,e,n){return!t[e]||t.onChange||t.readOnly||t.disabled?null:new Error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.")},onChange:d.func},f={},k={checkPropTypes:function(t,e,n){for(var o in u){if(u.hasOwnProperty(o))var r=u[o](e,o,t,c.prop,null,p);if(r instanceof Error&&!(r.message in f)){f[r.message]=!0;a(n)}}},getValue:function(t){return t.valueLink?(r(t),t.valueLink.value):t.value},getChecked:function(t){return t.checkedLink?(s(t),t.checkedLink.value):t.checked},executeOnChange:function(t,e){return t.valueLink?(r(t),t.valueLink.requestChange(e.target.value)):t.checkedLink?(s(t),t.checkedLink.requestChange(e.target.checked)):t.onChange?t.onChange.call(void 0,e):void 0}};t.exports=k},function(t,e,n){"use strict";function o(t,e,n){this.props=t,this.context=e,this.refs=a,this.updater=n||s}var r=n(2),s=n(43),a=(n(79),n(19));n(1),n(3);o.prototype.isReactComponent={},o.prototype.setState=function(t,e){"object"!=typeof t&&"function"!=typeof t&&null!=t?r("85"):void 0,this.updater.enqueueSetState(this,t),e&&this.updater.enqueueCallback(this,e,"setState")},o.prototype.forceUpdate=function(t){this.updater.enqueueForceUpdate(this),t&&this.updater.enqueueCallback(this,t,"forceUpdate")};t.exports=o},function(t,e,n){"use strict";var o=n(2),r=(n(1),!1),s={unmountIDFromEnvironment:null,replaceNodeWithMarkup:null,processChildrenUpdates:null,injection:{injectEnvironment:function(t){r?o("104"):void 0,s.unmountIDFromEnvironment=t.unmountIDFromEnvironment,s.replaceNodeWithMarkup=t.replaceNodeWithMarkup,s.processChildrenUpdates=t.processChildrenUpdates,r=!0}}};t.exports=s},function(t,e,n){"use strict";function o(t,e){c[t]||(c[t]={element:null,parentID:null,ownerID:null,text:null,childIDs:[],displayName:"Unknown",isMounted:!1,updateCount:0}),e(c[t])}function r(t){var e=c[t];if(e){var n=e.childIDs;delete c[t],n.forEach(r)}}function s(t,e,n){return"\n    in "+t+(e?" (at "+e.fileName.replace(/^.*[\\\/]/,"")+":"+e.lineNumber+")":n?" (created by "+n+")":"")}function a(t){var e,n=u.getDisplayName(t),o=u.getElement(t),r=u.getOwnerID(t);return r&&(e=u.getDisplayName(r)),s(n,o&&o._source,e)}var i=n(2),d=n(15),c=(n(1),n(3),{}),p={},l={},u={onSetDisplayName:function(t,e){o(t,function(t){return t.displayName=e})},onSetChildren:function(t,e){o(t,function(n){n.childIDs=e,e.forEach(function(e){var n=c[e];n?void 0:i("68"),null==n.displayName?i("69"):void 0,null==n.childIDs&&null==n.text?i("70"):void 0,n.isMounted?void 0:i("71"),null==n.parentID&&(n.parentID=t),n.parentID!==t?i("72",e,n.parentID,t):void 0})})},onSetOwner:function(t,e){o(t,function(t){return t.ownerID=e})},onSetParent:function(t,e){o(t,function(t){return t.parentID=e})},onSetText:function(t,e){o(t,function(t){return t.text=e})},onBeforeMountComponent:function(t,e){o(t,function(t){return t.element=e})},onBeforeUpdateComponent:function(t,e){o(t,function(t){return t.element=e})},onMountComponent:function(t){o(t,function(t){return t.isMounted=!0})},onMountRootComponent:function(t){l[t]=!0},onUpdateComponent:function(t){o(t,function(t){return t.updateCount++})},onUnmountComponent:function(t){o(t,function(t){return t.isMounted=!1}),p[t]=!0,delete l[t]},purgeUnmountedComponents:function(){if(!u._preventPurging){for(var t in p)r(t);p={}}},isMounted:function(t){var e=c[t];return!!e&&e.isMounted},getCurrentStackAddendum:function(t){var e="";if(t){var n=t.type,o="function"==typeof n?n.displayName||n.name:n,r=t._owner;e+=s(o||"Unknown",t._source,r&&r.getName())}var a=d.current,i=a&&a._debugID;return e+=u.getStackAddendumByID(i)},getStackAddendumByID:function(t){for(var e="";t;)e+=a(t),t=u.getParentID(t);return e},getChildIDs:function(t){var e=c[t];return e?e.childIDs:[]},getDisplayName:function(t){var e=c[t];return e?e.displayName:"Unknown"},getElement:function(t){var e=c[t];return e?e.element:null},getOwnerID:function(t){var e=c[t];return e?e.ownerID:null},getParentID:function(t){var e=c[t];return e?e.parentID:null},getSource:function(t){var e=c[t],n=e?e.element:null,o=null!=n?n._source:null;return o},getText:function(t){var e=c[t];return e?e.text:null},getUpdateCount:function(t){var e=c[t];return e?e.updateCount:0},getRootIDs:function(){return Object.keys(l)},getRegisteredIDs:function(){return Object.keys(c)}};t.exports=u},function(t,e,n){"use strict";function o(t,e,n,o){try{return e(n,o)}catch(s){return void(null===r&&(r=s))}}var r=null,s={invokeGuardedCallback:o,invokeGuardedCallbackWithCatch:o,rethrowCaughtError:function(){if(r){var t=r;throw r=null,t}}};t.exports=s},function(t,e,n){"use strict";function o(t,e){}var r=(n(3),{isMounted:function(t){return!1},enqueueCallback:function(t,e){},enqueueForceUpdate:function(t){o(t,"forceUpdate")},enqueueReplaceState:function(t,e){o(t,"replaceState")},enqueueSetState:function(t,e){o(t,"setState")}});t.exports=r},function(t,e,n){"use strict";var o={};t.exports=o},function(t,e,n){"use strict";var o=n(25),r=o({prop:null,context:null,childContext:null});t.exports=r},function(t,e){"use strict";var n="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";t.exports=n},function(t,e,n){"use strict";function o(t){d.enqueueUpdate(t)}function r(t){var e=typeof t;if("object"!==e)return e;var n=t.constructor&&t.constructor.name||e,o=Object.keys(t);return o.length>0&&o.length<20?n+" (keys: "+o.join(", ")+")":n}function s(t,e){var n=i.get(t);if(!n){return null}return n}var a=n(2),i=(n(15),n(22)),d=(n(7),n(10)),c=(n(1),n(3),{isMounted:function(t){var e=i.get(t);return!!e&&!!e._renderedComponent},enqueueCallback:function(t,e,n){c.validateCallback(e,n);var r=s(t);return r?(r._pendingCallbacks?r._pendingCallbacks.push(e):r._pendingCallbacks=[e],void o(r)):null},enqueueCallbackInternal:function(t,e){t._pendingCallbacks?t._pendingCallbacks.push(e):t._pendingCallbacks=[e],o(t)},enqueueForceUpdate:function(t){var e=s(t,"forceUpdate");e&&(e._pendingForceUpdate=!0,o(e))},enqueueReplaceState:function(t,e){var n=s(t,"replaceState");n&&(n._pendingStateQueue=[e],n._pendingReplaceState=!0,o(n))},enqueueSetState:function(t,e){var n=s(t,"setState");if(n){var r=n._pendingStateQueue||(n._pendingStateQueue=[]);r.push(e),o(n)}},enqueueElementInternal:function(t,e,n){t._pendingElement=e,t._context=n,o(t)},validateCallback:function(t,e){t&&"function"!=typeof t?a("122",e,r(t)):void 0}});t.exports=c},function(t,e){"use strict";var n=function(t){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,n,o,r){MSApp.execUnsafeLocalFunction(function(){return t(e,n,o,r)})}:t};t.exports=n},function(t,e){"use strict";function n(t){var e,n=t.keyCode;return"charCode"in t?(e=t.charCode,0===e&&13===n&&(e=13)):e=n,e>=32||13===e?e:0}t.exports=n},function(t,e){"use strict";function n(t){var e=this,n=e.nativeEvent;if(n.getModifierState)return n.getModifierState(t);var o=r[t];return!!o&&!!n[o]}function o(t){return n}var r={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};t.exports=o},function(t,e){"use strict";function n(t){var e=t.target||t.srcElement||window;return e.correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}t.exports=n},function(t,e,n){"use strict";function o(t,e){if(!s.canUseDOM||e&&!("addEventListener"in document))return!1;var n="on"+t,o=n in document;if(!o){var a=document.createElement("div");a.setAttribute(n,"return;"),o="function"==typeof a[n]}return!o&&r&&"wheel"===t&&(o=document.implementation.hasFeature("Events.wheel","3.0")),o}var r,s=n(6);s.canUseDOM&&(r=document.implementation&&document.implementation.hasFeature&&document.implementation.hasFeature("","")!==!0),t.exports=o},function(t,e){"use strict";function n(t,e){var n=null===t||t===!1,o=null===e||e===!1;if(n||o)return n===o;var r=typeof t,s=typeof e;return"string"===r||"number"===r?"string"===s||"number"===s:"object"===s&&t.type===e.type&&t.key===e.key}t.exports=n},function(t,e,n){"use strict";function o(t,e){return t&&"object"==typeof t&&null!=t.key?c.escape(t.key):e.toString(36)}function r(t,e,n,s){var u=typeof t;if("undefined"!==u&&"boolean"!==u||(t=null),null===t||"string"===u||"number"===u||i.isValidElement(t))return n(s,t,""===e?p+o(t,0):e),1;var f,k,x=0,g=""===e?p:e+l;if(Array.isArray(t))for(var y=0;y<t.length;y++)f=t[y],k=g+o(f,y),x+=r(f,k,n,s);else{var h=d(t);if(h){var m,b=h.call(t);if(h!==t.entries)for(var v=0;!(m=b.next()).done;)f=m.value,k=g+o(f,v++),x+=r(f,k,n,s);else for(;!(m=b.next()).done;){var w=m.value;w&&(f=w[1],k=g+c.escape(w[0])+l+o(f,0),x+=r(f,k,n,s))}}else if("object"===u){var T="",O=String(t);a("31","[object Object]"===O?"object with keys {"+Object.keys(t).join(", ")+"}":O,T)}}return x}function s(t,e,n){return null==t?0:r(t,"",e,n)}var a=n(2),i=(n(15),n(9)),d=n(82),c=(n(1),n(37)),p=(n(3),"."),l=":";t.exports=s},function(t,e,n){"use strict";var o=(n(4),n(8)),r=(n(3),o);t.exports=r},function(t,e,n){"use strict";var o=n(8),r={listen:function(t,e,n){return t.addEventListener?(t.addEventListener(e,n,!1),{remove:function(){t.removeEventListener(e,n,!1)}}):t.attachEvent?(t.attachEvent("on"+e,n),{remove:function(){t.detachEvent("on"+e,n)}}):void 0},capture:function(t,e,n){return t.addEventListener?(t.addEventListener(e,n,!0),{remove:function(){t.removeEventListener(e,n,!0)}}):{remove:o}},registerDefault:function(){}};t.exports=r},function(t,e){"use strict";function n(t){try{t.focus()}catch(e){}}t.exports=n},function(t,e){"use strict";function n(){if("undefined"==typeof document)return null;try{return document.activeElement||document.body}catch(t){return document.body}}t.exports=n},function(t,e,n){"use strict";function o(){}function r(t){try{return t.then}catch(e){return y=e,h}}function s(t,e){try{return t(e)}catch(n){return y=n,h}}function a(t,e,n){try{t(e,n)}catch(o){return y=o,h}}function i(t){if("object"!=typeof this)throw new TypeError("Promises must be constructed via new");if("function"!=typeof t)throw new TypeError("not a function");this._45=0,this._81=0,this._65=null,this._54=null,t!==o&&x(t,this)}function d(t,e,n){return new t.constructor(function(r,s){var a=new i(o);a.then(r,s),c(t,new k(e,n,a))})}function c(t,e){for(;3===t._81;)t=t._65;return i._10&&i._10(t),0===t._81?0===t._45?(t._45=1,void(t._54=e)):1===t._45?(t._45=2,void(t._54=[t._54,e])):void t._54.push(e):void p(t,e)}function p(t,e){g(function(){var n=1===t._81?e.onFulfilled:e.onRejected;if(null===n)return void(1===t._81?l(e.promise,t._65):u(e.promise,t._65));var o=s(n,t._65);o===h?u(e.promise,y):l(e.promise,o)})}function l(t,e){if(e===t)return u(t,new TypeError("A promise cannot be resolved with itself."));if(e&&("object"==typeof e||"function"==typeof e)){var n=r(e);if(n===h)return u(t,y);if(n===t.then&&e instanceof i)return t._81=3,t._65=e,void f(t);if("function"==typeof n)return void x(n.bind(e),t)}t._81=1,t._65=e,f(t)}function u(t,e){t._81=2,t._65=e,i._97&&i._97(t,e),f(t)}function f(t){if(1===t._45&&(c(t,t._54),t._54=null),2===t._45){for(var e=0;e<t._54.length;e++)c(t,t._54[e]);t._54=null}}function k(t,e,n){this.onFulfilled="function"==typeof t?t:null,this.onRejected="function"==typeof e?e:null,this.promise=n}function x(t,e){var n=!1,o=a(t,function(t){n||(n=!0,l(e,t))},function(t){n||(n=!0,u(e,t))});n||o!==h||(n=!0,u(e,y))}var g=n(103),y=null,h={};t.exports=i,i._10=null,i._97=null,i._61=o,i.prototype.then=function(t,e){if(this.constructor!==i)return d(this,t,e);var n=new i(o);return c(this,new k(t,e,n)),n}},function(t,e){"use strict";function n(t,e){return t+e.charAt(0).toUpperCase()+e.substring(1)}var o={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridColumn:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},r=["Webkit","ms","Moz","O"];Object.keys(o).forEach(function(t){r.forEach(function(e){o[n(e,t)]=o[t]})});var s={background:{backgroundAttachment:!0,backgroundColor:!0,backgroundImage:!0,backgroundPositionX:!0,backgroundPositionY:!0,backgroundRepeat:!0},backgroundPosition:{backgroundPositionX:!0,backgroundPositionY:!0},border:{borderWidth:!0,borderStyle:!0,borderColor:!0},borderBottom:{borderBottomWidth:!0,borderBottomStyle:!0,borderBottomColor:!0},borderLeft:{borderLeftWidth:!0,borderLeftStyle:!0,borderLeftColor:!0},borderRight:{borderRightWidth:!0,borderRightStyle:!0,borderRightColor:!0},borderTop:{borderTopWidth:!0,borderTopStyle:!0,borderTopColor:!0},font:{fontStyle:!0,fontVariant:!0,fontWeight:!0,fontSize:!0,lineHeight:!0,fontFamily:!0},outline:{outlineWidth:!0,outlineStyle:!0,outlineColor:!0}},a={isUnitlessNumber:o,shorthandPropertyExpansions:s};t.exports=a},function(t,e,n){"use strict";function o(){this._callbacks=null,this._contexts=null}var r=n(2),s=n(4),a=n(14);n(1);s(o.prototype,{enqueue:function(t,e){this._callbacks=this._callbacks||[],this._contexts=this._contexts||[],this._callbacks.push(t),this._contexts.push(e)},notifyAll:function(){var t=this._callbacks,e=this._contexts;if(t){t.length!==e.length?r("24"):void 0,this._callbacks=null,this._contexts=null;for(var n=0;n<t.length;n++)t[n].call(e[n]);t.length=0,e.length=0}},checkpoint:function(){return this._callbacks?this._callbacks.length:0},rollback:function(t){this._callbacks&&(this._callbacks.length=t,this._contexts.length=t)},reset:function(){this._callbacks=null,this._contexts=null},destructor:function(){this.reset()}}),a.addPoolingTo(o),t.exports=o},function(t,e,n){"use strict";function o(t){return!!c.hasOwnProperty(t)||!d.hasOwnProperty(t)&&(i.test(t)?(c[t]=!0,!0):(d[t]=!0,!1))}function r(t,e){return null==e||t.hasBooleanValue&&!e||t.hasNumericValue&&isNaN(e)||t.hasPositiveNumericValue&&e<1||t.hasOverloadedBooleanValue&&e===!1}var s=n(17),a=(n(5),n(133),n(7),n(174)),i=(n(3),new RegExp("^["+s.ATTRIBUTE_NAME_START_CHAR+"]["+s.ATTRIBUTE_NAME_CHAR+"]*$")),d={},c={},p={createMarkupForID:function(t){return s.ID_ATTRIBUTE_NAME+"="+a(t)},setAttributeForID:function(t,e){t.setAttribute(s.ID_ATTRIBUTE_NAME,e)},createMarkupForRoot:function(){return s.ROOT_ATTRIBUTE_NAME+'=""'},setAttributeForRoot:function(t){t.setAttribute(s.ROOT_ATTRIBUTE_NAME,"")},createMarkupForProperty:function(t,e){var n=s.properties.hasOwnProperty(t)?s.properties[t]:null;if(n){if(r(n,e))return"";var o=n.attributeName;return n.hasBooleanValue||n.hasOverloadedBooleanValue&&e===!0?o+'=""':o+"="+a(e)}return s.isCustomAttribute(t)?null==e?"":t+"="+a(e):null},createMarkupForCustomAttribute:function(t,e){return o(t)&&null!=e?t+"="+a(e):""},setValueForProperty:function(t,e,n){var o=s.properties.hasOwnProperty(e)?s.properties[e]:null;if(o){var a=o.mutationMethod;if(a)a(t,n);else{if(r(o,n))return void this.deleteValueForProperty(t,e);if(o.mustUseProperty)t[o.propertyName]=n;else{var i=o.attributeName,d=o.attributeNamespace;d?t.setAttributeNS(d,i,""+n):o.hasBooleanValue||o.hasOverloadedBooleanValue&&n===!0?t.setAttribute(i,""):t.setAttribute(i,""+n)}}}else if(s.isCustomAttribute(e))return void p.setValueForAttribute(t,e,n)},setValueForAttribute:function(t,e,n){if(o(e)){null==n?t.removeAttribute(e):t.setAttribute(e,""+n)}},deleteValueForAttribute:function(t,e){t.removeAttribute(e)},deleteValueForProperty:function(t,e){var n=s.properties.hasOwnProperty(e)?s.properties[e]:null;if(n){var o=n.mutationMethod;if(o)o(t,void 0);else if(n.mustUseProperty){var r=n.propertyName;n.hasBooleanValue?t[r]=!1:t[r]=""}else t.removeAttribute(n.attributeName)}else s.isCustomAttribute(e)&&t.removeAttribute(e)}};t.exports=p},function(t,e,n){"use strict";function o(t){return(""+t).replace(b,"$&/")}function r(t,e){this.func=t,this.context=e,this.count=0}function s(t,e,n){var o=t.func,r=t.context;o.call(r,e,t.count++)}function a(t,e,n){if(null==t)return t;var o=r.getPooled(e,n);y(t,s,o),r.release(o)}function i(t,e,n,o){this.result=t,this.keyPrefix=e,this.func=n,this.context=o,this.count=0}function d(t,e,n){var r=t.result,s=t.keyPrefix,a=t.func,i=t.context,d=a.call(i,e,t.count++);Array.isArray(d)?c(d,r,n,g.thatReturnsArgument):null!=d&&(x.isValidElement(d)&&(d=x.cloneAndReplaceKey(d,s+(!d.key||e&&e.key===d.key?"":o(d.key)+"/")+n)),r.push(d))}function c(t,e,n,r,s){var a="";null!=n&&(a=o(n)+"/");var c=i.getPooled(e,a,r,s);y(t,d,c),i.release(c)}function p(t,e,n){if(null==t)return t;var o=[];return c(t,o,null,e,n),o}function l(t,e,n){return null}function u(t,e){return y(t,l,null)}function f(t){var e=[];return c(t,e,null,g.thatReturnsArgument),e}var k=n(14),x=n(9),g=n(8),y=n(54),h=k.twoArgumentPooler,m=k.fourArgumentPooler,b=/\/+/g;r.prototype.destructor=function(){this.func=null,this.context=null,this.count=0},k.addPoolingTo(r,h),i.prototype.destructor=function(){this.result=null,this.keyPrefix=null,this.func=null,this.context=null,this.count=0},k.addPoolingTo(i,m);var v={forEach:a,map:p,mapIntoWithKeyPrefixInternal:c,count:u,toArray:f};t.exports=v},function(t,e,n){"use strict";function o(t,e){var n=w.hasOwnProperty(e)?w[e]:null;O.hasOwnProperty(e)&&(n!==b.OVERRIDE_BASE?l("73",e):void 0),t&&(n!==b.DEFINE_MANY&&n!==b.DEFINE_MANY_MERGED?l("74",e):void 0)}function r(t,e){if(e){"function"==typeof e?l("75"):void 0,k.isValidElement(e)?l("76"):void 0;var n=t.prototype,r=n.__reactAutoBindPairs;e.hasOwnProperty(m)&&T.mixins(t,e.mixins);for(var s in e)if(e.hasOwnProperty(s)&&s!==m){var a=e[s],c=n.hasOwnProperty(s);if(o(c,s),T.hasOwnProperty(s))T[s](t,a);else{var p=w.hasOwnProperty(s),u="function"==typeof a,f=u&&!p&&!c&&e.autobind!==!1;if(f)r.push(s,a),n[s]=a;else if(c){var x=w[s];!p||x!==b.DEFINE_MANY_MERGED&&x!==b.DEFINE_MANY?l("77",x,s):void 0,x===b.DEFINE_MANY_MERGED?n[s]=i(n[s],a):x===b.DEFINE_MANY&&(n[s]=d(n[s],a))}else n[s]=a}}}else;}function s(t,e){if(e)for(var n in e){var o=e[n];if(e.hasOwnProperty(n)){var r=n in T;r?l("78",n):void 0;var s=n in t;s?l("79",n):void 0,t[n]=o}}}function a(t,e){t&&e&&"object"==typeof t&&"object"==typeof e?void 0:l("80");for(var n in e)e.hasOwnProperty(n)&&(void 0!==t[n]?l("81",n):void 0,t[n]=e[n]);return t}function i(t,e){return function(){var n=t.apply(this,arguments),o=e.apply(this,arguments);if(null==n)return o;if(null==o)return n;var r={};return a(r,n),a(r,o),r}}function d(t,e){return function(){t.apply(this,arguments),e.apply(this,arguments)}}function c(t,e){var n=e.bind(t);return n}function p(t){for(var e=t.__reactAutoBindPairs,n=0;n<e.length;n+=2){var o=e[n],r=e[n+1];t[o]=c(t,r)}}var l=n(2),u=n(4),f=n(39),k=n(9),x=(n(45),n(44),n(43)),g=n(19),y=(n(1),n(25)),h=n(13),m=(n(3),h({mixins:null})),b=y({DEFINE_ONCE:null,DEFINE_MANY:null,OVERRIDE_BASE:null,DEFINE_MANY_MERGED:null}),v=[],w={mixins:b.DEFINE_MANY,statics:b.DEFINE_MANY,propTypes:b.DEFINE_MANY,contextTypes:b.DEFINE_MANY,childContextTypes:b.DEFINE_MANY,getDefaultProps:b.DEFINE_MANY_MERGED,getInitialState:b.DEFINE_MANY_MERGED,getChildContext:b.DEFINE_MANY_MERGED,render:b.DEFINE_ONCE,componentWillMount:b.DEFINE_MANY,componentDidMount:b.DEFINE_MANY,componentWillReceiveProps:b.DEFINE_MANY,shouldComponentUpdate:b.DEFINE_ONCE,componentWillUpdate:b.DEFINE_MANY,componentDidUpdate:b.DEFINE_MANY,componentWillUnmount:b.DEFINE_MANY,updateComponent:b.OVERRIDE_BASE},T={displayName:function(t,e){t.displayName=e},mixins:function(t,e){if(e)for(var n=0;n<e.length;n++)r(t,e[n])},childContextTypes:function(t,e){t.childContextTypes=u({},t.childContextTypes,e)},contextTypes:function(t,e){t.contextTypes=u({},t.contextTypes,e)},getDefaultProps:function(t,e){t.getDefaultProps?t.getDefaultProps=i(t.getDefaultProps,e):t.getDefaultProps=e},propTypes:function(t,e){t.propTypes=u({},t.propTypes,e)},statics:function(t,e){s(t,e)},autobind:function(){}},O={replaceState:function(t,e){this.updater.enqueueReplaceState(this,t),e&&this.updater.enqueueCallback(this,e,"replaceState")},isMounted:function(){return this.updater.isMounted(this)}},E=function(){};u(E.prototype,f.prototype,O);var _={createClass:function(t){var e=function(t,n,o){this.__reactAutoBindPairs.length&&p(this),this.props=t,this.context=n,this.refs=g,this.updater=o||x,this.state=null;var r=this.getInitialState?this.getInitialState():null;"object"!=typeof r||Array.isArray(r)?l("82",e.displayName||"ReactCompositeComponent"):void 0,this.state=r};e.prototype=new E,e.prototype.constructor=e,e.prototype.__reactAutoBindPairs=[],v.forEach(r.bind(null,e)),r(e,t),e.getDefaultProps&&(e.defaultProps=e.getDefaultProps()),e.prototype.render?void 0:l("83");for(var n in w)e.prototype[n]||(e.prototype[n]=null);return e},injection:{injectMixin:function(t){v.push(t)}}};t.exports=_},function(t,e,n){"use strict";var o=n(33),r=n(131),s={processChildrenUpdates:r.dangerouslyProcessChildrenUpdates,replaceNodeWithMarkup:o.dangerouslyReplaceNodeWithMarkup,unmountIDFromEnvironment:function(t){}};t.exports=s},function(t,e){"use strict";var n={hasCachedChildNodes:1};t.exports=n},function(t,e,n){"use strict";function o(){if(this._rootNodeID&&this._wrapperState.pendingUpdate){this._wrapperState.pendingUpdate=!1;var t=this._currentElement.props,e=d.getValue(t);null!=e&&r(this,Boolean(t.multiple),e)}}function r(t,e,n){var o,r,s=c.getNodeFromInstance(t).options;if(e){for(o={},r=0;r<n.length;r++)o[""+n[r]]=!0;for(r=0;r<s.length;r++){var a=o.hasOwnProperty(s[r].value);s[r].selected!==a&&(s[r].selected=a)}}else{for(o=""+n,r=0;r<s.length;r++)if(s[r].value===o)return void(s[r].selected=!0);s.length&&(s[0].selected=!0)}}function s(t){var e=this._currentElement.props,n=d.executeOnChange(e,t);return this._rootNodeID&&(this._wrapperState.pendingUpdate=!0),p.asap(o,this),n}var a=n(4),i=n(26),d=n(38),c=n(5),p=n(10),l=(n(3),!1),u={getHostProps:function(t,e){return a({},i.getHostProps(t,e),{onChange:t._wrapperState.onChange,value:void 0})},mountWrapper:function(t,e){var n=d.getValue(e);t._wrapperState={pendingUpdate:!1,initialValue:null!=n?n:e.defaultValue,listeners:null,onChange:s.bind(t),wasMultiple:Boolean(e.multiple)},void 0===e.value||void 0===e.defaultValue||l||(l=!0)},getSelectValueContext:function(t){return t._wrapperState.initialValue},postUpdateWrapper:function(t){var e=t._currentElement.props;t._wrapperState.initialValue=void 0;var n=t._wrapperState.wasMultiple;t._wrapperState.wasMultiple=Boolean(e.multiple);var o=d.getValue(e);null!=o?(t._wrapperState.pendingUpdate=!1,r(t,Boolean(e.multiple),o)):n!==Boolean(e.multiple)&&(null!=e.defaultValue?r(t,Boolean(e.multiple),e.defaultValue):r(t,Boolean(e.multiple),e.multiple?[]:""))}};t.exports=u},function(t,e){"use strict";var n,o={injectEmptyComponentFactory:function(t){n=t}},r={create:function(t){return n(t)}};r.injection=o,t.exports=r},function(t,e){"use strict";var n={logTopLevelRenders:!1};t.exports=n},function(t,e,n){"use strict";function o(t){return d?void 0:a("111",t.type),new d(t)}function r(t){return new p(t)}function s(t){return t instanceof p}var a=n(2),i=n(4),d=(n(1),null),c={},p=null,l={injectGenericComponentClass:function(t){d=t},injectTextComponentClass:function(t){p=t},injectComponentClasses:function(t){i(c,t)}},u={createInternalComponent:o,createInstanceForText:r,isTextComponent:s,injection:l};t.exports=u},function(t,e,n){"use strict";function o(t){return s(document.documentElement,t)}var r=n(135),s=n(90),a=n(57),i=n(58),d={hasSelectionCapabilities:function(t){var e=t&&t.nodeName&&t.nodeName.toLowerCase();return e&&("input"===e&&"text"===t.type||"textarea"===e||"true"===t.contentEditable)},getSelectionInformation:function(){var t=i();return{focusedElem:t,selectionRange:d.hasSelectionCapabilities(t)?d.getSelection(t):null}},restoreSelection:function(t){var e=i(),n=t.focusedElem,r=t.selectionRange;e!==n&&o(n)&&(d.hasSelectionCapabilities(n)&&d.setSelection(n,r),a(n))},getSelection:function(t){var e;if("selectionStart"in t)e={start:t.selectionStart,end:t.selectionEnd};else if(document.selection&&t.nodeName&&"input"===t.nodeName.toLowerCase()){var n=document.selection.createRange();n.parentElement()===t&&(e={start:-n.moveStart("character",-t.value.length),end:-n.moveEnd("character",-t.value.length)})}else e=r.getOffsets(t);return e||{start:0,end:0}},setSelection:function(t,e){var n=e.start,o=e.end;if(void 0===o&&(o=n),"selectionStart"in t)t.selectionStart=n,t.selectionEnd=Math.min(o,t.value.length);else if(document.selection&&t.nodeName&&"input"===t.nodeName.toLowerCase()){var s=t.createTextRange();s.collapse(!0),s.moveStart("character",n),s.moveEnd("character",o-n),s.select()}else r.setOffsets(t,e)}};t.exports=d},function(t,e,n){"use strict";function o(t,e){for(var n=Math.min(t.length,e.length),o=0;o<n;o++)if(t.charAt(o)!==e.charAt(o))return o;return t.length===e.length?-1:n}function r(t){return t?t.nodeType===P?t.documentElement:t.firstChild:null}function s(t){return t.getAttribute&&t.getAttribute(R)||""}function a(t,e,n,o,r){var s;if(b.logTopLevelRenders){var a=t._currentElement.props,i=a.type;s="React mount: "+("string"==typeof i?i:i.displayName||i.name),console.time(s)}var d=T.mountComponent(t,n,null,y(t,e),r);s&&console.timeEnd(s),t._renderedComponent._topLevelWrapper=t,J._mountImageIntoNode(d,e,t,o,n)}function i(t,e,n,o){var r=E.ReactReconcileTransaction.getPooled(!n&&h.useCreateElement);r.perform(a,null,t,e,r,n,o),E.ReactReconcileTransaction.release(r)}function d(t,e,n){for(T.unmountComponent(t,n),e.nodeType===P&&(e=e.documentElement);e.lastChild;)e.removeChild(e.lastChild)}function c(t){var e=r(t);if(e){var n=g.getInstanceFromNode(e);return!(!n||!n._hostParent)}}function p(t){var e=r(t),n=e&&g.getInstanceFromNode(e);return n&&!n._hostParent?n:null}function l(t){var e=p(t);return e?e._hostContainerInfo._topLevelWrapper:null}var u=n(2),f=n(16),k=n(17),x=n(27),g=(n(15),n(5)),y=n(127),h=n(130),m=n(9),b=n(69),v=n(22),w=(n(7),n(144)),T=n(18),O=n(47),E=n(10),_=n(19),C=n(84),S=(n(1),n(30)),K=n(53),R=(n(3),k.ID_ATTRIBUTE_NAME),M=k.ROOT_ATTRIBUTE_NAME,A=1,P=9,N=11,I={},D=1,q=function(){this.rootID=D++};q.prototype.isReactComponent={},q.prototype.render=function(){return this.props};var J={TopLevelWrapper:q,_instancesByReactRootID:I,scrollMonitor:function(t,e){e()},_updateRootComponent:function(t,e,n,o,r){return J.scrollMonitor(o,function(){O.enqueueElementInternal(t,e,n),r&&O.enqueueCallbackInternal(t,r)}),t},_renderNewRootComponent:function(t,e,n,o){!e||e.nodeType!==A&&e.nodeType!==P&&e.nodeType!==N?u("37"):void 0,x.ensureScrollValueMonitoring();var r=C(t,!1);E.batchedUpdates(i,r,e,n,o);var s=r._instance.rootID;return I[s]=r,r},renderSubtreeIntoContainer:function(t,e,n,o){return null!=t&&v.has(t)?void 0:u("38"),J._renderSubtreeIntoContainer(t,e,n,o)},_renderSubtreeIntoContainer:function(t,e,n,o){O.validateCallback(o,"ReactDOM.render"),m.isValidElement(e)?void 0:u("39","string"==typeof e?" Instead of passing a string like 'div', pass React.createElement('div') or <div />.":"function"==typeof e?" Instead of passing a class like Foo, pass React.createElement(Foo) or <Foo />.":null!=e&&void 0!==e.props?" This may be caused by unintentionally loading two independent copies of React.":"");var a,i=m(q,null,null,null,null,null,e);if(t){var d=v.get(t);a=d._processChildContext(d._context)}else a=_;var p=l(n);if(p){var f=p._currentElement,k=f.props;if(K(k,e)){var x=p._renderedComponent.getPublicInstance(),g=o&&function(){o.call(x)};return J._updateRootComponent(p,i,a,n,g),x}J.unmountComponentAtNode(n)}var y=r(n),h=y&&!!s(y),b=c(n),w=h&&!p&&!b,T=J._renderNewRootComponent(i,n,w,a)._renderedComponent.getPublicInstance();return o&&o.call(T),T},render:function(t,e,n){return J._renderSubtreeIntoContainer(null,t,e,n)},unmountComponentAtNode:function(t){!t||t.nodeType!==A&&t.nodeType!==P&&t.nodeType!==N?u("40"):void 0;var e=l(t);if(!e){c(t),1===t.nodeType&&t.hasAttribute(M);return!1}return delete I[e._instance.rootID],E.batchedUpdates(d,e,t,!1),!0},_mountImageIntoNode:function(t,e,n,s,a){if(!e||e.nodeType!==A&&e.nodeType!==P&&e.nodeType!==N?u("41"):void 0,s){var i=r(e);if(w.canReuseMarkup(t,i))return void g.precacheNode(n,i);var d=i.getAttribute(w.CHECKSUM_ATTR_NAME);i.removeAttribute(w.CHECKSUM_ATTR_NAME);var c=i.outerHTML;i.setAttribute(w.CHECKSUM_ATTR_NAME,d);var p=t,l=o(p,c),k=" (client) "+p.substring(l-20,l+20)+"\n (server) "+c.substring(l-20,l+20);e.nodeType===P?u("42",k):void 0}if(e.nodeType===P?u("43"):void 0,a.useCreateElement){for(;e.lastChild;)e.removeChild(e.lastChild);f.insertTreeBefore(e,t,null)}else S(e,t),g.precacheNode(n,e.firstChild)}};t.exports=J},function(t,e,n){"use strict";var o=n(25),r=o({INSERT_MARKUP:null,MOVE_EXISTING:null,REMOVE_NODE:null,SET_MARKUP:null,TEXT_CONTENT:null});t.exports=r},function(t,e,n){"use strict";var o=n(2),r=n(9),s=(n(1),{HOST:0,COMPOSITE:1,EMPTY:2,getType:function(t){return null===t||t===!1?s.EMPTY:r.isValidElement(t)?"function"==typeof t.type?s.COMPOSITE:s.HOST:void o("26",t)}});t.exports=s},function(t,e,n){"use strict";function o(t,e){return t===e?0!==t||1/t===1/e:t!==t&&e!==e}function r(t){function e(e,n,o,r,s,a,i){r=r||E,a=a||o;if(null==n[o]){var d=v[s];return e?new Error("Required "+d+" `"+a+"` was not specified in "+("`"+r+"`.")):null}return t(n,o,r,s,a)}var n=e.bind(null,!1);return n.isRequired=e.bind(null,!0),n}function s(t){function e(e,n,o,r,s,a){var i=e[n],d=y(i);if(d!==t){var c=v[r],p=h(i);return new Error("Invalid "+c+" `"+s+"` of type "+("`"+p+"` supplied to `"+o+"`, expected ")+("`"+t+"`."))}return null}return r(e)}function a(){return r(T.thatReturns(null))}function i(t){function e(e,n,o,r,s){if("function"!=typeof t)return new Error("Property `"+s+"` of component `"+o+"` has invalid PropType notation inside arrayOf.");var a=e[n];if(!Array.isArray(a)){var i=v[r],d=y(a);return new Error("Invalid "+i+" `"+s+"` of type "+("`"+d+"` supplied to `"+o+"`, expected an array."))}for(var c=0;c<a.length;c++){var p=t(a,c,o,r,s+"["+c+"]",w);
if(p instanceof Error)return p}return null}return r(e)}function d(){function t(t,e,n,o,r){var s=t[e];if(!b.isValidElement(s)){var a=v[o],i=y(s);return new Error("Invalid "+a+" `"+r+"` of type "+("`"+i+"` supplied to `"+n+"`, expected a single ReactElement."))}return null}return r(t)}function c(t){function e(e,n,o,r,s){if(!(e[n]instanceof t)){var a=v[r],i=t.name||E,d=m(e[n]);return new Error("Invalid "+a+" `"+s+"` of type "+("`"+d+"` supplied to `"+o+"`, expected ")+("instance of `"+i+"`."))}return null}return r(e)}function p(t){function e(e,n,r,s,a){for(var i=e[n],d=0;d<t.length;d++)if(o(i,t[d]))return null;var c=v[s],p=JSON.stringify(t);return new Error("Invalid "+c+" `"+a+"` of value `"+i+"` "+("supplied to `"+r+"`, expected one of "+p+"."))}return Array.isArray(t)?r(e):T.thatReturnsNull}function l(t){function e(e,n,o,r,s){if("function"!=typeof t)return new Error("Property `"+s+"` of component `"+o+"` has invalid PropType notation inside objectOf.");var a=e[n],i=y(a);if("object"!==i){var d=v[r];return new Error("Invalid "+d+" `"+s+"` of type "+("`"+i+"` supplied to `"+o+"`, expected an object."))}for(var c in a)if(a.hasOwnProperty(c)){var p=t(a,c,o,r,s+"."+c,w);if(p instanceof Error)return p}return null}return r(e)}function u(t){function e(e,n,o,r,s){for(var a=0;a<t.length;a++){var i=t[a];if(null==i(e,n,o,r,s,w))return null}var d=v[r];return new Error("Invalid "+d+" `"+s+"` supplied to "+("`"+o+"`."))}return Array.isArray(t)?r(e):T.thatReturnsNull}function f(){function t(t,e,n,o,r){if(!x(t[e])){var s=v[o];return new Error("Invalid "+s+" `"+r+"` supplied to "+("`"+n+"`, expected a ReactNode."))}return null}return r(t)}function k(t){function e(e,n,o,r,s){var a=e[n],i=y(a);if("object"!==i){var d=v[r];return new Error("Invalid "+d+" `"+s+"` of type `"+i+"` "+("supplied to `"+o+"`, expected `object`."))}for(var c in t){var p=t[c];if(p){var l=p(a,c,o,r,s+"."+c,w);if(l)return l}}return null}return r(e)}function x(t){switch(typeof t){case"number":case"string":case"undefined":return!0;case"boolean":return!t;case"object":if(Array.isArray(t))return t.every(x);if(null===t||b.isValidElement(t))return!0;var e=O(t);if(!e)return!1;var n,o=e.call(t);if(e!==t.entries){for(;!(n=o.next()).done;)if(!x(n.value))return!1}else for(;!(n=o.next()).done;){var r=n.value;if(r&&!x(r[1]))return!1}return!0;default:return!1}}function g(t,e){return"symbol"===t||("Symbol"===e["@@toStringTag"]||"function"==typeof Symbol&&e instanceof Symbol)}function y(t){var e=typeof t;return Array.isArray(t)?"array":t instanceof RegExp?"object":g(e,t)?"symbol":e}function h(t){var e=y(t);if("object"===e){if(t instanceof Date)return"date";if(t instanceof RegExp)return"regexp"}return e}function m(t){return t.constructor&&t.constructor.name?t.constructor.name:E}var b=n(9),v=n(44),w=n(46),T=n(8),O=n(82),E=(n(3),"<<anonymous>>"),_={array:s("array"),bool:s("boolean"),func:s("function"),number:s("number"),object:s("object"),string:s("string"),symbol:s("symbol"),any:a(),arrayOf:i,element:d(),instanceOf:c,node:f(),objectOf:l,oneOf:p,oneOfType:u,shape:k};t.exports=_},function(t,e){"use strict";t.exports="15.3.0"},function(t,e){"use strict";var n={currentScrollLeft:0,currentScrollTop:0,refreshScrollValues:function(t){n.currentScrollLeft=t.x,n.currentScrollTop=t.y}};t.exports=n},function(t,e,n){"use strict";function o(t,e){return null==e?r("30"):void 0,null==t?e:Array.isArray(t)?Array.isArray(e)?(t.push.apply(t,e),t):(t.push(e),t):Array.isArray(e)?[t].concat(e):[t,e]}var r=n(2);n(1);t.exports=o},function(t,e,n){"use strict";var o=!1;t.exports=o},function(t,e){"use strict";function n(t,e,n){Array.isArray(t)?t.forEach(e,n):t&&e.call(n,t)}t.exports=n},function(t,e,n){"use strict";function o(t){for(var e;(e=t._renderedNodeType)===r.COMPOSITE;)t=t._renderedComponent;return e===r.HOST?t._renderedComponent:e===r.EMPTY?null:void 0}var r=n(74);t.exports=o},function(t,e){"use strict";function n(t){var e=t&&(o&&t[o]||t[r]);if("function"==typeof e)return e}var o="function"==typeof Symbol&&Symbol.iterator,r="@@iterator";t.exports=n},function(t,e,n){"use strict";function o(){return!s&&r.canUseDOM&&(s="textContent"in document.documentElement?"textContent":"innerText"),s}var r=n(6),s=null;t.exports=o},function(t,e,n){"use strict";function o(t){if(t){var e=t.getName();if(e)return" Check the render method of `"+e+"`."}return""}function r(t){return"function"==typeof t&&"undefined"!=typeof t.prototype&&"function"==typeof t.prototype.mountComponent&&"function"==typeof t.prototype.receiveComponent}function s(t,e){var n;if(null===t||t===!1)n=c.create(s);else if("object"==typeof t){var i=t;!i||"function"!=typeof i.type&&"string"!=typeof i.type?a("130",null==i.type?i.type:typeof i.type,o(i._owner)):void 0,"string"==typeof i.type?n=p.createInternalComponent(i):r(i.type)?(n=new i.type(i),n.getHostNode||(n.getHostNode=n.getNativeNode)):n=new l(i)}else"string"==typeof t||"number"==typeof t?n=p.createInstanceForText(t):a("131",typeof t);n._mountIndex=0,n._mountImage=null;return n}var a=n(2),i=n(4),d=n(123),c=n(68),p=n(70),l=(n(7),n(1),n(3),function(t){this.construct(t)});i(l.prototype,d.Mixin,{_instantiateReactComponent:s});t.exports=s},function(t,e){"use strict";function n(t){var e=t&&t.nodeName&&t.nodeName.toLowerCase();return"input"===e?!!o[t.type]:"textarea"===e}var o={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};t.exports=n},function(t,e,n){"use strict";var o=n(6),r=n(29),s=n(30),a=function(t,e){if(e){var n=t.firstChild;if(n&&n===t.lastChild&&3===n.nodeType)return void(n.nodeValue=e)}t.textContent=e};o.canUseDOM&&("textContent"in document.documentElement||(a=function(t,e){s(t,r(e))})),t.exports=a},function(t,e,n){"use strict";t.exports=n(121)},function(t,e){"use strict";function n(t){return t.replace(o,function(t,e){return e.toUpperCase()})}var o=/-(.)/g;t.exports=n},function(t,e,n){"use strict";function o(t){return r(t.replace(s,"ms-"))}var r=n(88),s=/^-ms-/;t.exports=o},function(t,e,n){"use strict";function o(t,e){return!(!t||!e)&&(t===e||!r(t)&&(r(e)?o(t,e.parentNode):"contains"in t?t.contains(e):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(e))))}var r=n(98);t.exports=o},function(t,e,n){"use strict";function o(t){var e=t.length;if(Array.isArray(t)||"object"!=typeof t&&"function"!=typeof t?a(!1):void 0,"number"!=typeof e?a(!1):void 0,0===e||e-1 in t?void 0:a(!1),"function"==typeof t.callee?a(!1):void 0,t.hasOwnProperty)try{return Array.prototype.slice.call(t)}catch(n){}for(var o=Array(e),r=0;r<e;r++)o[r]=t[r];return o}function r(t){return!!t&&("object"==typeof t||"function"==typeof t)&&"length"in t&&!("setInterval"in t)&&"number"!=typeof t.nodeType&&(Array.isArray(t)||"callee"in t||"item"in t)}function s(t){return r(t)?Array.isArray(t)?t.slice():o(t):[t]}var a=n(1);t.exports=s},function(t,e,n){"use strict";function o(t){var e=t.match(p);return e&&e[1].toLowerCase()}function r(t,e){var n=c;c?void 0:d(!1);var r=o(t),s=r&&i(r);if(s){n.innerHTML=s[1]+t+s[2];for(var p=s[0];p--;)n=n.lastChild}else n.innerHTML=t;var l=n.getElementsByTagName("script");l.length&&(e?void 0:d(!1),a(l).forEach(e));for(var u=Array.from(n.childNodes);n.lastChild;)n.removeChild(n.lastChild);return u}var s=n(6),a=n(91),i=n(93),d=n(1),c=s.canUseDOM?document.createElement("div"):null,p=/^\s*<(\w+)/;t.exports=r},function(t,e,n){"use strict";function o(t){return a?void 0:s(!1),u.hasOwnProperty(t)||(t="*"),i.hasOwnProperty(t)||("*"===t?a.innerHTML="<link />":a.innerHTML="<"+t+"></"+t+">",i[t]=!a.firstChild),i[t]?u[t]:null}var r=n(6),s=n(1),a=r.canUseDOM?document.createElement("div"):null,i={},d=[1,'<select multiple="true">',"</select>"],c=[1,"<table>","</table>"],p=[3,"<table><tbody><tr>","</tr></tbody></table>"],l=[1,'<svg xmlns="http://www.w3.org/2000/svg">',"</svg>"],u={"*":[1,"?<div>","</div>"],area:[1,"<map>","</map>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],legend:[1,"<fieldset>","</fieldset>"],param:[1,"<object>","</object>"],tr:[2,"<table><tbody>","</tbody></table>"],optgroup:d,option:d,caption:c,colgroup:c,tbody:c,tfoot:c,thead:c,td:p,th:p},f=["circle","clipPath","defs","ellipse","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","text","tspan"];f.forEach(function(t){u[t]=l,i[t]=!0}),t.exports=o},function(t,e){"use strict";function n(t){return t===window?{x:window.pageXOffset||document.documentElement.scrollLeft,y:window.pageYOffset||document.documentElement.scrollTop}:{x:t.scrollLeft,y:t.scrollTop}}t.exports=n},function(t,e){"use strict";function n(t){return t.replace(o,"-$1").toLowerCase()}var o=/([A-Z])/g;t.exports=n},function(t,e,n){"use strict";function o(t){return r(t).replace(s,"-ms-")}var r=n(95),s=/^ms-/;t.exports=o},function(t,e){"use strict";function n(t){return!(!t||!("function"==typeof Node?t instanceof Node:"object"==typeof t&&"number"==typeof t.nodeType&&"string"==typeof t.nodeName))}t.exports=n},function(t,e,n){"use strict";function o(t){return r(t)&&3==t.nodeType}var r=n(97);t.exports=o},function(t,e){"use strict";function n(t,e,n){if(!t)return null;var r={};for(var s in t)o.call(t,s)&&(r[s]=e.call(n,t[s],s,t));return r}var o=Object.prototype.hasOwnProperty;t.exports=n},function(t,e){"use strict";function n(t){var e={};return function(n){return e.hasOwnProperty(n)||(e[n]=t.call(this,n)),e[n]}}t.exports=n},function(t,e,n){"use strict";t.exports=n(124)},function(t,e,n){"undefined"==typeof Promise&&(n(110).enable(),window.Promise=n(109)),n(111)},function(t,e){(function(e){"use strict";function n(t){i.length||(a(),d=!0),i[i.length]=t}function o(){for(;c<i.length;){var t=c;if(c+=1,i[t].call(),c>p){for(var e=0,n=i.length-c;e<n;e++)i[e]=i[e+c];i.length-=c,c=0}}i.length=0,c=0,d=!1}function r(t){var e=1,n=new l(t),o=document.createTextNode("");return n.observe(o,{characterData:!0}),function(){e=-e,o.data=e}}function s(t){return function(){function e(){clearTimeout(n),clearInterval(o),t()}var n=setTimeout(e,0),o=setInterval(e,50)}}t.exports=n;var a,i=[],d=!1,c=0,p=1024,l=e.MutationObserver||e.WebKitMutationObserver;a="function"==typeof l?r(o):s(o),n.requestFlush=a,n.makeRequestCallFromTimer=s}).call(e,function(){return this}())},function(t,e,n){"use strict";function o(t){return t&&t.__esModule?t:{default:t}}function r(t,e){var n={};for(var o in t)e.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=t[o]);return n}function s(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function a(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function i(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0});var d=function(){function t(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(e,n,o){return n&&t(e.prototype,n),o&&t(e,o),e}}(),c=n(87),p=o(c);n(106);var l=n(108),u=Object.keys(l),f=p.default.createElement("h3",null,"Data"),k=p.default.createElement("h3",null,"Input"),x=p.default.createElement("h3",null,"Output"),g=p.default.createElement("summary",null,"Scripts"),y=p.default.createElement("h2",null,"Slate Transform Explorer"),h=p.default.createElement("p",null,"Select Fixture on the left sidebar"),m=function(t){function e(){var t,n,o,i;s(this,e);for(var d=arguments.length,c=Array(d),l=0;l<d;l++)c[l]=arguments[l];return n=o=a(this,(t=Object.getPrototypeOf(e)).call.apply(t,[this].concat(c))),o.state={fixture:null},o.onFixtureChange=function(t){o.setState({fixture:t})},o.renderData=function(t,e,n){return p.default.createElement("div",{key:t,className:n},p.default.createElement("h3",null,t),p.default.createElement("pre",null,JSON.stringify(e,null,2)))},o.renderFixture=function(t){var e=Object.keys(t);return p.default.createElement("div",null,e.map(function(e){var n=t[e],s=n.input,a=n.output,i=n.index,d=r(n,["input","output","index"]),c=Object.keys(d);return p.default.createElement("div",{key:e,className:"row"},p.default.createElement("h2",{className:"col-sm-12"},e),c.length>0&&p.default.createElement("div",{className:"col-sm-12"},f,c.map(function(t){return o.renderData(t,d[t])})),p.default.createElement("div",{className:"col-sm-6"},k,p.default.createElement("pre",null,JSON.stringify(s,null,2))),p.default.createElement("div",{className:"col-sm-6"},x,p.default.createElement("pre",null,JSON.stringify(a,null,2))),p.default.createElement("div",{className:"col-sm-12"},p.default.createElement("details",null,g,p.default.createElement("pre",null,i))))}))},i=n,a(o,i)}return i(e,t),d(e,[{key:"render",value:function(){var t=this;return p.default.createElement("div",{className:"App"},y,p.default.createElement("div",{className:"row"},p.default.createElement("ul",{className:"col-sm-3"},u.sort().map(function(e){return p.default.createElement("li",{key:e,onClick:function(){return t.onFixtureChange(e)}},e)})),p.default.createElement("div",{className:"col-sm-9"},!this.state.fixture&&h,this.state.fixture&&p.default.createElement("div",null,p.default.createElement("h1",null,this.state.fixture),this.renderFixture(l[this.state.fixture])))))}}]),e}(c.Component);e.default=m},function(t,e,n){"use strict";function o(t){return t&&t.__esModule?t:{default:t}}var r=n(87),s=o(r),a=n(101),i=o(a),d=n(104),c=o(d);n(107),i.default.render(s.default.createElement(c.default,null),document.getElementById("root"))},function(t,e){},106,function(t,e){t.exports={"wrap-text-at-range":{"start-of-block":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"[[wo]]rd"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .wrapTextAtRange(range, '[[', ']]')\n    .apply()\n}\n"},"end-of-block":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"wo[[rd]]"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: first.key,\n    focusOffset: 4\n  })\n\n  return state\n    .transform()\n    .wrapTextAtRange(range, '[[', ']]')\n    .apply()\n}\n"},"across-inlines":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]},{kind:"inline",type:"link",nodes:[{kind:"text",text:"another"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"wo[[rd"}]},{kind:"inline",type:"link",nodes:[{kind:"text",text:"an]]other"}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const last = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: last.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .wrapTextAtRange(range, '[[', ']]')\n    .apply()\n}\n"},"empty-block":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:""}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"[[]]"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  return state\n    .transform()\n    .wrapTextAtRange(range, '[[', ']]')\n    .apply()\n}\n"},"backwards-selection":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"w[[or]]d"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 3,\n    focusKey: first.key,\n    focusOffset: 1,\n    isBackward: true\n  })\n\n  return state\n    .transform()\n    .wrapTextAtRange(range, '[[', ']]')\n    .apply()\n}\n"},"middle-of-block":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"w[[or]]d"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 1,\n    focusKey: first.key,\n    focusOffset: 3\n  })\n\n  return state\n    .transform()\n    .wrapTextAtRange(range, '[[', ']]')\n    .apply()\n}\n"},"across-blocks":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"wo[[rd"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"an]]other"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const last = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: last.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .wrapTextAtRange(range, '[[', ']]')\n    .apply()\n}\n"},"without-suffix":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"w**or**d"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 1,\n    focusKey: first.key,\n    focusOffset: 3\n  })\n\n  return state\n    .transform()\n    .wrapTextAtRange(range, '**')\n    .apply()\n}\n"},"whole-block":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"[[word]]"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 4\n  })\n\n  return state\n    .transform()\n    .wrapTextAtRange(range, '[[', ']]')\n    .apply()\n}\n"}},"insert-text":{"inside-void":{input:{nodes:[{kind:"block",type:"image",isVoid:!0}]},output:{nodes:[{kind:"block",type:"image",isVoid:!0}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .insertText('a')\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.toJS()\n  )\n\n  return next\n}\n"},"first-space":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:" word"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .insertText(' ')\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.moveForward().toJS()\n  )\n\n  return next\n}\n"},"first-character":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"aword"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .insertText('a')\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.moveForward().toJS()\n  )\n\n  return next\n}\n"},"first-words":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"a few words word"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .insertText('a few words ')\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.moveForward(12).toJS()\n  )\n\n  return next\n}\n"},"middle-space":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"w ord"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 1,\n    focusKey: first.key,\n    focusOffset: 1\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .insertText(' ')\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.moveForward().toJS()\n  )\n\n  return next\n}\n"},"last-space":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word "}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: first.length,\n    focusKey: first.key,\n    focusOffset: first.length\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .insertText(' ')\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.moveForward().toJS()\n  )\n\n  return next\n}\n"},"middle-words":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"w a few words ord"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 1,\n    focusKey: first.key,\n    focusOffset: 1\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .insertText(' a few words ')\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.moveForward(13).toJS()\n  )\n\n  return next\n}\n"},"middle-character":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"waord"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 1,\n    focusKey: first.key,\n    focusOffset: 1\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .insertText('a')\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.moveForward().toJS()\n  )\n\n  return next\n}\n"},"last-character":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"worda"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: first.length,\n    focusKey: first.key,\n    focusOffset: first.length\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .insertText('a')\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.moveForward().toJS()\n  )\n\n  return next\n}\n"},"last-words":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word a few words"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: first.length,\n    focusKey: first.key,\n    focusOffset: first.length\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .insertText(' a few words')\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.moveForward(12).toJS()\n  )\n\n  return next\n}\n"},"during-mark":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"w"},{text:"or",marks:[{type:"bold"}]},{text:"d"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"w"},{text:"oar",marks:[{type:"bold"}]},{text:"d"}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .insertText('a')\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.moveForward().toJS()\n  )\n\n  return next\n}\n"},"before-mark":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"w"},{text:"or",marks:[{type:"bold"}]},{text:"d"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"wa"},{text:"or",marks:[{type:"bold"}]},{text:"d"}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 1,\n    focusKey: first.key,\n    focusOffset: 1\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .insertText('a')\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.moveForward().toJS()\n  )\n\n  return next\n}\n"},"after-mark":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"w"},{text:"or",marks:[{type:"bold"}]},{text:"d"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"w"},{text:"ora",marks:[{type:"bold"}]},{text:"d"}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 3,\n    focusKey: first.key,\n    focusOffset: 3\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .insertText('a')\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.moveForward().toJS()\n  )\n\n  return next\n}\n"},"with-marks":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"word"},{text:"a",marks:[{type:"bold"}]}]}]}]},index:"\nimport { Mark } from '../../../../..'\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: first.length,\n    focusKey: first.key,\n    focusOffset: first.length\n  })\n\n  const marks = Mark.createSet([\n    Mark.create({\n      type: 'bold'\n    })\n  ])\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .insertText('a', marks)\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.moveForward().toJS()\n  )\n\n  return next\n}\n"}},"set-block":{"single-block":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"code",nodes:[{kind:"text",text:"word"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .setBlock({ type: 'code' })\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.toJS()\n  )\n\n  return next\n}\n"},"across-inlines":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"another"}]}]}]},output:{nodes:[{kind:"block",type:"code",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]},{kind:"block",type:"code",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"another"}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const second = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: second.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .setBlock({ type: 'code' })\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.toJS()\n  )\n\n  return next\n}\n"},"data-only":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",data:{key:"value"},nodes:[{kind:"text",text:"word"}]}]},index:"\nimport { Data } from '../../../../..'\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .setBlock({ data: Data.create({ key: 'value' }) })\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.toJS()\n  )\n\n  return next\n}\n"
},"with-is-void":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"image",isVoid:!0}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .setBlock({\n      type: 'image',\n      isVoid: true\n    })\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.toJS()\n  )\n\n  return next\n}\n"},"with-data":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"code",data:{key:"value"},nodes:[{kind:"text",text:"word"}]}]},index:"\nimport { Data } from '../../../../..'\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .setBlock({\n      type: 'code',\n      data: Data.create({ key: 'value' })\n    })\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.toJS()\n  )\n\n  return next\n}\n"},"single-block-string-shorthand":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"code",nodes:[{kind:"text",text:"word"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .setBlock('code')\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.toJS()\n  )\n\n  return next\n}\n"},"across-blocks":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]},output:{nodes:[{kind:"block",type:"code",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"code",nodes:[{kind:"text",text:"another"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const second = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: second.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .setBlock({ type: 'code' })\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.toJS()\n  )\n\n  return next\n}\n"},"nested-block":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"block",type:"code",nodes:[{kind:"text",text:"word"}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .setBlock({ type: 'code' })\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.toJS()\n  )\n\n  return next\n}\n"},"with-data-object":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"code",data:{key:"value"},nodes:[{kind:"text",text:"word"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .setBlock({\n      type: 'code',\n      data: { key: 'value' }\n    })\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.toJS()\n  )\n\n  return next\n}\n"}},"delete-forward":{"before-inline-sibling":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"one"},{kind:"inline",type:"link",nodes:[{kind:"text",text:"two"}]},{kind:"text",text:"a"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"one"},{kind:"inline",type:"link",nodes:[{kind:"text",text:"two"}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const last = texts.last()\n  const range = selection.merge({\n    anchorKey: last.key,\n    anchorOffset: 0,\n    focusKey: last.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .deleteForward()\n    .apply()\n\n  const updated = next.document.getTexts().last()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.collapseToEndOf(updated).toJS()\n  )\n\n  return next\n}\n"},"end-of-document":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: first.length,\n    focusKey: first.key,\n    focusOffset: first.length\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .deleteForward()\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.collapseToStart().toJS()\n  )\n\n  return next\n}\n"},"first-character":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"ord"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .deleteForward()\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.collapseToStart().toJS()\n  )\n\n  return next\n}\n"},"inside-inline-sibling":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"one"},{kind:"inline",type:"link",nodes:[{kind:"text",text:"a"}]},{kind:"text",text:"two"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"onetwo"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.get(0)\n  const second = texts.get(1)\n  const range = selection.merge({\n    anchorKey: second.key,\n    anchorOffset: 0,\n    focusKey: second.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .deleteForward()\n    .apply()\n\n  const updated = next.document.getTexts().first()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.collapseToStartOf(updated).moveForward(first.length).toJS()\n  )\n\n  return next\n}\n"},"join-blocks":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"wordanother"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: first.length,\n    focusKey: first.key,\n    focusOffset: first.length\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .deleteForward()\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.collapseToStart().toJS()\n  )\n\n  return next\n}\n"},"join-nested-blocks":{input:{nodes:[{kind:"block",type:"quote",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]}]},output:{nodes:[{kind:"block",type:"quote",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"wordanother"}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: first.length,\n    focusKey: first.key,\n    focusOffset: first.length\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .deleteForward()\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.collapseToStart().toJS()\n  )\n\n  return next\n}\n"},"last-character":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"wor"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: first.length - 1,\n    focusKey: first.key,\n    focusOffset: first.length - 1\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .deleteForward()\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.collapseToStart().toJS()\n  )\n\n  return next\n}\n"},"middle-character":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"wrd"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 1,\n    focusKey: first.key,\n    focusOffset: 1\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .deleteForward()\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.collapseToStart().toJS()\n  )\n\n  return next\n}\n"}},"unwrap-block":{"across-blocks":{input:{nodes:[{kind:"block",type:"quote",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const second = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: second.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .unwrapBlock('quote')\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.toJS()\n  )\n\n  return next\n}\n"},"across-inlines":{input:{nodes:[{kind:"block",type:"quote",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"another"}]}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"another"}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const second = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: second.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .unwrapBlock('quote')\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.toJS()\n  )\n\n  return next\n}\n"},"ending-child-blocks":{input:{nodes:[{kind:"block",type:"quote",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"one"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"two"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"three"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"four"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"five"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"six"}]}]}]},output:{nodes:[{kind:"block",type:"quote",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"one"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"two"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"three"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"four"}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"five"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"six"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const fifth = texts.get(4)\n  const sixth = texts.get(5)\n  const range = selection.merge({\n    anchorKey: fifth.key,\n    anchorOffset: 0,\n    focusKey: sixth.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .unwrapBlock('quote')\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.toJS()\n  )\n\n  return next\n}\n"},"middle-child-blocks":{input:{nodes:[{kind:"block",type:"quote",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"one"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"two"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"three"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"four"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"five"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"six"}]}]}]},output:{nodes:[{kind:"block",type:"quote",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"one"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"two"}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"three"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"four"}]},{kind:"block",type:"quote",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"five"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"six"}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const third = texts.get(2)\n  const fourth = texts.get(3)\n  const range = selection.merge({\n    anchorKey: third.key,\n    anchorOffset: 0,\n    focusKey: fourth.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .unwrapBlock('quote')\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.toJS()\n  )\n\n  return next\n}\n"},"nested-block":{input:{nodes:[{kind:"block",type:"quote",nodes:[{kind:"block",type:"quote",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]}]}]},output:{nodes:[{kind:"block",type:"quote",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .unwrapBlock('quote')\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.toJS()\n  )\n\n  return next\n}\n"},"single-block":{input:{nodes:[{kind:"block",type:"quote",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .unwrapBlock('quote')\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.toJS()\n  )\n\n  return next\n}\n"},"starting-child-blocks":{input:{nodes:[{kind:"block",type:"quote",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"one"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"two"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"three"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"four"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"five"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"six"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"one"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"two"}]},{kind:"block",type:"quote",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"three"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"four"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"five"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"six"}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.get(0)\n  const second = texts.get(1)\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: second.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .unwrapBlock('quote')\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.toJS()\n  )\n\n  return next\n}\n"},"with-object":{input:{nodes:[{kind:"block",type:"quote",data:{key:"value"},nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .unwrapBlock({\n      type: 'quote',\n      data: { key: 'value' }\n    })\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.toJS()\n  )\n\n  return next\n}\n"}},"insert-inline-at-range":{"block-end":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"},{kind:"inline",type:"hashtag",isVoid:!0}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: first.length,\n    focusKey: first.key,\n    focusOffset: first.length\n  })\n\n  return state\n    .transform()\n    .insertInlineAtRange(range, {\n      type: 'hashtag',\n      isVoid: true\n    })\n    .apply()\n}\n"},"block-middle":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"wo"},{kind:"inline",type:"hashtag",isVoid:!0},{kind:"text",text:"rd"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .insertInlineAtRange(range, {\n      type: 'hashtag',\n      isVoid: true\n    })\n    .apply()\n}\n"},"block-start":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"hashtag",isVoid:!0},{kind:"text",text:"word"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  return state\n    .transform()\n    .insertInlineAtRange(range, {\n      type: 'hashtag',\n      isVoid: true\n    })\n    .apply()\n}\n"},"inside-inline":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"wo"},{kind:"inline",type:"image",isVoid:!0},{kind:"text",text:"rd"}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .insertInlineAtRange(range, {\n      type: 'image',\n      isVoid: true\n    })\n    .apply()\n}\n"},"is-empty":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:""}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"hashtag",isVoid:!0}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  return state\n    .transform()\n    .insertInlineAtRange(range, {\n      type: 'hashtag',\n      isVoid: true\n    })\n    .apply()\n}\n"},"is-void":{input:{nodes:[{kind:"block",type:"image",isVoid:!0}]},output:{nodes:[{kind:"block",type:"image",isVoid:!0}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  return state\n    .transform()\n    .insertInlineAtRange(range, {\n      type: 'hashtag',\n      isVoid: true\n    })\n    .apply()\n}\n"},"with-inline":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"image",isVoid:!0},{kind:"text",text:"word"}]}]},index:"\nimport { Inline } from '../../../../..'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  return state\n    .transform()\n    .insertInlineAtRange(range, Inline.create({\n      type: 'image',\n      isVoid: true\n    }))\n    .apply()\n}\n"}},"unwrap-inline":{"across-blocks":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"wo"},{kind:"inline",type:"hashtag",nodes:[{kind:"text",text:"rd"}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"hashtag",nodes:[{kind:"text",text:"an"}]},{kind:"text",text:"other"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const second = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: second.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .unwrapInline('hashtag')\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.toJS()\n  )\n\n  return next\n}\n"},"across-inlines":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"wo"}]},{kind:"inline",type:"hashtag",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"rd"}]}]},{kind:"inline",type:"hashtag",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"an"}]}]},{kind:"inline",type:"link",nodes:[{kind:"text",text:"other"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"wo"}]},{kind:"inline",type:"link",nodes:[{kind:"text",text:"rd"}]},{kind:"inline",type:"link",nodes:[{kind:"text",text:"an"}]},{kind:"inline",type:"link",nodes:[{kind:"text",text:"other"}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const second = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: second.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .unwrapInline('hashtag')\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.toJS()\n  )\n\n  return next\n}\n"},"nested-block":{input:{nodes:[{kind:"block",type:"quote",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"w"},{kind:"inline",type:"hashtag",nodes:[{kind:"text",text:"or"}]},{kind:"text",text:"d"}]}]}]},output:{nodes:[{kind:"block",type:"quote",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 1,\n    focusKey: first.key,\n    focusOffset: 3\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .unwrapInline('hashtag')\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.toJS()\n  )\n\n  return next\n}\n"},"single-block":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"w"},{kind:"inline",type:"hashtag",nodes:[{kind:"text",text:"or"}]},{kind:"text",text:"d"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 1,\n    focusKey: first.key,\n    focusOffset: 3\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .unwrapInline('hashtag')\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.toJS()\n  )\n\n  return next\n}\n"},"with-object":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"w"},{kind:"inline",type:"hashtag",data:{key:"one"},nodes:[{kind:"inline",type:"hashtag",data:{key:"two"},nodes:[{kind:"text",text:"or"}]}]},{kind:"text",text:"d"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"w"},{kind:"inline",type:"hashtag",data:{key:"two"},nodes:[{kind:"text",text:"or"}]},{kind:"text",text:"d"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 1,\n    focusKey: first.key,\n    focusOffset: 3\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .unwrapInline({\n      type: 'hashtag',\n      data: { key: 'one' }\n    })\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.toJS()\n  )\n\n  return next\n}\n"}},"set-inline":{"across-inlines":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"another"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"code",nodes:[{kind:"text",text:"word"}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"code",nodes:[{kind:"text",text:"another"}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const second = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: second.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .setInline({ type: 'code' })\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.toJS()\n  )\n\n  return next\n}\n"},"data-only":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",data:{key:"value"},nodes:[{kind:"text",text:"word"}]}]}]},index:"\nimport { Data } from '../../../../..'\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .setInline({ data: Data.create({ key: 'value' }) })\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.toJS()\n  )\n\n  return next\n}\n"},"nested-inline":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"hashtag",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"hashtag",nodes:[{kind:"inline",type:"code",nodes:[{kind:"text",text:"word"}]}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .setInline({ type: 'code' })\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.toJS()\n  )\n\n  return next\n}\n"
},"single-inline-string-shorthand":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"code",nodes:[{kind:"text",text:"word"}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .setInline('code')\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.toJS()\n  )\n\n  return next\n}\n"},"single-inline":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"code",nodes:[{kind:"text",text:"word"}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .setInline({ type: 'code' })\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.toJS()\n  )\n\n  return next\n}\n"},"with-data-object":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"code",data:{key:"value"},nodes:[{kind:"text",text:"word"}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .setInline({\n      type: 'code',\n      data: { key: 'value' }\n    })\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.toJS()\n  )\n\n  return next\n}\n"},"with-data":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"code",data:{key:"value"},nodes:[{kind:"text",text:"word"}]}]}]},index:"\nimport { Data } from '../../../../..'\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .setInline({\n      type: 'code',\n      data: Data.create({ key: 'value' })\n    })\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.toJS()\n  )\n\n  return next\n}\n"},"with-is-void":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"emoji",isVoid:!0}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .setInline({\n      type: 'emoji',\n      isVoid: true\n    })\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.toJS()\n  )\n\n  return next\n}\n"}},"insert-fragment":{"start-block":{fragment:{nodes:[{kind:"block",type:"list-item",nodes:[{kind:"text",text:"fragment"}]}]},input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"fragmentword"}]}]},index:"\nimport assert from 'assert'\nimport path from 'path'\nimport readMetadata from 'read-metadata'\nimport { Raw } from '../../../../..'\n\nexport default function (state) {\n  const file = path.resolve(__dirname, 'fragment.yaml')\n  const raw = readMetadata.sync(file)\n  const fragment = Raw.deserialize(raw, { terse: true }).document\n\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const last = fragment.getTexts().last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .insertFragment(fragment)\n    .apply()\n\n  const updated = next.document.getTexts().first()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.merge({\n      anchorKey: updated.key,\n      anchorOffset: last.length,\n      focusKey: updated.key,\n      focusOffset: last.length\n    }).toJS()\n  )\n\n  return next\n}\n"},"start-inline":{fragment:{nodes:[{kind:"block",type:"list-item",nodes:[{kind:"text",text:"fragment"}]}]},input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"fragment"},{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]}]},index:"\nimport assert from 'assert'\nimport path from 'path'\nimport readMetadata from 'read-metadata'\nimport { Raw } from '../../../../..'\n\nexport default function (state) {\n  const file = path.resolve(__dirname, 'fragment.yaml')\n  const raw = readMetadata.sync(file)\n  const fragment = Raw.deserialize(raw, { terse: true }).document\n\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const last = fragment.getTexts().last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .insertFragment(fragment)\n    .apply()\n\n  const updated = next.document.getTexts().first()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.merge({\n      anchorKey: updated.key,\n      anchorOffset: last.length,\n      focusKey: updated.key,\n      focusOffset: last.length\n    }).toJS()\n  )\n\n  return next\n}\n"},"fragment-multiple-blocks":{fragment:{nodes:[{kind:"block",type:"list-item",nodes:[{kind:"text",ranges:[{text:"fragment one"}]}]},{kind:"block",type:"list-item",nodes:[{kind:"text",ranges:[{text:"fragment two"}]}]}]},input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"wofragment one"}]},{kind:"block",type:"list-item",nodes:[{kind:"text",text:"fragment tword"}]}]},index:"\nimport assert from 'assert'\nimport path from 'path'\nimport readMetadata from 'read-metadata'\nimport { Raw } from '../../../../..'\n\nexport default function (state) {\n  const file = path.resolve(__dirname, 'fragment.yaml')\n  const raw = readMetadata.sync(file)\n  const fragment = Raw.deserialize(raw, { terse: true }).document\n\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const last = fragment.getTexts().last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .insertFragment(fragment)\n    .apply()\n\n  const updated = next.document.getTexts().last()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.merge({\n      anchorKey: updated.key,\n      anchorOffset: last.length,\n      focusKey: updated.key,\n      focusOffset: last.length\n    }).toJS()\n  )\n\n  return next\n}\n"},"end-inline":{fragment:{nodes:[{kind:"block",type:"list-item",nodes:[{kind:"text",text:"fragment"}]}]},input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]},{kind:"text",text:"fragment"}]}]},index:"\nimport assert from 'assert'\nimport path from 'path'\nimport readMetadata from 'read-metadata'\nimport { Raw } from '../../../../..'\n\nexport default function (state) {\n  const file = path.resolve(__dirname, 'fragment.yaml')\n  const raw = readMetadata.sync(file)\n  const fragment = Raw.deserialize(raw, { terse: true }).document\n\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: first.length,\n    focusKey: first.key,\n    focusOffset: first.length\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .insertFragment(fragment)\n    .apply()\n\n  const last = next.document.getTexts().last()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.merge({\n      anchorKey: last.key,\n      anchorOffset: last.length,\n      focusKey: last.key,\n      focusOffset: last.length\n    }).toJS()\n  )\n\n  return next\n}\n"},"middle-inline":{fragment:{nodes:[{kind:"block",type:"list-item",nodes:[{kind:"text",text:"fragment"}]}]},input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"wo"}]},{kind:"text",text:"fragment"},{kind:"inline",type:"link",nodes:[{kind:"text",text:"rd"}]}]}]},index:"\nimport assert from 'assert'\nimport path from 'path'\nimport readMetadata from 'read-metadata'\nimport { Raw } from '../../../../..'\n\nexport default function (state) {\n  const file = path.resolve(__dirname, 'fragment.yaml')\n  const raw = readMetadata.sync(file)\n  const fragment = Raw.deserialize(raw, { terse: true }).document\n\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const last = fragment.getTexts().last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .insertFragment(fragment)\n    .apply()\n\n  const updated = next.document.getTexts().last()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.merge({\n      anchorKey: updated.key,\n      anchorOffset: last.length,\n      focusKey: updated.key,\n      focusOffset: last.length\n    }).toJS()\n  )\n\n  return next\n}\n"},"middle-block":{fragment:{nodes:[{kind:"block",type:"list-item",nodes:[{kind:"text",text:"fragment"}]}]},input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"wofragmentrd"}]}]},index:"\nimport assert from 'assert'\nimport path from 'path'\nimport readMetadata from 'read-metadata'\nimport { Raw } from '../../../../..'\n\nexport default function (state) {\n  const file = path.resolve(__dirname, 'fragment.yaml')\n  const raw = readMetadata.sync(file)\n  const fragment = Raw.deserialize(raw, { terse: true }).document\n\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const last = fragment.getTexts().last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .insertFragment(fragment)\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.merge({\n      anchorKey: first.key,\n      anchorOffset: range.anchorOffset + last.length,\n      focusKey: first.key,\n      focusOffset: range.focusOffset + last.length\n    }).toJS()\n  )\n\n  return next\n}\n"},"with-delete-across-blocks":{fragment:{nodes:[{kind:"block",type:"list-item",nodes:[{kind:"text",text:"fragment"}]}]},input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"wofragmentother"}]}]},index:"\nimport assert from 'assert'\nimport path from 'path'\nimport readMetadata from 'read-metadata'\nimport { Raw } from '../../../../..'\n\nexport default function (state) {\n  const file = path.resolve(__dirname, 'fragment.yaml')\n  const raw = readMetadata.sync(file)\n  const fragment = Raw.deserialize(raw, { terse: true }).document\n\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const last = texts.last()\n  const fragLast = fragment.getTexts().last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: last.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .insertFragment(fragment)\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.merge({\n      anchorKey: first.key,\n      anchorOffset: range.anchorOffset + fragLast.length,\n      focusKey: first.key,\n      focusOffset: range.focusOffset + fragLast.length\n    }).toJS()\n  )\n\n  return next\n}\n"},"middle-inline-fragment-inline":{fragment:{nodes:[{kind:"block",type:"list-item",nodes:[{kind:"inline",type:"hashtag",nodes:[{kind:"text",text:"fragment"}]}]}]},input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"wo"}]},{kind:"inline",type:"hashtag",nodes:[{kind:"text",text:"fragment"}]},{kind:"inline",type:"link",nodes:[{kind:"text",text:"rd"}]}]}]},index:"\nimport assert from 'assert'\nimport path from 'path'\nimport readMetadata from 'read-metadata'\nimport { Raw } from '../../../../..'\n\nexport default function (state) {\n  const file = path.resolve(__dirname, 'fragment.yaml')\n  const raw = readMetadata.sync(file)\n  const fragment = Raw.deserialize(raw, { terse: true }).document\n\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const last = fragment.getTexts().last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .insertFragment(fragment)\n    .apply()\n\n  const updated = next.document.getTexts().get(1)\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.merge({\n      anchorKey: updated.key,\n      anchorOffset: last.length,\n      focusKey: updated.key,\n      focusOffset: last.length\n    }).toJS()\n  )\n\n  return next\n}\n"},"end-block":{fragment:{nodes:[{kind:"block",type:"list-item",nodes:[{kind:"text",text:"fragment"}]}]},input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"wordfragment"}]}]},index:"\nimport assert from 'assert'\nimport path from 'path'\nimport readMetadata from 'read-metadata'\nimport { Raw } from '../../../../..'\n\nexport default function (state) {\n  const file = path.resolve(__dirname, 'fragment.yaml')\n  const raw = readMetadata.sync(file)\n  const fragment = Raw.deserialize(raw, { terse: true }).document\n\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const last = fragment.getTexts().last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: first.length,\n    focusKey: first.key,\n    focusOffset: first.length\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .insertFragment(fragment)\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.merge({\n      anchorKey: first.key,\n      anchorOffset: first.length + last.length,\n      focusKey: first.key,\n      focusOffset: first.length + last.length\n    }).toJS()\n  )\n\n  return next\n}\n"},"start-second-block":{fragment:{nodes:[{kind:"block",type:"list-item",nodes:[{kind:"text",text:"fragment"}]}]},input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"fragmentanother"}]}]},index:"\nimport assert from 'assert'\nimport path from 'path'\nimport readMetadata from 'read-metadata'\nimport { Raw } from '../../../../..'\n\nexport default function (state) {\n  const file = path.resolve(__dirname, 'fragment.yaml')\n  const raw = readMetadata.sync(file)\n  const fragment = Raw.deserialize(raw, { terse: true }).document\n\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const second = texts.get(1)\n  const last = fragment.getTexts().last()\n  const range = selection.merge({\n    anchorKey: second.key,\n    anchorOffset: 0,\n    focusKey: second.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .insertFragment(fragment)\n    .apply()\n\n  const updated = next.document.getTexts().get(1)\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.merge({\n      anchorKey: updated.key,\n      anchorOffset: last.length,\n      focusKey: updated.key,\n      focusOffset: last.length\n    }).toJS()\n  )\n\n  return next\n}\n"},"fragment-nested-blocks":{fragment:{nodes:[{kind:"block",type:"list",nodes:[{kind:"block",type:"list-item",nodes:[{kind:"text",ranges:[{text:"fragment one"}]}]},{kind:"block",type:"list-item",nodes:[{kind:"text",ranges:[{text:"fragment two"}]}]}]}]},input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"wofragment one"}]},{kind:"block",type:"list",nodes:[{kind:"block",type:"list-item",nodes:[{kind:"text",text:"fragment tword"}]}]}]},index:"\nimport assert from 'assert'\nimport path from 'path'\nimport readMetadata from 'read-metadata'\nimport { Raw } from '../../../../..'\n\nexport default function (state) {\n  const file = path.resolve(__dirname, 'fragment.yaml')\n  const raw = readMetadata.sync(file)\n  const fragment = Raw.deserialize(raw, { terse: true }).document\n\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const last = fragment.getTexts().last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .insertFragment(fragment)\n    .apply()\n\n  const updated = next.document.getTexts().last()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.merge({\n      anchorKey: updated.key,\n      anchorOffset: last.length,\n      focusKey: updated.key,\n      focusOffset: last.length\n    }).toJS()\n  )\n\n  return next\n}\n"}},"split-inline-at-range":{"block-end":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]},{kind:"inline",type:"link",nodes:[{kind:"text",text:""}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: first.length,\n    focusKey: first.key,\n    focusOffset: first.length\n  })\n\n  return state\n    .transform()\n    .splitInlineAtRange(range)\n    .apply()\n}\n"},"block-middle":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"wo"}]},{kind:"inline",type:"link",nodes:[{kind:"text",text:"rd"}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .splitInlineAtRange(range)\n    .apply()\n}\n"},"block-start":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:""}]},{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  return state\n    .transform()\n    .splitInlineAtRange(range)\n    .apply()\n}\n"},depth:{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"wo"}]},{kind:"inline",type:"link",nodes:[{kind:"text",text:"rd"}]}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .splitInlineAtRange(range, 1)\n    .apply()\n}\n"},"with-delete":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"w"}]},{kind:"inline",type:"link",nodes:[{kind:"text",text:"d"}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 1,\n    focusKey: first.key,\n    focusOffset: 3\n  })\n\n  return state\n    .transform()\n    .splitInlineAtRange(range)\n    .apply()\n}\n"},"with-marks":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",ranges:[{text:"word",marks:[{type:"bold"}]}]}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",ranges:[{text:"wo",marks:[{type:"bold"}]}]}]},{kind:"inline",type:"link",nodes:[{kind:"text",ranges:[{text:"rd",marks:[{type:"bold"}]}]}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .splitInlineAtRange(range)\n    .apply()\n}\n"}},"delete-at-range":{"whole-word":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:""}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: first.length\n  })\n\n  return state\n    .transform()\n    .deleteAtRange(range)\n    .apply()\n}\n"},"across-blocks-inlines":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"another"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"wo"}]},{kind:"inline",type:"link",nodes:[{kind:"text",text:"other"}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const last = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: last.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .deleteAtRange(range)\n    .apply()\n}\n"},"join-blocks":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"wordanother"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const second = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: first.length,\n    focusKey: second.key,\n    focusOffset: 0\n  })\n\n  return state\n    .transform()\n    .deleteAtRange(range)\n    .apply()\n}\n"},"first-character":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"ord"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 1\n  })\n\n  return state\n    .transform()\n    .deleteAtRange(range)\n    .apply()\n}\n"},"across-nested-blocks":{input:{nodes:[{kind:"block",type:"list",nodes:[{kind:"block",type:"item",nodes:[{kind:"text",text:"one"}]},{kind:"block",type:"item",nodes:[{kind:"text",text:"two"}]},{kind:"block",type:"item",nodes:[{kind:"text",text:"three"}]}]}]},output:{nodes:[{kind:"block",type:"list",nodes:[{kind:"block",type:"item",nodes:[{kind:"text",text:"onetwo"}]},{kind:"block",type:"item",nodes:[{kind:"text",text:"three"}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.get(0)\n  const second = texts.get(1)\n  const third = texts.get(2)\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: first.length,\n    focusKey: second.key,\n    focusOffset: 0\n  })\n\n  return state\n    .transform()\n    .deleteAtRange(range)\n    .apply()\n}\n"},"middle-character":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"wrd"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 1,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .deleteAtRange(range)\n    .apply()\n}\n"},"last-character":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"wor"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: first.length - 1,\n    focusKey: first.key,\n    focusOffset: first.length\n  })\n\n  return state\n    .transform()\n    .deleteAtRange(range)\n    .apply()\n}\n"},"nested-block":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"middle"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"woother"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const last = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: last.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .deleteAtRange(range)\n    .apply()\n}\n"},"join-blocks-and-trim":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"woother"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const second = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: second.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .deleteAtRange(range)\n    .apply()\n}\n"},"before-inline-sibling":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"one"},{kind:"inline",type:"link",nodes:[{kind:"text",text:"two"}]},{kind:"text",text:"a"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"one"},{kind:"inline",type:"link",nodes:[{kind:"text",text:"two"}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const last = texts.last()\n  const range = selection.merge({\n    anchorKey: last.key,\n    anchorOffset: last.length - 1,\n    focusKey: last.key,\n    focusOffset: last.length\n  })\n\n  return state\n    .transform()\n    .deleteAtRange(range)\n    .apply()\n}\n"},"inside-inline-sibling":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"one"},{kind:"inline",type:"link",nodes:[{kind:"text",text:"a"}]},{kind:"text",text:"two"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"onetwo"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const second = texts.get(1)\n  const range = selection.merge({\n    anchorKey: second.key,\n    anchorOffset: second.length - 1,\n    focusKey: second.key,\n    focusOffset: second.length\n  })\n\n  return state\n    .transform()\n    .deleteAtRange(range)\n    .apply()\n}\n"}},"delete-backward":{"before-inline-sibling":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"one"},{kind:"inline",type:"link",nodes:[{kind:"text",text:"two"}]},{kind:"text",text:"a"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"one"},{kind:"inline",type:"link",nodes:[{kind:"text",text:"two"}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const last = texts.last()\n  const range = selection.merge({\n    anchorKey: last.key,\n    anchorOffset: last.length,\n    focusKey: last.key,\n    focusOffset: last.length\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .deleteBackward()\n    .apply()\n\n  const updated = next.document.getTexts().last()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.collapseToEndOf(updated).toJS()\n  )\n\n  return next\n}\n"
},"first-character":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"ord"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 1,\n    focusKey: first.key,\n    focusOffset: 1\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .deleteBackward()\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.moveBackward().toJS()\n  )\n\n  return next\n}\n"},"inside-inline-sibling":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"one"},{kind:"inline",type:"link",nodes:[{kind:"text",text:"a"}]},{kind:"text",text:"two"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"onetwo"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.get(0)\n  const second = texts.get(1)\n  const range = selection.merge({\n    anchorKey: second.key,\n    anchorOffset: second.length,\n    focusKey: second.key,\n    focusOffset: second.length\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .deleteBackward()\n    .apply()\n\n  const updated = next.document.getTexts().first()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.collapseToStartOf(updated).moveForward(first.length).toJS()\n  )\n\n  return next\n}\n"},"join-blocks":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"wordanother"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const second = texts.last()\n  const range = selection.merge({\n    anchorKey: second.key,\n    anchorOffset: 0,\n    focusKey: second.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .deleteBackward()\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.merge({\n      anchorKey: first.key,\n      anchorOffset: first.length,\n      focusKey: first.key,\n      focusOffset: first.length\n    }).toJS()\n  )\n\n  return next\n}\n"},"join-nested-blocks":{input:{nodes:[{kind:"block",type:"quote",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]}]},output:{nodes:[{kind:"block",type:"quote",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"wordanother"}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const second = texts.last()\n  const range = selection.merge({\n    anchorKey: second.key,\n    anchorOffset: 0,\n    focusKey: second.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .deleteBackward()\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.merge({\n      anchorKey: first.key,\n      anchorOffset: first.length,\n      focusKey: first.key,\n      focusOffset: first.length\n    }).toJS()\n  )\n\n  return next\n}\n"},"last-character":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"wor"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: first.length,\n    focusKey: first.key,\n    focusOffset: first.length\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .deleteBackward()\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.moveBackward().toJS()\n  )\n\n  return next\n}\n"},"middle-character":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"wrd"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .deleteBackward()\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.moveBackward().toJS()\n  )\n\n  return next\n}\n"},"start-of-document":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .deleteBackward()\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.toJS()\n  )\n\n  return next\n}\n"}},"wrap-block-at-range":{"across-blocks":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]},output:{nodes:[{kind:"block",type:"quote",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const second = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: second.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .wrapBlockAtRange(range, 'quote')\n    .apply()\n}\n"},"across-inlines":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"another"}]}]}]},output:{nodes:[{kind:"block",type:"quote",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"another"}]}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const second = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: second.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .wrapBlockAtRange(range, 'quote')\n    .apply()\n}\n"},"nested-block":{input:{nodes:[{kind:"block",type:"quote",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]}]},output:{nodes:[{kind:"block",type:"quote",nodes:[{kind:"block",type:"quote",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  return state\n    .transform()\n    .wrapBlockAtRange(range, 'quote')\n    .apply()\n}\n"},"single-block":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"quote",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  return state\n    .transform()\n    .wrapBlockAtRange(range, 'quote')\n    .apply()\n}\n"},"with-object":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"quote",data:{key:"value"},nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  return state\n    .transform()\n    .wrapBlockAtRange(range, {\n      type: 'quote',\n      data: { key: 'value' }\n    })\n    .apply()\n}\n"}},"toggle-mark":{"remove-with-plain-object":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"w",marks:[{type:"bold",data:{key:"value"}}]},{text:"ord"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 1\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .toggleMark({\n      type: 'bold',\n      data: { key: 'value' }\n    })\n    .apply()\n\n  assert.deepEqual(next.selection.toJS(), range.toJS())\n\n  return next\n}\n"},"add-first-character":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"w",marks:[{type:"bold"}]},{text:"ord"}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 1\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .toggleMark('bold')\n    .apply()\n\n  assert.deepEqual(next.selection.toJS(), range.toJS())\n\n  return next\n}\n"},"remove-with-mark-object":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"w",marks:[{type:"bold",data:{key:"value"}}]},{text:"ord"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},index:"\nimport { Mark } from '../../../../..'\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 1\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .toggleMark(Mark.create({\n      type: 'bold',\n      data: { key: 'value' }\n    }))\n    .apply()\n\n  assert.deepEqual(next.selection.toJS(), range.toJS())\n\n  return next\n}\n"},"remove-first-character":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"w",marks:[{type:"bold"}]},{text:"ord"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 1\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .toggleMark('bold')\n    .apply()\n\n  assert.deepEqual(next.selection.toJS(), range.toJS())\n\n  return next\n}\n"},"add-with-mark-object":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"w",marks:[{type:"bold",data:{key:"value"}}]},{text:"ord"}]}]}]},index:"\nimport { Mark } from '../../../../..'\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 1\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .toggleMark(Mark.create({\n      type: 'bold',\n      data: { key: 'value' }\n    }))\n    .apply()\n\n  assert.deepEqual(next.selection.toJS(), range.toJS())\n\n  return next\n}\n"},"add-across-blocks":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"wo"},{text:"rd",marks:[{type:"bold"}]}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"an",marks:[{type:"bold"}]},{text:"other"}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const second = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: second.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .toggleMark('bold')\n    .apply()\n\n  assert.deepEqual(next.selection.toJS(), range.toJS())\n\n  return next\n}\n"},"remove-whole-word":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"word",marks:[{type:"bold"}]}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: first.length\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .toggleMark('bold')\n    .apply()\n\n  assert.deepEqual(next.selection.toJS(), range.toJS())\n\n  return next\n}\n"},"add-collapsed-selection":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"a",marks:[{type:"bold"}]},{text:"word"}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .toggleMark('bold')\n    .insertText('a')\n    .apply()\n\n  assert.deepEqual(next.selection.toJS(), range.moveForward().toJS())\n\n  return next\n}\n"},"remove-across-blocks":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"wo"},{text:"rd",marks:[{type:"bold"}]}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"an",marks:[{type:"bold"}]},{text:"other"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const second = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: second.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .toggleMark('bold')\n    .apply()\n\n  assert.deepEqual(next.selection.toJS(), range.toJS())\n\n  return next\n}\n"},"add-whole-word":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"word",marks:[{type:"bold"}]}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: first.length\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .toggleMark('bold')\n    .apply()\n\n  assert.deepEqual(next.selection.toJS(), range.toJS())\n\n  return next\n}\n"},"remove-existing-marks":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"wo",marks:[{type:"italic"},{type:"bold"}]},{text:"rd",marks:[{type:"italic"}]}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"word",marks:[{type:"italic"}]}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .toggleMark('bold')\n    .apply()\n\n  assert.deepEqual(next.selection.toJS(), range.toJS())\n\n  return next\n}\n"},"remove-collapsed-selection":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"aword"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .toggleMark('bold')\n    .toggleMark('bold')\n    .insertText('a')\n    .apply()\n\n  assert.deepEqual(next.selection.toJS(), range.moveForward().toJS())\n\n  return next\n}\n"},"add-existing-marks":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"word",marks:[{type:"italic"}]}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"wo",marks:[{type:"italic"},{type:"bold"}]},{text:"rd",marks:[{type:"italic"}]}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .toggleMark('bold')\n    .apply()\n\n  assert.deepEqual(next.selection.toJS(), range.toJS())\n\n  return next\n}\n"},"remove-across-inlines":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",ranges:[{text:"wo"},{text:"rd",marks:[{type:"bold"}]}]}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",ranges:[{text:"an",marks:[{type:"bold"}]},{text:"other"}]}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"another"}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const second = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: second.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .toggleMark('bold')\n    .apply()\n\n  assert.deepEqual(next.selection.toJS(), range.toJS())\n\n  return next\n}\n"},"add-across-inlines":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"another"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",ranges:[{text:"wo"},{text:"rd",marks:[{type:"bold"}]}]}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",ranges:[{text:"an",marks:[{type:"bold"}]},{text:"other"}]}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const second = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: second.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .toggleMark('bold')\n    .apply()\n\n  assert.deepEqual(next.selection.toJS(), range.toJS())\n\n  return next\n}\n"},"remove-middle-character":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"w"},{text:"o",marks:[{type:"bold"}]},{text:"rd"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 1,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .toggleMark('bold')\n    .apply()\n\n  assert.deepEqual(next.selection.toJS(), range.toJS())\n\n  return next\n}\n"},"remove-last-character":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"wor"},{text:"d",marks:[{type:"bold"}]}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: first.length - 1,\n    focusKey: first.key,\n    focusOffset: first.length\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .toggleMark('bold')\n    .apply()\n\n  assert.deepEqual(next.selection.toJS(), range.toJS())\n\n  return next\n}\n"},"add-with-plain-object":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"w",marks:[{type:"bold",data:{key:"value"}}]},{text:"ord"}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 1\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .toggleMark({\n      type: 'bold',\n      data: { key: 'value' }\n    })\n    .apply()\n\n  assert.deepEqual(next.selection.toJS(), range.toJS())\n\n  return next\n}\n"},"add-middle-character":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"w"},{text:"o",marks:[{type:"bold"}]},{text:"rd"}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 1,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .toggleMark('bold')\n    .apply()\n\n  assert.deepEqual(next.selection.toJS(), range.toJS())\n\n  return next\n}\n"},"add-last-character":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"wor"},{text:"d",marks:[{type:"bold"}]}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: first.length - 1,\n    focusKey: first.key,\n    focusOffset: first.length\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .toggleMark('bold')\n    .apply()\n\n  assert.deepEqual(next.selection.toJS(), range.toJS())\n\n  return next\n}\n"}},"set-node-by-key":{"single-block-string-shorthand":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"code",nodes:[{kind:"text",text:"word"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const first = document.nodes.get(0)\n\n  return state\n    .transform()\n    .setNodeByKey(first.key, 'code')\n    .apply()\n}\n"},"single-block":{input:{nodes:[{kind:"block",type:"paragraph",data:{key:"foo"},nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",data:{key:"bar"},nodes:[{kind:"text",text:"word"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const first = document.nodes.get(0)\n\n  return state\n    .transform()\n    .setNodeByKey(first.key, { data: {key: 'bar'} })\n    .apply()\n}\n"}},"wrap-block":{"across-blocks":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]},output:{nodes:[{kind:"block",type:"quote",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const second = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: second.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .wrapBlock('quote')\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.toJS()\n  )\n\n  return next\n}\n"},"across-inlines":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"another"}]}]}]},output:{nodes:[{kind:"block",type:"quote",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"another"}]}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const second = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: second.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .wrapBlock('quote')\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.toJS()\n  )\n\n  return next\n}\n"},"nested-block":{input:{nodes:[{kind:"block",type:"quote",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]}]},output:{nodes:[{kind:"block",type:"quote",nodes:[{kind:"block",type:"quote",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .wrapBlock('quote')\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.toJS()\n  )\n\n  return next\n}\n"},"single-block":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"quote",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .wrapBlock('quote')\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.toJS()\n  )\n\n  return next\n}\n"},"with-object":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"quote",data:{key:"value"},nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .wrapBlock({\n      type: 'quote',\n      data: { key: 'value' }\n    })\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.toJS()\n  )\n\n  return next\n}\n"}},"toggle-mark-at-range":{"remove-with-plain-object":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"w",marks:[{type:"bold",data:{key:"value"}}]},{text:"ord"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 1\n  })\n\n  return state\n    .transform()\n    .toggleMarkAtRange(range, {\n      type: 'bold',\n      data: { key: 'value' }\n    })\n    .apply()\n}\n"},"add-first-character":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"
}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"w",marks:[{type:"bold"}]},{text:"ord"}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 1\n  })\n\n  return state\n    .transform()\n    .toggleMarkAtRange(range, 'bold')\n    .apply()\n}\n"},"remove-with-mark-object":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"w",marks:[{type:"bold",data:{key:"value"}}]},{text:"ord"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},index:"\nimport { Mark } from '../../../../..'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 1\n  })\n\n  return state\n    .transform()\n    .toggleMarkAtRange(range, Mark.create({\n      type: 'bold',\n      data: { key: 'value' }\n    }))\n    .apply()\n}\n"},"remove-first-character":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"word",marks:[{type:"bold"}]}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"w"},{text:"ord",marks:[{type:"bold"}]}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 1\n  })\n\n  return state\n    .transform()\n    .toggleMarkAtRange(range, 'bold')\n    .apply()\n}\n"},"add-with-mark-object":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"w",marks:[{type:"bold",data:{key:"value"}}]},{text:"ord"}]}]}]},index:"\nimport { Mark } from '../../../../..'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 1\n  })\n\n  return state\n    .transform()\n    .toggleMarkAtRange(range, Mark.create({\n      type: 'bold',\n      data: { key: 'value' }\n    }))\n    .apply()\n}\n"},"add-across-blocks":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"wo"},{text:"rd",marks:[{type:"bold"}]}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"an",marks:[{type:"bold"}]},{text:"other"}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const second = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: second.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .toggleMarkAtRange(range, 'bold')\n    .apply()\n}\n"},"remove-whole-word":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"word",marks:[{type:"bold"}]}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: first.length\n  })\n\n  return state\n    .transform()\n    .toggleMarkAtRange(range, 'bold')\n    .apply()\n}\n"},"remove-across-blocks":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"word",marks:[{type:"bold"}]}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"another",marks:[{type:"bold"}]}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"wo",marks:[{type:"bold"}]},{text:"rd"}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"an"},{text:"other",marks:[{type:"bold"}]}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const second = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: second.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .toggleMarkAtRange(range, 'bold')\n    .apply()\n}\n"},"add-whole-word":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"word",marks:[{type:"bold"}]}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: first.length\n  })\n\n  return state\n    .transform()\n    .toggleMarkAtRange(range, 'bold')\n    .apply()\n}\n"},"remove-existing-marks":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"word",marks:[{type:"italic"},{type:"bold"}]}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"wo",marks:[{type:"italic"}]},{text:"rd",marks:[{type:"italic"},{type:"bold"}]}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .toggleMarkAtRange(range, 'bold')\n    .apply()\n}\n"},"add-existing-marks":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"word",marks:[{type:"italic"}]}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"wo",marks:[{type:"italic"},{type:"bold"}]},{text:"rd",marks:[{type:"italic"}]}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .toggleMarkAtRange(range, 'bold')\n    .apply()\n}\n"},"remove-across-inlines":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",ranges:[{text:"word",marks:[{type:"bold"}]}]}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",ranges:[{text:"another",marks:[{type:"bold"}]}]}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",ranges:[{text:"wo",marks:[{type:"bold"}]},{text:"rd"}]}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",ranges:[{text:"an"},{text:"other",marks:[{type:"bold"}]}]}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const second = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: second.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .toggleMarkAtRange(range, 'bold')\n    .apply()\n}\n"},"add-across-inlines":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"another"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",ranges:[{text:"wo"},{text:"rd",marks:[{type:"bold"}]}]}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",ranges:[{text:"an",marks:[{type:"bold"}]},{text:"other"}]}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const second = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: second.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .toggleMarkAtRange(range, 'bold')\n    .apply()\n}\n"},"remove-middle-character":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"word",marks:[{type:"bold"}]}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"w",marks:[{type:"bold"}]},{text:"o"},{text:"rd",marks:[{type:"bold"}]}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 1,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .toggleMarkAtRange(range, 'bold')\n    .apply()\n}\n"},"remove-last-character":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"word",marks:[{type:"bold"}]}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"wor",marks:[{type:"bold"}]},{text:"d"}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: first.length - 1,\n    focusKey: first.key,\n    focusOffset: first.length\n  })\n\n  return state\n    .transform()\n    .toggleMarkAtRange(range, 'bold')\n    .apply()\n}\n"},"add-with-plain-object":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"w",marks:[{type:"bold",data:{key:"value"}}]},{text:"ord"}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 1\n  })\n\n  return state\n    .transform()\n    .toggleMarkAtRange(range, {\n      type: 'bold',\n      data: { key: 'value' }\n    })\n    .apply()\n}\n"},"add-middle-character":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"w"},{text:"o",marks:[{type:"bold"}]},{text:"rd"}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 1,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .toggleMarkAtRange(range, 'bold')\n    .apply()\n}\n"},"add-last-character":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"wor"},{text:"d",marks:[{type:"bold"}]}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: first.length - 1,\n    focusKey: first.key,\n    focusOffset: first.length\n  })\n\n  return state\n    .transform()\n    .toggleMarkAtRange(range, 'bold')\n    .apply()\n}\n"}},delete:{"whole-word":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:""}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: first.length\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .delete()\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.collapseToStart().toJS()\n  )\n\n  return next\n}\n"},"across-blocks-inlines":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"another"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"wo"}]},{kind:"inline",type:"link",nodes:[{kind:"text",text:"other"}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const last = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: last.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .delete()\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.collapseToStart().toJS()\n  )\n\n  return next\n}\n"},"join-blocks":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"wordanother"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const second = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: first.length,\n    focusKey: second.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .delete()\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.collapseToStart().toJS()\n  )\n\n  return next\n}\n"},"first-character":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"ord"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 1\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .delete()\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.collapseToStart().toJS()\n  )\n\n  return next\n}\n"},"across-nested-blocks":{input:{nodes:[{kind:"block",type:"list",nodes:[{kind:"block",type:"item",nodes:[{kind:"text",text:"one"}]},{kind:"block",type:"item",nodes:[{kind:"text",text:"two"}]},{kind:"block",type:"item",nodes:[{kind:"text",text:"three"}]}]}]},output:{nodes:[{kind:"block",type:"list",nodes:[{kind:"block",type:"item",nodes:[{kind:"text",text:"onetwo"}]},{kind:"block",type:"item",nodes:[{kind:"text",text:"three"}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.get(0)\n  const second = texts.get(1)\n  const third = texts.get(2)\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: first.length,\n    focusKey: second.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .delete()\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.collapseToStart().toJS()\n  )\n\n  return next\n}\n"},"middle-character":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"wrd"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 1,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .delete()\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.collapseToStart().toJS()\n  )\n\n  return next\n}\n"},"last-character":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"wor"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: first.length - 1,\n    focusKey: first.key,\n    focusOffset: first.length\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .delete()\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.collapseToStart().toJS()\n  )\n\n  return next\n}\n"},"nested-block":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"middle"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"woother"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const last = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: last.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .delete()\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.collapseToStart().toJS()\n  )\n\n  return next\n}\n"},"join-blocks-and-trim":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"woother"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const second = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: second.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .delete()\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.collapseToStart().toJS()\n  )\n\n  return next\n}\n"},"before-inline-sibling":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"one"},{kind:"inline",type:"link",nodes:[{kind:"text",text:"two"}]},{kind:"text",text:"a"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"one"},{kind:"inline",type:"link",nodes:[{kind:"text",text:"two"}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const last = texts.last()\n  const range = selection.merge({\n    anchorKey: last.key,\n    anchorOffset: last.length - 1,\n    focusKey: last.key,\n    focusOffset: last.length\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .delete()\n    .apply()\n\n  const updated = next.document.getTexts().last()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.merge({\n      anchorKey: updated.key,\n      anchorOffset: updated.length,\n      focusKey: updated.key,\n      focusOffset: updated.length\n    }).toJS()\n  )\n\n  return next\n}\n"},"inside-inline-sibling":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"one"},{kind:"inline",type:"link",nodes:[{kind:"text",text:"a"}]},{kind:"text",text:"two"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"onetwo"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.get(0)\n  const second = texts.get(1)\n  const range = selection.merge({\n    anchorKey: second.key,\n    anchorOffset: second.length - 1,\n    focusKey: second.key,\n    focusOffset: second.length\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .delete()\n    .apply()\n\n  const updated = next.document.getTexts().first()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.merge({\n      anchorKey: updated.key,\n      anchorOffset: first.length,\n      focusKey: updated.key,\n      focusOffset: first.length\n    }).toJS()\n  )\n\n  return next\n}\n"}},"delete-backward-at-range":{"before-inline-sibling":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"one"},{kind:"inline",type:"link",nodes:[{kind:"text",text:"two"}]},{kind:"text",text:"a"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"one"},{kind:"inline",type:"link",nodes:[{kind:"text",text:"two"}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const last = texts.last()\n  const range = selection.merge({\n    anchorKey: last.key,\n    anchorOffset: last.length,\n    focusKey: last.key,\n    focusOffset: last.length\n  })\n\n  return state\n    .transform()\n    .deleteBackwardAtRange(range)\n    .apply()\n}\n"},"first-character":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"ord"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 1,\n    focusKey: first.key,\n    focusOffset: 1\n  })\n\n  return state\n    .transform()\n    .deleteBackwardAtRange(range)\n    .apply()\n}\n"},"inside-inline-sibling":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"one"},{kind:"inline",type:"link",nodes:[{kind:"text",text:"a"}]},{kind:"text",text:"two"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"onetwo"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const second = texts.get(1)\n  const range = selection.merge({\n    anchorKey: second.key,\n    anchorOffset: second.length,\n    focusKey: second.key,\n    focusOffset: second.length\n  })\n\n  return state\n    .transform()\n    .deleteBackwardAtRange(range)\n    .apply()\n}\n"},"join-blocks":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"wordanother"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const second = texts.last()\n  const range = selection.merge({\n    anchorKey: second.key,\n    anchorOffset: 0,\n    focusKey: second.key,\n    focusOffset: 0\n  })\n\n  return state\n    .transform()\n    .deleteBackwardAtRange(range)\n    .apply()\n}\n"},"join-nested-blocks":{input:{nodes:[{kind:"block",type:"quote",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]}]},output:{nodes:[{kind:"block",type:"quote",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"wordanother"}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const second = texts.last()\n  const range = selection.merge({\n    anchorKey: second.key,\n    anchorOffset: 0,\n    focusKey: second.key,\n    focusOffset: 0\n  })\n\n  return state\n    .transform()\n    .deleteBackwardAtRange(range)\n    .apply()\n}\n"},"last-character":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"wor"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: first.length,\n    focusKey: first.key,\n    focusOffset: first.length\n  })\n\n  return state\n    .transform()\n    .deleteBackwardAtRange(range)\n    .apply()\n}\n"},"middle-character":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"wrd"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .deleteBackwardAtRange(range)\n    .apply()\n}\n"},"start-of-document":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  return state\n    .transform()\n    .deleteBackwardAtRange(range)\n    .apply()\n}\n"}},"remove-node-by-key":{block:{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const first = document.getBlocks().first()\n\n  return state\n    .transform()\n    .removeNodeByKey(first.key)\n    .apply()\n}\n"},inline:{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]},{kind:"inline",type:"link",nodes:[{kind:"text",text:"another"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"another"}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const first = document.getInlines().first()\n\n  return state\n    .transform()\n    .removeNodeByKey(first.key)\n    .apply()\n}\n"},text:{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:""}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const first = document.getTexts().first()\n\n  return state\n    .transform()\n    .removeNodeByKey(first.key)\n    .apply()\n}\n"}},"set-inline-at-range":{"across-inlines":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"another"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"code",nodes:[{kind:"text",text:"word"}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"code",nodes:[{kind:"text",text:"another"}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const second = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: second.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .setInlineAtRange(range, { type: 'code' })\n    .apply()\n}\n"},"data-only":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",data:{key:"value"},nodes:[{kind:"text",text:"word"}]}]}]},index:"\nimport { Data } from '../../../../..'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  return state\n    .transform()\n    .setInlineAtRange(range, { data: Data.create({ key: 'value' }) })\n    .apply()\n}\n"},"nested-inline":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"hashtag",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"hashtag",nodes:[{kind:"inline",type:"code",nodes:[{kind:"text",text:"word"}]}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  return state\n    .transform()\n    .setInlineAtRange(range, { type: 'code' })\n    .apply()\n}\n"},"single-inline-string-shorthand":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"code",nodes:[{kind:"text",text:"word"}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  return state\n    .transform()\n    .setInlineAtRange(range, 'code')\n    .apply()\n}\n"},"single-inline":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"code",nodes:[{kind:"text",text:"word"}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  return state\n    .transform()\n    .setInlineAtRange(range, { type: 'code' })\n    .apply()\n}\n"
},"with-data-object":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"code",data:{key:"value"},nodes:[{kind:"text",text:"word"}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  return state\n    .transform()\n    .setInlineAtRange(range, {\n      type: 'code',\n      data: { key: 'value' }\n    })\n    .apply()\n}\n"},"with-data":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"code",data:{key:"value"},nodes:[{kind:"text",text:"word"}]}]}]},index:"\nimport { Data } from '../../../../..'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  return state\n    .transform()\n    .setInlineAtRange(range, {\n      type: 'code',\n      data: Data.create({ key: 'value' })\n    })\n    .apply()\n}\n"},"with-is-void":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"emoji",isVoid:!0}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  return state\n    .transform()\n    .setInlineAtRange(range, {\n      type: 'emoji',\n      isVoid: true\n    })\n    .apply()\n}\n"}},"split-inline":{"block-end":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]},{kind:"inline",type:"link",nodes:[{kind:"text",text:""}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: first.length,\n    focusKey: first.key,\n    focusOffset: first.length\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .splitInline()\n    .apply()\n\n  const updated = next.document.getTexts().last()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.collapseToStartOf(updated).toJS()\n  )\n\n  return next\n}\n"},"block-middle":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"wo"}]},{kind:"inline",type:"link",nodes:[{kind:"text",text:"rd"}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .splitInline()\n    .apply()\n\n  const updated = next.document.getTexts().get(1)\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.collapseToStartOf(updated).toJS()\n  )\n\n  return next\n}\n"},"block-start":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:""}]},{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .splitInline()\n    .apply()\n\n  const updated = next.document.getTexts().last()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.collapseToStartOf(updated).toJS()\n  )\n\n  return next\n}\n"},depth:{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"wo"}]},{kind:"inline",type:"link",nodes:[{kind:"text",text:"rd"}]}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .splitInline(1)\n    .apply()\n\n  const updated = next.document.getTexts().last()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.collapseToStartOf(updated).toJS()\n  )\n\n  return next\n}\n"},"with-delete":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"w"}]},{kind:"inline",type:"link",nodes:[{kind:"text",text:"d"}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 1,\n    focusKey: first.key,\n    focusOffset: 3\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .splitInline()\n    .apply()\n\n  const updated = next.document.getTexts().last()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.collapseToStartOf(updated).toJS()\n  )\n\n  return next\n}\n"},"with-marks":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",ranges:[{text:"word",marks:[{type:"bold"}]}]}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",ranges:[{text:"wo",marks:[{type:"bold"}]}]}]},{kind:"inline",type:"link",nodes:[{kind:"text",ranges:[{text:"rd",marks:[{type:"bold"}]}]}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .splitInline()\n    .apply()\n\n  const updated = next.document.getTexts().last()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.collapseToStartOf(updated).toJS()\n  )\n\n  return next\n}\n"}},"insert-fragment-at-range":{"start-block":{fragment:{nodes:[{kind:"block",type:"list-item",nodes:[{kind:"text",text:"fragment"}]}]},input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"fragmentword"}]}]},index:"\nimport path from 'path'\nimport readMetadata from 'read-metadata'\nimport { Raw } from '../../../../..'\n\nexport default function (state) {\n  const file = path.resolve(__dirname, 'fragment.yaml')\n  const raw = readMetadata.sync(file)\n  const fragment = Raw.deserialize(raw, { terse: true }).document\n\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  return state\n    .transform()\n    .insertFragmentAtRange(range, fragment)\n    .apply()\n}\n"},"start-inline":{fragment:{nodes:[{kind:"block",type:"list-item",nodes:[{kind:"text",text:"fragment"}]}]},input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"fragment"},{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]}]},index:"\nimport path from 'path'\nimport readMetadata from 'read-metadata'\nimport { Raw } from '../../../../..'\n\nexport default function (state) {\n  const file = path.resolve(__dirname, 'fragment.yaml')\n  const raw = readMetadata.sync(file)\n  const fragment = Raw.deserialize(raw, { terse: true }).document\n\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  return state\n    .transform()\n    .insertFragmentAtRange(range, fragment)\n    .apply()\n}\n"},"fragment-multiple-blocks":{fragment:{nodes:[{kind:"block",type:"list-item",nodes:[{kind:"text",ranges:[{text:"fragment one"}]}]},{kind:"block",type:"list-item",nodes:[{kind:"text",ranges:[{text:"fragment two"}]}]}]},input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"wofragment one"}]},{kind:"block",type:"list-item",nodes:[{kind:"text",text:"fragment tword"}]}]},index:"\nimport path from 'path'\nimport readMetadata from 'read-metadata'\nimport { Raw } from '../../../../..'\n\nexport default function (state) {\n  const file = path.resolve(__dirname, 'fragment.yaml')\n  const raw = readMetadata.sync(file)\n  const fragment = Raw.deserialize(raw, { terse: true }).document\n\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .insertFragmentAtRange(range, fragment)\n    .apply()\n}\n"},"end-inline":{fragment:{nodes:[{kind:"block",type:"list-item",nodes:[{kind:"text",text:"fragment"}]}]},input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]},{kind:"text",text:"fragment"}]}]},index:"\nimport path from 'path'\nimport readMetadata from 'read-metadata'\nimport { Raw } from '../../../../..'\n\nexport default function (state) {\n  const file = path.resolve(__dirname, 'fragment.yaml')\n  const raw = readMetadata.sync(file)\n  const fragment = Raw.deserialize(raw, { terse: true }).document\n\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: first.length,\n    focusKey: first.key,\n    focusOffset: first.length\n  })\n\n  return state\n    .transform()\n    .insertFragmentAtRange(range, fragment)\n    .apply()\n}\n"},"middle-inline":{fragment:{nodes:[{kind:"block",type:"list-item",nodes:[{kind:"text",text:"fragment"}]}]},input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"wo"}]},{kind:"text",text:"fragment"},{kind:"inline",type:"link",nodes:[{kind:"text",text:"rd"}]}]}]},index:"\nimport path from 'path'\nimport readMetadata from 'read-metadata'\nimport { Raw } from '../../../../..'\n\nexport default function (state) {\n  const file = path.resolve(__dirname, 'fragment.yaml')\n  const raw = readMetadata.sync(file)\n  const fragment = Raw.deserialize(raw, { terse: true }).document\n\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .insertFragmentAtRange(range, fragment)\n    .apply()\n}\n"},"middle-block":{fragment:{nodes:[{kind:"block",type:"list-item",nodes:[{kind:"text",text:"fragment"}]}]},input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"wofragmentrd"}]}]},index:"\nimport path from 'path'\nimport readMetadata from 'read-metadata'\nimport { Raw } from '../../../../..'\n\nexport default function (state) {\n  const file = path.resolve(__dirname, 'fragment.yaml')\n  const raw = readMetadata.sync(file)\n  const fragment = Raw.deserialize(raw, { terse: true }).document\n\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .insertFragmentAtRange(range, fragment)\n    .apply()\n}\n"},"with-delete-across-blocks":{fragment:{nodes:[{kind:"block",type:"list-item",nodes:[{kind:"text",text:"fragment"}]}]},input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"wofragmentother"}]}]},index:"\nimport path from 'path'\nimport readMetadata from 'read-metadata'\nimport { Raw } from '../../../../..'\n\nexport default function (state) {\n  const file = path.resolve(__dirname, 'fragment.yaml')\n  const raw = readMetadata.sync(file)\n  const fragment = Raw.deserialize(raw, { terse: true }).document\n\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const last = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: last.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .insertFragmentAtRange(range, fragment)\n    .apply()\n}\n"},"middle-inline-fragment-inline":{fragment:{nodes:[{kind:"block",type:"list-item",nodes:[{kind:"inline",type:"hashtag",nodes:[{kind:"text",text:"fragment"}]}]}]},input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"wo"}]},{kind:"inline",type:"hashtag",nodes:[{kind:"text",text:"fragment"}]},{kind:"inline",type:"link",nodes:[{kind:"text",text:"rd"}]}]}]},index:"\nimport path from 'path'\nimport readMetadata from 'read-metadata'\nimport { Raw } from '../../../../..'\n\nexport default function (state) {\n  const file = path.resolve(__dirname, 'fragment.yaml')\n  const raw = readMetadata.sync(file)\n  const fragment = Raw.deserialize(raw, { terse: true }).document\n\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .insertFragmentAtRange(range, fragment)\n    .apply()\n}\n"},"end-block":{fragment:{nodes:[{kind:"block",type:"list-item",nodes:[{kind:"text",text:"fragment"}]}]},input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"wordfragment"}]}]},index:"\nimport path from 'path'\nimport readMetadata from 'read-metadata'\nimport { Raw } from '../../../../..'\n\nexport default function (state) {\n  const file = path.resolve(__dirname, 'fragment.yaml')\n  const raw = readMetadata.sync(file)\n  const fragment = Raw.deserialize(raw, { terse: true }).document\n\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: first.length,\n    focusKey: first.key,\n    focusOffset: first.length\n  })\n\n  return state\n    .transform()\n    .insertFragmentAtRange(range, fragment)\n    .apply()\n}\n"},"start-second-block":{fragment:{nodes:[{kind:"block",type:"list-item",nodes:[{kind:"text",text:"fragment"}]}]},input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"fragmentanother"}]}]},index:"\nimport path from 'path'\nimport readMetadata from 'read-metadata'\nimport { Raw } from '../../../../..'\n\nexport default function (state) {\n  const file = path.resolve(__dirname, 'fragment.yaml')\n  const raw = readMetadata.sync(file)\n  const fragment = Raw.deserialize(raw, { terse: true }).document\n\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const second = texts.get(1)\n  const range = selection.merge({\n    anchorKey: second.key,\n    anchorOffset: 0,\n    focusKey: second.key,\n    focusOffset: 0\n  })\n\n  return state\n    .transform()\n    .insertFragmentAtRange(range, fragment)\n    .apply()\n}\n"},"fragment-nested-blocks":{fragment:{nodes:[{kind:"block",type:"list",nodes:[{kind:"block",type:"list-item",nodes:[{kind:"text",ranges:[{text:"fragment one"}]}]},{kind:"block",type:"list-item",nodes:[{kind:"text",ranges:[{text:"fragment two"}]}]}]}]},input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"wofragment one"}]},{kind:"block",type:"list",nodes:[{kind:"block",type:"list-item",nodes:[{kind:"text",text:"fragment tword"}]}]}]},index:"\nimport path from 'path'\nimport readMetadata from 'read-metadata'\nimport { Raw } from '../../../../..'\n\nexport default function (state) {\n  const file = path.resolve(__dirname, 'fragment.yaml')\n  const raw = readMetadata.sync(file)\n  const fragment = Raw.deserialize(raw, { terse: true }).document\n\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .insertFragmentAtRange(range, fragment)\n    .apply()\n}\n"}},"insert-inline":{"block-end":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"},{kind:"inline",type:"hashtag",isVoid:!0}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: first.length,\n    focusKey: first.key,\n    focusOffset: first.length\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .insertInline({\n      type: 'hashtag',\n      isVoid: true\n    })\n    .apply()\n\n  const updated = next.document.getTexts().last()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.collapseToEndOf(updated).toJS()\n  )\n\n  return next\n}\n"},"block-middle":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"wo"},{kind:"inline",type:"hashtag",isVoid:!0},{kind:"text",text:"rd"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .insertInline({\n      type: 'hashtag',\n      isVoid: true\n    })\n    .apply()\n\n  const updated = next.document.getTexts().get(1)\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.collapseToEndOf(updated).toJS()\n  )\n\n  return next\n}\n"},"block-start":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"hashtag",isVoid:!0},{kind:"text",text:"word"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .insertInline({\n      type: 'hashtag',\n      isVoid: true\n    })\n    .apply()\n\n  const updated = next.document.getTexts().first()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.collapseToEndOf(updated).toJS()\n  )\n\n  return next\n}\n"},"inside-inline":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"wo"},{kind:"inline",type:"image",isVoid:!0},{kind:"text",text:"rd"}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .insertInline({\n      type: 'image',\n      isVoid: true\n    })\n    .apply()\n\n  const updated = next.document.getTexts().get(1)\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.collapseToEndOf(updated).toJS()\n  )\n\n  return next\n}\n"},"is-empty":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:""}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"hashtag",isVoid:!0}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .insertInline({\n      type: 'hashtag',\n      isVoid: true\n    })\n    .apply()\n\n  const updated = next.document.getTexts().last()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.collapseToEndOf(updated).toJS()\n  )\n\n  return next\n}\n"},"is-void":{input:{nodes:[{kind:"block",type:"image",isVoid:!0}]},output:{nodes:[{kind:"block",type:"image",isVoid:!0}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .insertInline({\n      type: 'hashtag',\n      isVoid: true\n    })\n    .apply()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.toJS()\n  )\n\n  return next\n}\n"},"with-inline":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"image",isVoid:!0},{kind:"text",text:"word"}]}]},index:"\nimport { Inline } from '../../../../..'\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .insertInline(Inline.create({\n      type: 'image',\n      isVoid: true\n    }))\n    .apply()\n\n  const updated = next.document.getTexts().first()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.collapseToEndOf(updated).toJS()\n  )\n\n  return next\n}\n"}},"unwrap-inline-at-range":{"across-blocks":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"wo"},{kind:"inline",type:"hashtag",nodes:[{kind:"text",text:"rd"}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"hashtag",nodes:[{kind:"text",text:"an"}]},{kind:"text",text:"other"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const second = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: second.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .unwrapInlineAtRange(range, 'hashtag')\n    .apply()\n}\n"},"across-inlines":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"wo"}]},{kind:"inline",type:"hashtag",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"rd"}]}]},{kind:"inline",type:"hashtag",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"an"}]}]},{kind:"inline",type:"link",nodes:[{kind:"text",text:"other"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"wo"}]},{kind:"inline",type:"link",nodes:[{kind:"text",text:"rd"}]},{kind:"inline",type:"link",nodes:[{kind:"text",text:"an"}]},{kind:"inline",type:"link",nodes:[{kind:"text",text:"other"}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const second = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: second.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .unwrapInlineAtRange(range, 'hashtag')\n    .apply()\n}\n"},"nested-block":{input:{nodes:[{kind:"block",type:"quote",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"w"},{kind:"inline",type:"hashtag",nodes:[{kind:"text",text:"or"}]},{kind:"text",text:"d"}]}]}]},output:{nodes:[{kind:"block",type:"quote",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 1,\n    focusKey: first.key,\n    focusOffset: 3\n  })\n\n  return state\n    .transform()\n    .unwrapInlineAtRange(range, 'hashtag')\n    .apply()\n}\n"},"single-block":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"w"},{kind:"inline",type:"hashtag",nodes:[{kind:"text",text:"or"}]},{kind:"text",text:"d"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 1,\n    focusKey: first.key,\n    focusOffset: 3\n  })\n\n  return state\n    .transform()\n    .unwrapInlineAtRange(range, 'hashtag')\n    .apply()\n}\n"},"with-object":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"w"},{kind:"inline",type:"hashtag",data:{key:"one"},nodes:[{kind:"inline",type:"hashtag",data:{key:"two"},nodes:[{kind:"text",text:"or"}]}]},{kind:"text",text:"d"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"w"},{kind:"inline",type:"hashtag",data:{key:"two"},nodes:[{kind:"text",text:"or"}]},{kind:"text",text:"d"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 1,\n    focusKey: first.key,\n    focusOffset: 3\n  })\n\n  return state\n    .transform()\n    .unwrapInlineAtRange(range, {\n      type: 'hashtag',\n      data: { key: 'one' }\n    })\n    .apply()\n}\n"}},"unwrap-block-at-range":{"across-blocks":{input:{nodes:[{kind:"block",type:"quote",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const second = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: second.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .unwrapBlockAtRange(range, 'quote')\n    .apply()\n}\n"},"across-inlines":{input:{nodes:[{kind:"block",type:"quote",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"another"}]}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"another"}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const second = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: second.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .unwrapBlockAtRange(range, 'quote')\n    .apply()\n}\n"},"ending-child-blocks":{input:{nodes:[{kind:"block",type:"quote",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"one"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"two"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"three"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"four"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"five"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"six"}]}]}]},output:{nodes:[{kind:"block",type:"quote",nodes:[{kind:"block",
type:"paragraph",nodes:[{kind:"text",text:"one"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"two"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"three"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"four"}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"five"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"six"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const fifth = texts.get(4)\n  const sixth = texts.get(5)\n  const range = selection.merge({\n    anchorKey: fifth.key,\n    anchorOffset: 0,\n    focusKey: sixth.key,\n    focusOffset: 0\n  })\n\n  return state\n    .transform()\n    .unwrapBlockAtRange(range, 'quote')\n    .apply()\n}\n"},"middle-child-blocks":{input:{nodes:[{kind:"block",type:"quote",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"one"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"two"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"three"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"four"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"five"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"six"}]}]}]},output:{nodes:[{kind:"block",type:"quote",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"one"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"two"}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"three"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"four"}]},{kind:"block",type:"quote",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"five"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"six"}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const third = texts.get(2)\n  const fourth = texts.get(3)\n  const range = selection.merge({\n    anchorKey: third.key,\n    anchorOffset: 0,\n    focusKey: fourth.key,\n    focusOffset: 0\n  })\n\n  return state\n    .transform()\n    .unwrapBlockAtRange(range, 'quote')\n    .apply()\n}\n"},"nested-block":{input:{nodes:[{kind:"block",type:"quote",nodes:[{kind:"block",type:"quote",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]}]}]},output:{nodes:[{kind:"block",type:"quote",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  return state\n    .transform()\n    .unwrapBlockAtRange(range, 'quote')\n    .apply()\n}\n"},"single-block":{input:{nodes:[{kind:"block",type:"quote",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  return state\n    .transform()\n    .unwrapBlockAtRange(range, 'quote')\n    .apply()\n}\n"},"starting-child-blocks":{input:{nodes:[{kind:"block",type:"quote",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"one"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"two"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"three"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"four"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"five"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"six"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"one"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"two"}]},{kind:"block",type:"quote",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"three"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"four"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"five"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"six"}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.get(0)\n  const second = texts.get(1)\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: second.key,\n    focusOffset: 0\n  })\n\n  return state\n    .transform()\n    .unwrapBlockAtRange(range, 'quote')\n    .apply()\n}\n"},"with-object":{input:{nodes:[{kind:"block",type:"quote",data:{key:"value"},nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  return state\n    .transform()\n    .unwrapBlockAtRange(range, {\n      type: 'quote',\n      data: { key: 'value' }\n    })\n    .apply()\n}\n"}},"delete-forward-at-range":{"before-inline-sibling":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"one"},{kind:"inline",type:"link",nodes:[{kind:"text",text:"two"}]},{kind:"text",text:"a"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"one"},{kind:"inline",type:"link",nodes:[{kind:"text",text:"two"}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const last = texts.last()\n  const range = selection.merge({\n    anchorKey: last.key,\n    anchorOffset: 0,\n    focusKey: last.key,\n    focusOffset: 0\n  })\n\n  return state\n    .transform()\n    .deleteForwardAtRange(range)\n    .apply()\n}\n"},"end-of-document":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: first.length,\n    focusKey: first.key,\n    focusOffset: first.length\n  })\n\n  return state\n    .transform()\n    .deleteForwardAtRange(range)\n    .apply()\n}\n"},"first-character":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"ord"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  return state\n    .transform()\n    .deleteForwardAtRange(range)\n    .apply()\n}\n"},"inside-inline-sibling":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"one"},{kind:"inline",type:"link",nodes:[{kind:"text",text:"a"}]},{kind:"text",text:"two"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"onetwo"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const second = texts.get(1)\n  const range = selection.merge({\n    anchorKey: second.key,\n    anchorOffset: 0,\n    focusKey: second.key,\n    focusOffset: 0\n  })\n\n  return state\n    .transform()\n    .deleteForwardAtRange(range)\n    .apply()\n}\n"},"join-blocks":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"wordanother"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: first.length,\n    focusKey: first.key,\n    focusOffset: first.length\n  })\n\n  return state\n    .transform()\n    .deleteForwardAtRange(range)\n    .apply()\n}\n"},"join-nested-blocks":{input:{nodes:[{kind:"block",type:"quote",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]}]},output:{nodes:[{kind:"block",type:"quote",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"wordanother"}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: first.length,\n    focusKey: first.key,\n    focusOffset: first.length\n  })\n\n  return state\n    .transform()\n    .deleteForwardAtRange(range)\n    .apply()\n}\n"},"last-character":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"wor"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: first.length - 1,\n    focusKey: first.key,\n    focusOffset: first.length - 1\n  })\n\n  return state\n    .transform()\n    .deleteForwardAtRange(range)\n    .apply()\n}\n"},"middle-character":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"wrd"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 1,\n    focusKey: first.key,\n    focusOffset: 1\n  })\n\n  return state\n    .transform()\n    .deleteForwardAtRange(range)\n    .apply()\n}\n"}},"set-block-at-range":{"single-block":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"code",nodes:[{kind:"text",text:"word"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  return state\n    .transform()\n    .setBlockAtRange(range, { type: 'code' })\n    .apply()\n}\n"},"across-inlines":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"another"}]}]}]},output:{nodes:[{kind:"block",type:"code",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]},{kind:"block",type:"code",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"another"}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const second = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: second.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .setBlockAtRange(range, { type: 'code' })\n    .apply()\n}\n"},"data-only":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",data:{key:"value"},nodes:[{kind:"text",text:"word"}]}]},index:"\nimport { Data } from '../../../../..'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  return state\n    .transform()\n    .setBlockAtRange(range, { data: Data.create({ key: 'value' }) })\n    .apply()\n}\n"},"with-is-void":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"image",isVoid:!0}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  return state\n    .transform()\n    .setBlockAtRange(range, {\n      type: 'image',\n      isVoid: true\n    })\n    .apply()\n}\n"},"with-data":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"code",data:{key:"value"},nodes:[{kind:"text",text:"word"}]}]},index:"\nimport { Data } from '../../../../..'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  return state\n    .transform()\n    .setBlockAtRange(range, {\n      type: 'code',\n      data: Data.create({ key: 'value' })\n    })\n    .apply()\n}\n"},"single-block-string-shorthand":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"code",nodes:[{kind:"text",text:"word"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  return state\n    .transform()\n    .setBlockAtRange(range, 'code')\n    .apply()\n}\n"},"across-blocks":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]},output:{nodes:[{kind:"block",type:"code",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"code",nodes:[{kind:"text",text:"another"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const second = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: second.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .setBlockAtRange(range, { type: 'code' })\n    .apply()\n}\n"},"nested-block":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"block",type:"code",nodes:[{kind:"text",text:"word"}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  return state\n    .transform()\n    .setBlockAtRange(range, { type: 'code' })\n    .apply()\n}\n"},"with-data-object":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"code",data:{key:"value"},nodes:[{kind:"text",text:"word"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  return state\n    .transform()\n    .setBlockAtRange(range, {\n      type: 'code',\n      data: { key: 'value' }\n    })\n    .apply()\n}\n"}},"insert-text-at-range":{"inside-void":{input:{nodes:[{kind:"block",type:"image",isVoid:!0}]},output:{nodes:[{kind:"block",type:"image",isVoid:!0}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  return state\n    .transform()\n    .insertTextAtRange(range, 'a')\n    .apply()\n}\n"},"first-space":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:" word"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  return state\n    .transform()\n    .insertTextAtRange(range, ' ')\n    .apply()\n}\n"},"first-character":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"aword"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  return state\n    .transform()\n    .insertTextAtRange(range, 'a')\n    .apply()\n}\n"},"first-words":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"a few words word"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  return state\n    .transform()\n    .insertTextAtRange(range, 'a few words ')\n    .apply()\n}\n"},"middle-space":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"w ord"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 1,\n    focusKey: first.key,\n    focusOffset: 1\n  })\n\n  return state\n    .transform()\n    .insertTextAtRange(range, ' ')\n    .apply()\n}\n"},"last-space":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word "}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: first.length,\n    focusKey: first.key,\n    focusOffset: first.length\n  })\n\n  return state\n    .transform()\n    .insertTextAtRange(range, ' ')\n    .apply()\n}\n"},"middle-words":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"w a few words ord"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 1,\n    focusKey: first.key,\n    focusOffset: 1\n  })\n\n  return state\n    .transform()\n    .insertTextAtRange(range, ' a few words ')\n    .apply()\n}\n"},"middle-character":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"waord"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 1,\n    focusKey: first.key,\n    focusOffset: 1\n  })\n\n  return state\n    .transform()\n    .insertTextAtRange(range, 'a')\n    .apply()\n}\n"},"last-character":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"worda"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: first.length,\n    focusKey: first.key,\n    focusOffset: first.length\n  })\n\n  return state\n    .transform()\n    .insertTextAtRange(range, 'a')\n    .apply()\n}\n"},"last-words":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word a few words"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: first.length,\n    focusKey: first.key,\n    focusOffset: first.length\n  })\n\n  return state\n    .transform()\n    .insertTextAtRange(range, ' a few words')\n    .apply()\n}\n"},"during-mark":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"w"},{text:"or",marks:[{type:"bold"}]},{text:"d"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"w"},{text:"oar",marks:[{type:"bold"}]},{text:"d"}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .insertTextAtRange(range, 'a')\n    .apply()\n}\n"},"before-mark":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"w"},{text:"or",marks:[{type:"bold"}]},{text:"d"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"wa"},{text:"or",marks:[{type:"bold"}]},{text:"d"}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 1,\n    focusKey: first.key,\n    focusOffset: 1\n  })\n\n  return state\n    .transform()\n    .insertTextAtRange(range, 'a')\n    .apply()\n}\n"},"after-mark":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"w"},{text:"or",marks:[{type:"bold"}]},{text:"d"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"w"},{text:"ora",marks:[{type:"bold"}]},{text:"d"}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 3,\n    focusKey: first.key,\n    focusOffset: 3\n  })\n\n  return state\n    .transform()\n    .insertTextAtRange(range, 'a')\n    .apply()\n}\n"},"with-marks":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"word"},{text:"a",marks:[{type:"bold"}]}]}]}]},index:"\nimport { Mark } from '../../../../..'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: first.length,\n    focusKey: first.key,\n    focusOffset: first.length\n  })\n\n  const marks = Mark.createSet([\n    Mark.create({\n      type: 'bold'\n    })\n  ])\n\n  return state\n    .transform()\n    .insertTextAtRange(range, 'a', marks)\n    .apply()\n}\n"}},"wrap-text":{"start-of-block":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"[[wo]]rd"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .wrapText('[[', ']]')\n    .apply()\n\n\n  const updated = next.document.getTexts().get(0)\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.merge({\n      anchorKey: updated.key,\n      anchorOffset: 2,\n      focusKey: updated.key,\n      focusOffset: 4,\n      isBackward: false\n    }).toJS()\n  )\n\n  return next\n}\n"},"end-of-block":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"wo[[rd]]"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: first.key,\n    focusOffset: 4\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .wrapText('[[', ']]')\n    .apply()\n\n\n  const updated = next.document.getTexts().get(0)\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.merge({\n      anchorKey: updated.key,\n      anchorOffset: 4,\n      focusKey: updated.key,\n      focusOffset: 6,\n      isBackward: false\n    }).toJS()\n  )\n\n  return next\n}\n"},"across-inlines":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]},{kind:"inline",type:"link",nodes:[{kind:"text",text:"another"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"wo[[rd"}]},{kind:"inline",type:"link",nodes:[{kind:"text",text:"an]]other"}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const last = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: last.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .wrapText('[[', ']]')\n    .apply()\n\n\n  const updated = next.document.getTexts()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.merge({\n      anchorKey: updated.get(0).key,\n      anchorOffset: 4,\n      focusKey: updated.get(1).key,\n      focusOffset: 2,\n      isBackward: false\n    }).toJS()\n  )\n\n  return next\n}\n"},"empty-block":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:""}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"[[]]"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .wrapText('[[', ']]')\n    .apply()\n\n\n  const updated = next.document.getTexts().get(0)\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.merge({\n      anchorKey: updated.key,\n      anchorOffset: 2,\n      focusKey: updated.key,\n      focusOffset: 2,\n      isBackward: false\n    }).toJS()\n  )\n\n  return next\n}\n"},"backwards-selection":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"w[[or]]d"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 3,\n    focusKey: first.key,\n    focusOffset: 1,\n    isBackward: true\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .wrapText('[[', ']]')\n    .apply()\n\n\n  const updated = next.document.getTexts().get(0)\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.merge({\n      anchorKey: updated.key,\n      anchorOffset: 5,\n      focusKey: updated.key,\n      focusOffset: 3\n    }).toJS()\n  )\n\n  return next\n}\n"},"middle-of-block":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"w[[or]]d"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 1,\n    focusKey: first.key,\n    focusOffset: 3\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .wrapText('[[', ']]')\n    .apply()\n\n\n  const updated = next.document.getTexts().get(0)\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.merge({\n      anchorKey: updated.key,\n      anchorOffset: 3,\n      focusKey: updated.key,\n      focusOffset: 5,\n      isBackward: false\n    }).toJS()\n  )\n\n  return next\n}\n"},"across-blocks":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"wo[[rd"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"an]]other"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const last = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: last.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .wrapText('[[', ']]')\n    .apply()\n\n\n  const updated = next.document.getTexts()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.merge({\n      anchorKey: updated.get(0).key,\n      anchorOffset: 4,\n      focusKey: updated.get(1).key,\n      focusOffset: 2,\n      isBackward: false\n    }).toJS()\n  )\n\n  return next\n}\n"},"without-suffix":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"w**or**d"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 1,\n    focusKey: first.key,\n    focusOffset: 3\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .wrapText('**')\n    .apply()\n\n\n  const updated = next.document.getTexts().get(0)\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.merge({\n      anchorKey: updated.key,\n      anchorOffset: 3,\n      focusKey: updated.key,\n      focusOffset: 5,\n      isBackward: false\n    }).toJS()\n  )\n\n  return next\n}\n"
},"whole-block":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"[[word]]"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 4\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .wrapText('[[', ']]')\n    .apply()\n\n\n  const updated = next.document.getTexts().get(0)\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.merge({\n      anchorKey: updated.key,\n      anchorOffset: 2,\n      focusKey: updated.key,\n      focusOffset: 6,\n      isBackward: false\n    }).toJS()\n  )\n\n  return next\n}\n"}},"wrap-inline-at-range":{"across-blocks":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"wo"},{kind:"inline",type:"hashtag",nodes:[{kind:"text",text:"rd"}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"hashtag",nodes:[{kind:"text",text:"an"}]},{kind:"text",text:"other"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const second = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: second.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .wrapInlineAtRange(range, 'hashtag')\n    .apply()\n}\n"},"across-inlines":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]},{kind:"inline",type:"link",nodes:[{kind:"text",text:"another"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"wo"}]},{kind:"inline",type:"hashtag",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"rd"}]}]},{kind:"inline",type:"hashtag",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"an"}]}]},{kind:"inline",type:"link",nodes:[{kind:"text",text:"other"}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const second = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: second.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .wrapInlineAtRange(range, 'hashtag')\n    .apply()\n}\n"},"nested-block":{input:{nodes:[{kind:"block",type:"quote",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]}]},output:{nodes:[{kind:"block",type:"quote",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"w"},{kind:"inline",type:"hashtag",nodes:[{kind:"text",text:"or"}]},{kind:"text",text:"d"}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 1,\n    focusKey: first.key,\n    focusOffset: 3\n  })\n\n  return state\n    .transform()\n    .wrapInlineAtRange(range, 'hashtag')\n    .apply()\n}\n"},"single-block":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"w"},{kind:"inline",type:"hashtag",nodes:[{kind:"text",text:"or"}]},{kind:"text",text:"d"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 1,\n    focusKey: first.key,\n    focusOffset: 3\n  })\n\n  return state\n    .transform()\n    .wrapInlineAtRange(range, 'hashtag')\n    .apply()\n}\n"},"with-object":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"w"},{kind:"inline",type:"hashtag",data:{key:"value"},nodes:[{kind:"text",text:"or"}]},{kind:"text",text:"d"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 1,\n    focusKey: first.key,\n    focusOffset: 3\n  })\n\n  return state\n    .transform()\n    .wrapInlineAtRange(range, {\n      type: 'hashtag',\n      data: { key: 'value' }\n    })\n    .apply()\n}\n"}},"remove-mark":{"whole-word":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"word",marks:[{type:"bold"}]}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: first.length\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .removeMark('bold')\n    .apply()\n\n  assert.deepEqual(next.selection.toJS(), range.toJS())\n\n  return next\n}\n"},"existing-marks":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"wo",marks:[{type:"italic"},{type:"bold"}]},{text:"rd",marks:[{type:"italic"}]}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"word",marks:[{type:"italic"}]}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .removeMark('bold')\n    .apply()\n\n  assert.deepEqual(next.selection.toJS(), range.toJS())\n\n  return next\n}\n"},"with-plain-object":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"w",marks:[{type:"bold",data:{key:"value"}}]},{text:"ord"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 1\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .removeMark({\n      type: 'bold',\n      data: { key: 'value' }\n    })\n    .apply()\n\n  assert.deepEqual(next.selection.toJS(), range.toJS())\n\n  return next\n}\n"},"first-character":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"w",marks:[{type:"bold"}]},{text:"ord"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 1\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .removeMark('bold')\n    .apply()\n\n  assert.deepEqual(next.selection.toJS(), range.toJS())\n\n  return next\n}\n"},"across-inlines":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",ranges:[{text:"wo"},{text:"rd",marks:[{type:"bold"}]}]}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",ranges:[{text:"an",marks:[{type:"bold"}]},{text:"other"}]}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"another"}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const second = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: second.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .removeMark('bold')\n    .apply()\n\n  assert.deepEqual(next.selection.toJS(), range.toJS())\n\n  return next\n}\n"},"middle-character":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"w"},{text:"o",marks:[{type:"bold"}]},{text:"rd"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 1,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .removeMark('bold')\n    .apply()\n\n  assert.deepEqual(next.selection.toJS(), range.toJS())\n\n  return next\n}\n"},"last-character":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"wor"},{text:"d",marks:[{type:"bold"}]}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: first.length - 1,\n    focusKey: first.key,\n    focusOffset: first.length\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .removeMark('bold')\n    .apply()\n\n  assert.deepEqual(next.selection.toJS(), range.toJS())\n\n  return next\n}\n"},"across-blocks":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"wo"},{text:"rd",marks:[{type:"bold"}]}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"an",marks:[{type:"bold"}]},{text:"other"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const second = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: second.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .removeMark('bold')\n    .apply()\n\n  assert.deepEqual(next.selection.toJS(), range.toJS())\n\n  return next\n}\n"},"collapsed-selection":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"aword"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .addMark('bold')\n    .removeMark('bold')\n    .insertText('a')\n    .apply()\n\n  assert.deepEqual(next.selection.toJS(), range.moveForward().toJS())\n\n  return next\n}\n"},"with-mark-object":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"w",marks:[{type:"bold",data:{key:"value"}}]},{text:"ord"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},index:"\nimport { Mark } from '../../../../..'\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 1\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .removeMark(Mark.create({\n      type: 'bold',\n      data: { key: 'value' }\n    }))\n    .apply()\n\n  assert.deepEqual(next.selection.toJS(), range.toJS())\n\n  return next\n}\n"}},"split-block-at-range":{"block-end":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:""}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: first.length,\n    focusKey: first.key,\n    focusOffset: first.length\n  })\n\n  return state\n    .transform()\n    .splitBlockAtRange(range)\n    .apply()\n}\n"},"block-middle":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"wo"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"rd"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .splitBlockAtRange(range)\n    .apply()\n}\n"},"block-start":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:""}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const second = texts.get(1)\n  const range = selection.merge({\n    anchorKey: second.key,\n    anchorOffset: 0,\n    focusKey: second.key,\n    focusOffset: 0\n  })\n\n  return state\n    .transform()\n    .splitBlockAtRange(range)\n    .apply()\n}\n"},depth:{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"wo"}]}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"rd"}]}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .splitBlockAtRange(range, Infinity)\n    .apply()\n}\n"},"with-delete-across-blocks-and-inlines":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"one",nodes:[{kind:"text",text:"word"}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"two",nodes:[{kind:"text",text:"another"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"one",nodes:[{kind:"text",text:"wo"}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"two",nodes:[{kind:"text",text:"other"}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const second = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: second.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .splitBlockAtRange(range)\n    .apply()\n}\n"},"with-delete-across-blocks":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"wo"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"other"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const second = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: second.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .splitBlockAtRange(range)\n    .apply()\n}\n"},"with-delete":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"w"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"d"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 1,\n    focusKey: first.key,\n    focusOffset: 3\n  })\n\n  return state\n    .transform()\n    .splitBlockAtRange(range)\n    .apply()\n}\n"},"with-inline":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"wo"}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"rd"}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .splitBlockAtRange(range)\n    .apply()\n}\n"}},"insert-block-at-range":{"block-end":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"image",nodes:[{kind:"text",text:""}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: first.length,\n    focusKey: first.key,\n    focusOffset: first.length\n  })\n\n  return state\n    .transform()\n    .insertBlockAtRange(range, 'image')\n    .apply()\n}\n"},"block-middle":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"wo"}]},{kind:"block",type:"image",nodes:[{kind:"text",text:""}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"rd"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .insertBlockAtRange(range, 'image')\n    .apply()\n}\n"},"block-start":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"image",nodes:[{kind:"text",text:""}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  return state\n    .transform()\n    .insertBlockAtRange(range, 'image')\n    .apply()\n}\n"},"is-empty":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:""}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"not empty"}]}]},output:{nodes:[{kind:"block",type:"image",nodes:[{kind:"text",text:""}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"not empty"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  return state\n    .transform()\n    .insertBlockAtRange(range, 'image')\n    .apply()\n}\n"},"is-void":{input:{nodes:[{kind:"block",type:"image",isVoid:!0,nodes:[{kind:"text",text:""}]}]},output:{nodes:[{kind:"block",type:"image",isVoid:!0},{kind:"block",type:"image",nodes:[{kind:"text",text:""}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  return state\n    .transform()\n    .insertBlockAtRange(range, 'image')\n    .apply()\n}\n"},"with-block":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"image",nodes:[{kind:"text",text:""}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},index:"\nimport { Block } from '../../../../..'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  return state\n    .transform()\n    .insertBlockAtRange(range, Block.create({ type: 'image' }))\n    .apply()\n}\n"},"with-object":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"image",nodes:[{kind:"text",text:""}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  return state\n    .transform()\n    .insertBlockAtRange(range, { type: 'image' })\n    .apply()\n}\n"}},"add-mark-at-range":{"whole-word":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"word",marks:[{type:"bold"}]}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: first.length\n  })\n\n  return state\n    .transform()\n    .addMarkAtRange(range, 'bold')\n    .apply()\n}\n"},"existing-marks":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"word",marks:[{type:"italic"}]}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"wo",marks:[{type:"italic"},{type:"bold"}]},{text:"rd",marks:[{type:"italic"}]}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .addMarkAtRange(range, 'bold')\n    .apply()\n}\n"},"with-plain-object":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"w",marks:[{type:"bold",data:{key:"value"}}]},{text:"ord"}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 1\n  })\n\n  return state\n    .transform()\n    .addMarkAtRange(range, {\n      type: 'bold',\n      data: { key: 'value' }\n    })\n    .apply()\n}\n"},"first-character":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"w",marks:[{type:"bold"}]},{text:"ord"}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 1\n  })\n\n  return state\n    .transform()\n    .addMarkAtRange(range, 'bold')\n    .apply()\n}\n"},"across-inlines":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"another"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",ranges:[{text:"wo"},{text:"rd",marks:[{type:"bold"}]}]}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",ranges:[{text:"an",marks:[{type:"bold"}]},{text:"other"}]}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const second = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: second.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .addMarkAtRange(range, 'bold')\n    .apply()\n}\n"},"middle-character":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"w"},{text:"o",marks:[{type:"bold"}]},{text:"rd"}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 1,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .addMarkAtRange(range, 'bold')\n    .apply()\n}\n"},"last-character":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"wor"},{text:"d",marks:[{type:"bold"}]}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: first.length - 1,\n    focusKey: first.key,\n    focusOffset: first.length\n  })\n\n  return state\n    .transform()\n    .addMarkAtRange(range, 'bold')\n    .apply()\n}\n"},"across-blocks":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"wo"},{text:"rd",marks:[{type:"bold"}]}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"an",marks:[{type:"bold"}]},{text:"other"}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const second = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: second.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .addMarkAtRange(range, 'bold')\n    .apply()\n}\n"},"with-mark-object":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"w",marks:[{type:"bold",data:{key:"value"}}]},{text:"ord"}]}]}]},index:"\nimport { Mark } from '../../../../..'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 1\n  })\n\n  return state\n    .transform()\n    .addMarkAtRange(range, Mark.create({\n      type: 'bold',\n      data: { key: 'value' }\n    }))\n    .apply()\n}\n"}},"add-mark":{"whole-word":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"word",marks:[{type:"bold"}]}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: first.length\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .addMark('bold')\n    .apply()\n\n  assert.deepEqual(next.selection.toJS(), range.toJS())\n\n  return next\n}\n"},"existing-marks":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"word",marks:[{type:"italic"}]}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"wo",marks:[{type:"italic"},{type:"bold"}]},{text:"rd",marks:[{type:"italic"}]}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .addMark('bold')\n    .apply()\n\n  assert.deepEqual(next.selection.toJS(), range.toJS())\n\n  return next\n}\n"},"with-plain-object":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",
nodes:[{kind:"text",ranges:[{text:"w",marks:[{type:"bold",data:{key:"value"}}]},{text:"ord"}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 1\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .addMark({\n      type: 'bold',\n      data: { key: 'value' }\n    })\n    .apply()\n\n  assert.deepEqual(next.selection.toJS(), range.toJS())\n\n  return next\n}\n"},"first-character":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"w",marks:[{type:"bold"}]},{text:"ord"}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 1\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .addMark('bold')\n    .apply()\n\n  assert.deepEqual(next.selection.toJS(), range.toJS())\n\n  return next\n}\n"},"across-inlines":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"another"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",ranges:[{text:"wo"},{text:"rd",marks:[{type:"bold"}]}]}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",ranges:[{text:"an",marks:[{type:"bold"}]},{text:"other"}]}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const second = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: second.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .addMark('bold')\n    .apply()\n\n  assert.deepEqual(next.selection.toJS(), range.toJS())\n\n  return next\n}\n"},"middle-character":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"w"},{text:"o",marks:[{type:"bold"}]},{text:"rd"}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 1,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .addMark('bold')\n    .apply()\n\n  assert.deepEqual(next.selection.toJS(), range.toJS())\n\n  return next\n}\n"},"last-character":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"wor"},{text:"d",marks:[{type:"bold"}]}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: first.length - 1,\n    focusKey: first.key,\n    focusOffset: first.length\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .addMark('bold')\n    .apply()\n\n  assert.deepEqual(next.selection.toJS(), range.toJS())\n\n  return next\n}\n"},"across-blocks":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"wo"},{text:"rd",marks:[{type:"bold"}]}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"an",marks:[{type:"bold"}]},{text:"other"}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const second = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: second.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .addMark('bold')\n    .apply()\n\n  assert.deepEqual(next.selection.toJS(), range.toJS())\n\n  return next\n}\n"},"collapsed-selection":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"a",marks:[{type:"bold"}]},{text:"word"}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .addMark('bold')\n    .insertText('a')\n    .apply()\n\n  assert.deepEqual(next.selection.toJS(), range.moveForward().toJS())\n\n  return next\n}\n"},"with-mark-object":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"w",marks:[{type:"bold",data:{key:"value"}}]},{text:"ord"}]}]}]},index:"\nimport { Mark } from '../../../../..'\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 1\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .addMark(Mark.create({\n      type: 'bold',\n      data: { key: 'value' }\n    }))\n    .apply()\n\n  assert.deepEqual(next.selection.toJS(), range.toJS())\n\n  return next\n}\n"}},"insert-block":{"block-end":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"image",nodes:[{kind:"text",text:""}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: first.length,\n    focusKey: first.key,\n    focusOffset: first.length\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .insertBlock('image')\n    .apply()\n\n  const updated = next.document.getTexts().last()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.collapseToStartOf(updated).toJS()\n  )\n\n  return next\n}\n"},"block-middle":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"wo"}]},{kind:"block",type:"image",nodes:[{kind:"text",text:""}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"rd"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .insertBlock('image')\n    .apply()\n\n  const updated = next.document.getTexts().get(1)\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.collapseToStartOf(updated).toJS()\n  )\n\n  return next\n}\n"},"block-start":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"image",nodes:[{kind:"text",text:""}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .insertBlock('image')\n    .apply()\n\n  const updated = next.document.getTexts().first()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.collapseToStartOf(updated).toJS()\n  )\n\n  return next\n}\n"},"is-empty":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:""}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"not empty"}]}]},output:{nodes:[{kind:"block",type:"image",nodes:[{kind:"text",text:""}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"not empty"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .insertBlock('image')\n    .apply()\n\n  const updated = next.document.getTexts().first()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.collapseToStartOf(updated).toJS()\n  )\n\n  return next\n}\n"},"is-void":{input:{nodes:[{kind:"block",type:"image",isVoid:!0,nodes:[{kind:"text",text:""}]}]},output:{nodes:[{kind:"block",type:"image",isVoid:!0},{kind:"block",type:"image",nodes:[{kind:"text",text:""}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .insertBlock('image')\n    .apply()\n\n  const updated = next.document.getTexts().last()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.collapseToStartOf(updated).toJS()\n  )\n\n  return next\n}\n"},"with-block":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"image",nodes:[{kind:"text",text:""}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},index:"\nimport { Block } from '../../../../..'\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .insertBlock(Block.create({ type: 'image' }))\n    .apply()\n\n  const updated = next.document.getTexts().first()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.collapseToStartOf(updated).toJS()\n  )\n\n  return next\n}\n"},"with-object":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"image",nodes:[{kind:"text",text:""}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .insertBlock({ type: 'image' })\n    .apply()\n\n  const updated = next.document.getTexts().first()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.collapseToStartOf(updated).toJS()\n  )\n\n  return next\n}\n"}},"split-block":{"block-end":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:""}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: first.length,\n    focusKey: first.key,\n    focusOffset: first.length\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .splitBlock()\n    .apply()\n\n  const updated = next.document.getTexts().get(1)\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.collapseToStartOf(updated).toJS()\n  )\n\n  return next\n}\n"},"block-middle":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"wo"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"rd"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .splitBlock()\n    .apply()\n\n  const updated = next.document.getTexts().get(1)\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.collapseToStartOf(updated).toJS()\n  )\n\n  return next\n}\n"},"block-start":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:""}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const second = texts.get(1)\n  const range = selection.merge({\n    anchorKey: second.key,\n    anchorOffset: 0,\n    focusKey: second.key,\n    focusOffset: 0\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .splitBlock()\n    .apply()\n\n  const updated = next.document.getTexts().last()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.collapseToStartOf(updated).toJS()\n  )\n\n  return next\n}\n"},depth:{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"wo"}]}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"rd"}]}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .splitBlock(Infinity)\n    .apply()\n\n  const updated = next.document.getTexts().last()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.collapseToStartOf(updated).toJS()\n  )\n\n  return next\n}\n"},"with-delete-across-blocks-and-inlines":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"one",nodes:[{kind:"text",text:"word"}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"two",nodes:[{kind:"text",text:"another"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"one",nodes:[{kind:"text",text:"wo"}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"two",nodes:[{kind:"text",text:"other"}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const second = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: second.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .splitBlock()\n    .apply()\n\n  const updated = next.document.getTexts().get(1)\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.collapseToStartOf(updated).toJS()\n  )\n\n  return next\n}\n"},"with-delete-across-blocks":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"wo"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"other"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const second = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: second.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .splitBlock()\n    .apply()\n\n  const updated = next.document.getTexts().last()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.collapseToStartOf(updated).toJS()\n  )\n\n  return next\n}\n"},"with-delete":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"w"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"d"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 1,\n    focusKey: first.key,\n    focusOffset: 3\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .splitBlock()\n    .apply()\n\n  const updated = next.document.getTexts().last()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.collapseToStartOf(updated).toJS()\n  )\n\n  return next\n}\n"},"with-inline":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"wo"}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"rd"}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .splitBlock()\n    .apply()\n\n  const updated = next.document.getTexts().last()\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.collapseToStartOf(updated).toJS()\n  )\n\n  return next\n}\n"}},"remove-mark-at-range":{"whole-word":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"word",marks:[{type:"bold"}]}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: first.length\n  })\n\n  return state\n    .transform()\n    .removeMarkAtRange(range, 'bold')\n    .apply()\n}\n"},"existing-marks":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"word",marks:[{type:"italic"},{type:"bold"}]}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"wo",marks:[{type:"italic"}]},{text:"rd",marks:[{type:"italic"},{type:"bold"}]}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .removeMarkAtRange(range, 'bold')\n    .apply()\n}\n"},"with-plain-object":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"w",marks:[{type:"bold",data:{key:"value"}}]},{text:"ord"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 1\n  })\n\n  return state\n    .transform()\n    .removeMarkAtRange(range, {\n      type: 'bold',\n      data: { key: 'value' }\n    })\n    .apply()\n}\n"},"first-character":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"word",marks:[{type:"bold"}]}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"w"},{text:"ord",marks:[{type:"bold"}]}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 1\n  })\n\n  return state\n    .transform()\n    .removeMarkAtRange(range, 'bold')\n    .apply()\n}\n"},"across-inlines":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",ranges:[{text:"word",marks:[{type:"bold"}]}]}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",ranges:[{text:"another",marks:[{type:"bold"}]}]}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",ranges:[{text:"wo",marks:[{type:"bold"}]},{text:"rd"}]}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",ranges:[{text:"an"},{text:"other",marks:[{type:"bold"}]}]}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const second = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: second.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .removeMarkAtRange(range, 'bold')\n    .apply()\n}\n"},"middle-character":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"word",marks:[{type:"bold"}]}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"w",marks:[{type:"bold"}]},{text:"o"},{text:"rd",marks:[{type:"bold"}]}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 1,\n    focusKey: first.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .removeMarkAtRange(range, 'bold')\n    .apply()\n}\n"},"last-character":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"word",marks:[{type:"bold"}]}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"wor",marks:[{type:"bold"}]},{text:"d"}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: first.length - 1,\n    focusKey: first.key,\n    focusOffset: first.length\n  })\n\n  return state\n    .transform()\n    .removeMarkAtRange(range, 'bold')\n    .apply()\n}\n"},"across-blocks":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"word",marks:[{type:"bold"}]}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"another",marks:[{type:"bold"}]}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"wo",marks:[{type:"bold"}]},{text:"rd"}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"an"},{text:"other",marks:[{type:"bold"}]}]}]}]},index:"\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const second = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: second.key,\n    focusOffset: 2\n  })\n\n  return state\n    .transform()\n    .removeMarkAtRange(range, 'bold')\n    .apply()\n}\n"},"with-mark-object":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",ranges:[{text:"w",marks:[{type:"bold",data:{key:"value"}}]},{text:"ord"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},index:"\nimport { Mark } from '../../../../..'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 0,\n    focusKey: first.key,\n    focusOffset: 1\n  })\n\n  return state\n    .transform()\n    .removeMarkAtRange(range, Mark.create({\n      type: 'bold',\n      data: { key: 'value' }\n    }))\n    .apply()\n}\n"}},"wrap-inline":{"across-blocks":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]},{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"another"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"wo"},{kind:"inline",type:"hashtag",nodes:[{kind:"text",text:"rd"}]}]},{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"hashtag",nodes:[{kind:"text",text:"an"}]},{kind:"text",text:"other"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const second = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: second.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .wrapInline('hashtag')\n    .apply()\n\n  const two = next.document.getTexts().get(1)\n  const three = next.document.getTexts().get(2)\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.merge({\n      anchorKey: two.key,\n      anchorOffset: 0,\n      focusKey: three.key,\n      focusOffset: three.length\n    }).toJS()\n  )\n\n  return next\n}\n"},"across-inlines":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"word"}]},{kind:"inline",type:"link",nodes:[{kind:"text",text:"another"}]}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"wo"}]},{kind:"inline",type:"hashtag",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"rd"}]}]},{kind:"inline",type:"hashtag",nodes:[{kind:"inline",type:"link",nodes:[{kind:"text",text:"an"}]}]},{kind:"inline",type:"link",nodes:[{kind:"text",text:"other"}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const second = texts.last()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 2,\n    focusKey: second.key,\n    focusOffset: 2\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .wrapInline('hashtag')\n    .apply()\n\n  const two = next.document.getTexts().get(1)\n  const three = next.document.getTexts().get(2)\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.merge({\n      anchorKey: two.key,\n      anchorOffset: 0,\n      focusKey: three.key,\n      focusOffset: three.length\n    }).toJS()\n  )\n\n  return next\n}\n"},"nested-block":{input:{nodes:[{kind:"block",type:"quote",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]}]},output:{nodes:[{kind:"block",type:"quote",nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"w"},{kind:"inline",type:"hashtag",nodes:[{kind:"text",text:"or"}]},{kind:"text",text:"d"}]}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 1,\n    focusKey: first.key,\n    focusOffset: 3\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .wrapInline('hashtag')\n    .apply()\n\n  const updated = next.document.getTexts().get(1)\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.merge({\n      anchorKey: updated.key,\n      anchorOffset: 0,\n      focusKey: updated.key,\n      focusOffset: updated.length\n    }).toJS()\n  )\n\n  return next\n}\n"},"single-block":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"w"},{kind:"inline",type:"hashtag",nodes:[{kind:"text",text:"or"}]},{kind:"text",text:"d"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 1,\n    focusKey: first.key,\n    focusOffset: 3\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .wrapInline('hashtag')\n    .apply()\n\n  const updated = next.document.getTexts().get(1)\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.merge({\n      anchorKey: updated.key,\n      anchorOffset: 0,\n      focusKey: updated.key,\n      focusOffset: updated.length\n    }).toJS()\n  )\n\n  return next\n}\n"},twice:{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"before word after"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"before "},{kind:"inline",type:"outer",nodes:[{kind:"inline",type:"inner",nodes:[{kind:"text",text:"word"}]}]},{kind:"text",text:" after"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const text = texts.first()\n  const range = selection.merge({\n    anchorKey: text.key,\n    anchorOffset: 7,\n    focusKey: text.key,\n    focusOffset: 11\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .wrapInline('inner')\n    .wrapInline('outer')\n    .apply()\n\n  const updated = next.document.getTexts().get(1)\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.merge({\n      anchorKey: updated.key,\n      anchorOffset: 0,\n      focusKey: updated.key,\n      focusOffset: updated.length\n    }).toJS()\n  )\n\n  return next\n}\n"
},"with-object":{input:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"word"}]}]},output:{nodes:[{kind:"block",type:"paragraph",nodes:[{kind:"text",text:"w"},{kind:"inline",type:"hashtag",data:{key:"value"},nodes:[{kind:"text",text:"or"}]},{kind:"text",text:"d"}]}]},index:"\nimport assert from 'assert'\n\nexport default function (state) {\n  const { document, selection } = state\n  const texts = document.getTexts()\n  const first = texts.first()\n  const range = selection.merge({\n    anchorKey: first.key,\n    anchorOffset: 1,\n    focusKey: first.key,\n    focusOffset: 3\n  })\n\n  const next = state\n    .transform()\n    .moveTo(range)\n    .wrapInline({\n      type: 'hashtag',\n      data: { key: 'value' }\n    })\n    .apply()\n\n  const updated = next.document.getTexts().get(1)\n\n  assert.deepEqual(\n    next.selection.toJS(),\n    range.merge({\n      anchorKey: updated.key,\n      anchorOffset: 0,\n      focusKey: updated.key,\n      focusOffset: updated.length\n    }).toJS()\n  )\n\n  return next\n}\n"}}}},function(t,e,n){"use strict";function o(t){var e=new r(r._61);return e._81=1,e._65=t,e}var r=n(59);t.exports=r;var s=o(!0),a=o(!1),i=o(null),d=o(void 0),c=o(0),p=o("");r.resolve=function(t){if(t instanceof r)return t;if(null===t)return i;if(void 0===t)return d;if(t===!0)return s;if(t===!1)return a;if(0===t)return c;if(""===t)return p;if("object"==typeof t||"function"==typeof t)try{var e=t.then;if("function"==typeof e)return new r(e.bind(t))}catch(n){return new r(function(t,e){e(n)})}return o(t)},r.all=function(t){var e=Array.prototype.slice.call(t);return new r(function(t,n){function o(a,i){if(i&&("object"==typeof i||"function"==typeof i)){if(i instanceof r&&i.then===r.prototype.then){for(;3===i._81;)i=i._65;return 1===i._81?o(a,i._65):(2===i._81&&n(i._65),void i.then(function(t){o(a,t)},n))}var d=i.then;if("function"==typeof d){var c=new r(d.bind(i));return void c.then(function(t){o(a,t)},n)}}e[a]=i,0===--s&&t(e)}if(0===e.length)return t([]);for(var s=e.length,a=0;a<e.length;a++)o(a,e[a])})},r.reject=function(t){return new r(function(e,n){n(t)})},r.race=function(t){return new r(function(e,n){t.forEach(function(t){r.resolve(t).then(e,n)})})},r.prototype.catch=function(t){return this.then(null,t)}},function(t,e,n){"use strict";function o(){c=!1,i._10=null,i._97=null}function r(t){function e(e){(t.allRejections||a(l[e].error,t.whitelist||d))&&(l[e].displayId=p++,t.onUnhandled?(l[e].logged=!0,t.onUnhandled(l[e].displayId,l[e].error)):(l[e].logged=!0,s(l[e].displayId,l[e].error)))}function n(e){l[e].logged&&(t.onHandled?t.onHandled(l[e].displayId,l[e].error):l[e].onUnhandled||(console.warn("Promise Rejection Handled (id: "+l[e].displayId+"):"),console.warn('  This means you can ignore any previous messages of the form "Possible Unhandled Promise Rejection" with id '+l[e].displayId+".")))}t=t||{},c&&o(),c=!0;var r=0,p=0,l={};i._10=function(t){2===t._81&&l[t._72]&&(l[t._72].logged?n(t._72):clearTimeout(l[t._72].timeout),delete l[t._72])},i._97=function(t,n){0===t._45&&(t._72=r++,l[t._72]={displayId:null,error:n,timeout:setTimeout(e.bind(null,t._72),a(n,d)?100:2e3),logged:!1})}}function s(t,e){console.warn("Possible Unhandled Promise Rejection (id: "+t+"):");var n=(e&&(e.stack||e))+"";n.split("\n").forEach(function(t){console.warn("  "+t)})}function a(t,e){return e.some(function(e){return t instanceof e})}var i=n(59),d=[ReferenceError,TypeError,RangeError],c=!1;e.disable=o,e.enable=r},function(t,e){!function(t){"use strict";function e(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function n(t){return"string"!=typeof t&&(t=String(t)),t}function o(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return x.iterable&&(e[Symbol.iterator]=function(){return e}),e}function r(t){this.map={},t instanceof r?t.forEach(function(t,e){this.append(e,t)},this):t&&Object.getOwnPropertyNames(t).forEach(function(e){this.append(e,t[e])},this)}function s(t){return t.bodyUsed?Promise.reject(new TypeError("Already read")):void(t.bodyUsed=!0)}function a(t){return new Promise(function(e,n){t.onload=function(){e(t.result)},t.onerror=function(){n(t.error)}})}function i(t){var e=new FileReader;return e.readAsArrayBuffer(t),a(e)}function d(t){var e=new FileReader;return e.readAsText(t),a(e)}function c(){return this.bodyUsed=!1,this._initBody=function(t){if(this._bodyInit=t,"string"==typeof t)this._bodyText=t;else if(x.blob&&Blob.prototype.isPrototypeOf(t))this._bodyBlob=t;else if(x.formData&&FormData.prototype.isPrototypeOf(t))this._bodyFormData=t;else if(x.searchParams&&URLSearchParams.prototype.isPrototypeOf(t))this._bodyText=t.toString();else if(t){if(!x.arrayBuffer||!ArrayBuffer.prototype.isPrototypeOf(t))throw new Error("unsupported BodyInit type")}else this._bodyText="";this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):x.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},x.blob?(this.blob=function(){var t=s(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this.blob().then(i)},this.text=function(){var t=s(this);if(t)return t;if(this._bodyBlob)return d(this._bodyBlob);if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)}):this.text=function(){var t=s(this);return t?t:Promise.resolve(this._bodyText)},x.formData&&(this.formData=function(){return this.text().then(u)}),this.json=function(){return this.text().then(JSON.parse)},this}function p(t){var e=t.toUpperCase();return g.indexOf(e)>-1?e:t}function l(t,e){e=e||{};var n=e.body;if(l.prototype.isPrototypeOf(t)){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new r(t.headers)),this.method=t.method,this.mode=t.mode,n||(n=t._bodyInit,t.bodyUsed=!0)}else this.url=t;if(this.credentials=e.credentials||this.credentials||"omit",!e.headers&&this.headers||(this.headers=new r(e.headers)),this.method=p(e.method||this.method||"GET"),this.mode=e.mode||this.mode||null,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&n)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(n)}function u(t){var e=new FormData;return t.trim().split("&").forEach(function(t){if(t){var n=t.split("="),o=n.shift().replace(/\+/g," "),r=n.join("=").replace(/\+/g," ");e.append(decodeURIComponent(o),decodeURIComponent(r))}}),e}function f(t){var e=new r,n=(t.getAllResponseHeaders()||"").trim().split("\n");return n.forEach(function(t){var n=t.trim().split(":"),o=n.shift().trim(),r=n.join(":").trim();e.append(o,r)}),e}function k(t,e){e||(e={}),this.type="default",this.status=e.status,this.ok=this.status>=200&&this.status<300,this.statusText=e.statusText,this.headers=e.headers instanceof r?e.headers:new r(e.headers),this.url=e.url||"",this._initBody(t)}if(!t.fetch){var x={searchParams:"URLSearchParams"in t,iterable:"Symbol"in t&&"iterator"in Symbol,blob:"FileReader"in t&&"Blob"in t&&function(){try{return new Blob,!0}catch(t){return!1}}(),formData:"FormData"in t,arrayBuffer:"ArrayBuffer"in t};r.prototype.append=function(t,o){t=e(t),o=n(o);var r=this.map[t];r||(r=[],this.map[t]=r),r.push(o)},r.prototype.delete=function(t){delete this.map[e(t)]},r.prototype.get=function(t){var n=this.map[e(t)];return n?n[0]:null},r.prototype.getAll=function(t){return this.map[e(t)]||[]},r.prototype.has=function(t){return this.map.hasOwnProperty(e(t))},r.prototype.set=function(t,o){this.map[e(t)]=[n(o)]},r.prototype.forEach=function(t,e){Object.getOwnPropertyNames(this.map).forEach(function(n){this.map[n].forEach(function(o){t.call(e,o,n,this)},this)},this)},r.prototype.keys=function(){var t=[];return this.forEach(function(e,n){t.push(n)}),o(t)},r.prototype.values=function(){var t=[];return this.forEach(function(e){t.push(e)}),o(t)},r.prototype.entries=function(){var t=[];return this.forEach(function(e,n){t.push([n,e])}),o(t)},x.iterable&&(r.prototype[Symbol.iterator]=r.prototype.entries);var g=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];l.prototype.clone=function(){return new l(this)},c.call(l.prototype),c.call(k.prototype),k.prototype.clone=function(){return new k(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new r(this.headers),url:this.url})},k.error=function(){var t=new k(null,{status:0,statusText:""});return t.type="error",t};var y=[301,302,303,307,308];k.redirect=function(t,e){if(y.indexOf(e)===-1)throw new RangeError("Invalid status code");return new k(null,{status:e,headers:{location:t}})},t.Headers=r,t.Request=l,t.Response=k,t.fetch=function(t,e){return new Promise(function(n,o){function r(){return"responseURL"in a?a.responseURL:/^X-Request-URL:/m.test(a.getAllResponseHeaders())?a.getResponseHeader("X-Request-URL"):void 0}var s;s=l.prototype.isPrototypeOf(t)&&!e?t:new l(t,e);var a=new XMLHttpRequest;a.onload=function(){var t={status:a.status,statusText:a.statusText,headers:f(a),url:r()},e="response"in a?a.response:a.responseText;n(new k(e,t))},a.onerror=function(){o(new TypeError("Network request failed"))},a.ontimeout=function(){o(new TypeError("Network request failed"))},a.open(s.method,s.url,!0),"include"===s.credentials&&(a.withCredentials=!0),"responseType"in a&&x.blob&&(a.responseType="blob"),s.headers.forEach(function(t,e){a.setRequestHeader(e,t)}),a.send("undefined"==typeof s._bodyInit?null:s._bodyInit)})},t.fetch.polyfill=!0}}("undefined"!=typeof self?self:this)},function(t,e,n){"use strict";var o=n(5),r=n(57),s={focusDOMComponent:function(){r(o.getNodeFromInstance(this))}};t.exports=s},function(t,e,n){"use strict";function o(){var t=window.opera;return"object"==typeof t&&"function"==typeof t.version&&parseInt(t.version(),10)<=12}function r(t){return(t.ctrlKey||t.altKey||t.metaKey)&&!(t.ctrlKey&&t.altKey)}function s(t){switch(t){case S.topCompositionStart:return K.compositionStart;case S.topCompositionEnd:return K.compositionEnd;case S.topCompositionUpdate:return K.compositionUpdate}}function a(t,e){return t===S.topKeyDown&&e.keyCode===v}function i(t,e){switch(t){case S.topKeyUp:return b.indexOf(e.keyCode)!==-1;case S.topKeyDown:return e.keyCode!==v;case S.topKeyPress:case S.topMouseDown:case S.topBlur:return!0;default:return!1}}function d(t){var e=t.detail;return"object"==typeof e&&"data"in e?e.data:null}function c(t,e,n,o){var r,c;if(w?r=s(t):M?i(t,n)&&(r=K.compositionEnd):a(t,n)&&(r=K.compositionStart),!r)return null;E&&(M||r!==K.compositionStart?r===K.compositionEnd&&M&&(c=M.getData()):M=g.getPooled(o));var p=y.getPooled(r,e,n,o);if(c)p.data=c;else{var l=d(n);null!==l&&(p.data=l)}return k.accumulateTwoPhaseDispatches(p),p}function p(t,e){switch(t){case S.topCompositionEnd:return d(e);case S.topKeyPress:var n=e.which;return n!==_?null:(R=!0,C);case S.topTextInput:var o=e.data;return o===C&&R?null:o;default:return null}}function l(t,e){if(M){if(t===S.topCompositionEnd||i(t,e)){var n=M.getData();return g.release(M),M=null,n}return null}switch(t){case S.topPaste:return null;case S.topKeyPress:return e.which&&!r(e)?String.fromCharCode(e.which):null;case S.topCompositionEnd:return E?null:e.data;default:return null}}function u(t,e,n,o){var r;if(r=O?p(t,n):l(t,n),!r)return null;var s=h.getPooled(K.beforeInput,e,n,o);return s.data=r,k.accumulateTwoPhaseDispatches(s),s}var f=n(11),k=n(21),x=n(6),g=n(119),y=n(157),h=n(160),m=n(13),b=[9,13,27,32],v=229,w=x.canUseDOM&&"CompositionEvent"in window,T=null;x.canUseDOM&&"documentMode"in document&&(T=document.documentMode);var O=x.canUseDOM&&"TextEvent"in window&&!T&&!o(),E=x.canUseDOM&&(!w||T&&T>8&&T<=11),_=32,C=String.fromCharCode(_),S=f.topLevelTypes,K={beforeInput:{phasedRegistrationNames:{bubbled:m({onBeforeInput:null}),captured:m({onBeforeInputCapture:null})},dependencies:[S.topCompositionEnd,S.topKeyPress,S.topTextInput,S.topPaste]},compositionEnd:{phasedRegistrationNames:{bubbled:m({onCompositionEnd:null}),captured:m({onCompositionEndCapture:null})},dependencies:[S.topBlur,S.topCompositionEnd,S.topKeyDown,S.topKeyPress,S.topKeyUp,S.topMouseDown]},compositionStart:{phasedRegistrationNames:{bubbled:m({onCompositionStart:null}),captured:m({onCompositionStartCapture:null})},dependencies:[S.topBlur,S.topCompositionStart,S.topKeyDown,S.topKeyPress,S.topKeyUp,S.topMouseDown]},compositionUpdate:{phasedRegistrationNames:{bubbled:m({onCompositionUpdate:null}),captured:m({onCompositionUpdateCapture:null})},dependencies:[S.topBlur,S.topCompositionUpdate,S.topKeyDown,S.topKeyPress,S.topKeyUp,S.topMouseDown]}},R=!1,M=null,A={eventTypes:K,extractEvents:function(t,e,n,o){return[c(t,e,n,o),u(t,e,n,o)]}};t.exports=A},function(t,e,n){"use strict";var o=n(60),r=n(6),s=(n(7),n(89),n(167)),a=n(96),i=n(100),d=(n(3),i(function(t){return a(t)})),c=!1,p="cssFloat";if(r.canUseDOM){var l=document.createElement("div").style;try{l.font=""}catch(u){c=!0}void 0===document.documentElement.style.cssFloat&&(p="styleFloat")}var f={createMarkupForStyles:function(t,e){var n="";for(var o in t)if(t.hasOwnProperty(o)){var r=t[o];null!=r&&(n+=d(o)+":",n+=s(o,r,e)+";")}return n||null},setValueForStyles:function(t,e,n){var r=t.style;for(var a in e)if(e.hasOwnProperty(a)){var i=s(a,e[a],n);if("float"!==a&&"cssFloat"!==a||(a=p),i)r[a]=i;else{var d=c&&o.shorthandPropertyExpansions[a];if(d)for(var l in d)r[l]="";else r[a]=""}}}};t.exports=f},function(t,e,n){"use strict";function o(t){var e=t.nodeName&&t.nodeName.toLowerCase();return"select"===e||"input"===e&&"file"===t.type}function r(t){var e=O.getPooled(R.change,A,t,E(t));b.accumulateTwoPhaseDispatches(e),T.batchedUpdates(s,e)}function s(t){m.enqueueEvents(t),m.processEventQueue(!1)}function a(t,e){M=t,A=e,M.attachEvent("onchange",r)}function i(){M&&(M.detachEvent("onchange",r),M=null,A=null)}function d(t,e){if(t===K.topChange)return e}function c(t,e,n){t===K.topFocus?(i(),a(e,n)):t===K.topBlur&&i()}function p(t,e){M=t,A=e,P=t.value,N=Object.getOwnPropertyDescriptor(t.constructor.prototype,"value"),Object.defineProperty(M,"value",q),M.attachEvent?M.attachEvent("onpropertychange",u):M.addEventListener("propertychange",u,!1)}function l(){M&&(delete M.value,M.detachEvent?M.detachEvent("onpropertychange",u):M.removeEventListener("propertychange",u,!1),M=null,A=null,P=null,N=null)}function u(t){if("value"===t.propertyName){var e=t.srcElement.value;e!==P&&(P=e,r(t))}}function f(t,e){if(t===K.topInput)return e}function k(t,e,n){t===K.topFocus?(l(),p(e,n)):t===K.topBlur&&l()}function x(t,e){if((t===K.topSelectionChange||t===K.topKeyUp||t===K.topKeyDown)&&M&&M.value!==P)return P=M.value,A}function g(t){return t.nodeName&&"input"===t.nodeName.toLowerCase()&&("checkbox"===t.type||"radio"===t.type)}function y(t,e){if(t===K.topClick)return e}var h=n(11),m=n(20),b=n(21),v=n(6),w=n(5),T=n(10),O=n(12),E=n(51),_=n(52),C=n(85),S=n(13),K=h.topLevelTypes,R={change:{phasedRegistrationNames:{bubbled:S({onChange:null}),captured:S({onChangeCapture:null})},dependencies:[K.topBlur,K.topChange,K.topClick,K.topFocus,K.topInput,K.topKeyDown,K.topKeyUp,K.topSelectionChange]}},M=null,A=null,P=null,N=null,I=!1;v.canUseDOM&&(I=_("change")&&(!("documentMode"in document)||document.documentMode>8));var D=!1;v.canUseDOM&&(D=_("input")&&(!("documentMode"in document)||document.documentMode>11));var q={get:function(){return N.get.call(this)},set:function(t){P=""+t,N.set.call(this,t)}},J={eventTypes:R,extractEvents:function(t,e,n,r){var s,a,i=e?w.getNodeFromInstance(e):window;if(o(i)?I?s=d:a=c:C(i)?D?s=f:(s=x,a=k):g(i)&&(s=y),s){var p=s(t,e);if(p){var l=O.getPooled(R.change,p,n,r);return l.type="change",b.accumulateTwoPhaseDispatches(l),l}}a&&a(t,i,e)}};t.exports=J},function(t,e,n){"use strict";var o=n(2),r=n(16),s=n(6),a=n(92),i=n(8),d=(n(1),{dangerouslyReplaceNodeWithMarkup:function(t,e){if(s.canUseDOM?void 0:o("56"),e?void 0:o("57"),"HTML"===t.nodeName?o("58"):void 0,"string"==typeof e){var n=a(e,i)[0];t.parentNode.replaceChild(n,t)}else r.replaceChildWithTree(t,e)}});t.exports=d},function(t,e,n){"use strict";var o=n(13),r=[o({ResponderEventPlugin:null}),o({SimpleEventPlugin:null}),o({TapEventPlugin:null}),o({EnterLeaveEventPlugin:null}),o({ChangeEventPlugin:null}),o({SelectEventPlugin:null}),o({BeforeInputEventPlugin:null})];t.exports=r},function(t,e,n){"use strict";var o=n(11),r=n(21),s=n(5),a=n(28),i=n(13),d=o.topLevelTypes,c={mouseEnter:{registrationName:i({onMouseEnter:null}),dependencies:[d.topMouseOut,d.topMouseOver]},mouseLeave:{registrationName:i({onMouseLeave:null}),dependencies:[d.topMouseOut,d.topMouseOver]}},p={eventTypes:c,extractEvents:function(t,e,n,o){if(t===d.topMouseOver&&(n.relatedTarget||n.fromElement))return null;if(t!==d.topMouseOut&&t!==d.topMouseOver)return null;var i;if(o.window===o)i=o;else{var p=o.ownerDocument;i=p?p.defaultView||p.parentWindow:window}var l,u;if(t===d.topMouseOut){l=e;var f=n.relatedTarget||n.toElement;u=f?s.getClosestInstanceFromNode(f):null}else l=null,u=e;if(l===u)return null;var k=null==l?i:s.getNodeFromInstance(l),x=null==u?i:s.getNodeFromInstance(u),g=a.getPooled(c.mouseLeave,l,n,o);g.type="mouseleave",g.target=k,g.relatedTarget=x;var y=a.getPooled(c.mouseEnter,u,n,o);return y.type="mouseenter",y.target=x,y.relatedTarget=k,r.accumulateEnterLeaveDispatches(g,y,l,u),[g,y]}};t.exports=p},function(t,e,n){"use strict";function o(t){this._root=t,this._startText=this.getText(),this._fallbackText=null}var r=n(4),s=n(14),a=n(83);r(o.prototype,{destructor:function(){this._root=null,this._startText=null,this._fallbackText=null},getText:function(){return"value"in this._root?this._root.value:this._root[a()]},getData:function(){if(this._fallbackText)return this._fallbackText;var t,e,n=this._startText,o=n.length,r=this.getText(),s=r.length;for(t=0;t<o&&n[t]===r[t];t++);var a=o-t;for(e=1;e<=a&&n[o-e]===r[s-e];e++);var i=e>1?1-e:void 0;return this._fallbackText=r.slice(t,i),this._fallbackText}}),s.addPoolingTo(o),t.exports=o},function(t,e,n){"use strict";var o=n(17),r=o.injection.MUST_USE_PROPERTY,s=o.injection.HAS_BOOLEAN_VALUE,a=o.injection.HAS_NUMERIC_VALUE,i=o.injection.HAS_POSITIVE_NUMERIC_VALUE,d=o.injection.HAS_OVERLOADED_BOOLEAN_VALUE,c={isCustomAttribute:RegExp.prototype.test.bind(new RegExp("^(data|aria)-["+o.ATTRIBUTE_NAME_CHAR+"]*$")),Properties:{accept:0,acceptCharset:0,accessKey:0,action:0,allowFullScreen:s,allowTransparency:0,alt:0,async:s,autoComplete:0,autoPlay:s,capture:s,cellPadding:0,cellSpacing:0,charSet:0,challenge:0,checked:r|s,cite:0,classID:0,className:0,cols:i,colSpan:0,content:0,contentEditable:0,contextMenu:0,controls:s,coords:0,crossOrigin:0,data:0,dateTime:0,default:s,defer:s,dir:0,disabled:s,download:d,draggable:0,encType:0,form:0,formAction:0,formEncType:0,formMethod:0,formNoValidate:s,formTarget:0,frameBorder:0,headers:0,height:0,hidden:s,high:0,href:0,hrefLang:0,htmlFor:0,httpEquiv:0,icon:0,id:0,inputMode:0,integrity:0,is:0,keyParams:0,keyType:0,kind:0,label:0,lang:0,list:0,loop:s,low:0,manifest:0,marginHeight:0,marginWidth:0,max:0,maxLength:0,media:0,mediaGroup:0,method:0,min:0,minLength:0,multiple:r|s,muted:r|s,name:0,nonce:0,noValidate:s,open:s,optimum:0,pattern:0,placeholder:0,poster:0,preload:0,profile:0,radioGroup:0,readOnly:s,referrerPolicy:0,rel:0,required:s,reversed:s,role:0,rows:i,rowSpan:a,sandbox:0,scope:0,scoped:s,scrolling:0,seamless:s,selected:r|s,shape:0,size:i,sizes:0,span:i,spellCheck:0,src:0,srcDoc:0,srcLang:0,srcSet:0,start:a,step:0,style:0,summary:0,tabIndex:0,target:0,title:0,type:0,useMap:0,value:0,width:0,wmode:0,wrap:0,about:0,datatype:0,inlist:0,prefix:0,property:0,resource:0,typeof:0,vocab:0,autoCapitalize:0,autoCorrect:0,autoSave:0,color:0,itemProp:0,itemScope:s,itemType:0,itemID:0,itemRef:0,results:0,security:0,unselectable:0},DOMAttributeNames:{acceptCharset:"accept-charset",className:"class",htmlFor:"for",httpEquiv:"http-equiv"},DOMPropertyNames:{}};t.exports=c},function(t,e,n){"use strict";var o=n(4),r=n(63),s=n(39),a=n(147),i=n(64),d=n(129),c=n(9),p=n(75),l=n(76),u=n(173),f=(n(3),c.createElement),k=c.createFactory,x=c.cloneElement,g=o,y={Children:{map:r.map,forEach:r.forEach,count:r.count,toArray:r.toArray,only:u},Component:s,PureComponent:a,createElement:f,cloneElement:x,isValidElement:c.isValidElement,PropTypes:p,createClass:i.createClass,createFactory:k,createMixin:function(t){return t},DOM:d,version:l,__spread:g};t.exports=y},function(t,e,n){(function(e){"use strict";function o(t,e,n,o){var r=void 0===t[n];null!=e&&r&&(t[n]=s(e,!0))}var r=n(18),s=n(84),a=(n(37),n(53)),i=n(54);n(3);"undefined"!=typeof e&&e.env,1;var d={instantiateChildren:function(t,e,n,r){if(null==t)return null;var s={};return i(t,o,s),s},updateChildren:function(t,e,n,o,i,d,c,p){if(e||t){var l,u;for(l in e)if(e.hasOwnProperty(l)){u=t&&t[l];var f=u&&u._currentElement,k=e[l];if(null!=u&&a(f,k))r.receiveComponent(u,k,i,p),e[l]=u;else{u&&(o[l]=r.getHostNode(u),r.unmountComponent(u,!1));var x=s(k,!0);e[l]=x;var g=r.mountComponent(x,i,d,c,p);n.push(g)}}for(l in t)!t.hasOwnProperty(l)||e&&e.hasOwnProperty(l)||(u=t[l],o[l]=r.getHostNode(u),r.unmountComponent(u,!1))}},unmountChildren:function(t,e){for(var n in t)if(t.hasOwnProperty(n)){var o=t[n];r.unmountComponent(o,e)}}};t.exports=d}).call(e,n(32))},function(t,e,n){"use strict";function o(t){}function r(t,e){}function s(t){return!(!t.prototype||!t.prototype.isReactComponent)}function a(t){return!(!t.prototype||!t.prototype.isPureReactComponent)}var i=n(2),d=n(4),c=n(40),p=n(15),l=n(9),u=n(42),f=n(22),k=(n(7),n(74)),x=(n(45),n(18)),g=n(166),y=n(19),h=(n(1),n(31)),m=n(53),b=(n(3),{ImpureClass:0,PureClass:1,StatelessFunctional:2});o.prototype.render=function(){var t=f.get(this)._currentElement.type,e=t(this.props,this.context,this.updater);return r(t,e),e};var v=1,w={construct:function(t){this._currentElement=t,this._rootNodeID=null,this._compositeType=null,this._instance=null,this._hostParent=null,this._hostContainerInfo=null,this._updateBatchNumber=null,this._pendingElement=null,this._pendingStateQueue=null,this._pendingReplaceState=!1,this._pendingForceUpdate=!1,this._renderedNodeType=null,this._renderedComponent=null,this._context=null,this._mountOrder=0,this._topLevelWrapper=null,this._pendingCallbacks=null,this._calledComponentWillUnmount=!1},mountComponent:function(t,e,n,d){this._context=d,this._mountOrder=v++,this._hostParent=e,this._hostContainerInfo=n;var c,p=this._currentElement.props,u=this._processContext(d),k=this._currentElement.type,x=t.getUpdateQueue(),g=s(k),h=this._constructComponent(g,p,u,x);g||null!=h&&null!=h.render?a(k)?this._compositeType=b.PureClass:this._compositeType=b.ImpureClass:(c=h,r(k,c),null===h||h===!1||l.isValidElement(h)?void 0:i("105",k.displayName||k.name||"Component"),h=new o(k),this._compositeType=b.StatelessFunctional);h.props=p,h.context=u,h.refs=y,h.updater=x,this._instance=h,f.set(h,this);var m=h.state;void 0===m&&(h.state=m=null),"object"!=typeof m||Array.isArray(m)?i("106",this.getName()||"ReactCompositeComponent"):void 0,this._pendingStateQueue=null,this._pendingReplaceState=!1,this._pendingForceUpdate=!1;var w;w=h.unstable_handleError?this.performInitialMountWithErrorHandling(c,e,n,t,d):this.performInitialMount(c,e,n,t,d),h.componentDidMount&&t.getReactMountReady().enqueue(h.componentDidMount,h);return w},_constructComponent:function(t,e,n,o){return this._constructComponentWithoutOwner(t,e,n,o)},_constructComponentWithoutOwner:function(t,e,n,o){var r,s=this._currentElement.type;return r=t?new s(e,n,o):s(e,n,o)},performInitialMountWithErrorHandling:function(t,e,n,o,r){var s,a=o.checkpoint();try{s=this.performInitialMount(t,e,n,o,r)}catch(i){o.rollback(a),this._instance.unstable_handleError(i),this._pendingStateQueue&&(this._instance.state=this._processPendingState(this._instance.props,this._instance.context)),a=o.checkpoint(),this._renderedComponent.unmountComponent(!0),o.rollback(a),s=this.performInitialMount(t,e,n,o,r)}return s},performInitialMount:function(t,e,n,o,r){var s=this._instance;s.componentWillMount&&(s.componentWillMount(),this._pendingStateQueue&&(s.state=this._processPendingState(s.props,s.context))),void 0===t&&(t=this._renderValidatedComponent());var a=k.getType(t);this._renderedNodeType=a;var i=this._instantiateReactComponent(t,a!==k.EMPTY);this._renderedComponent=i;var d=x.mountComponent(i,o,e,n,this._processChildContext(r));return d},getHostNode:function(){return x.getHostNode(this._renderedComponent)},unmountComponent:function(t){if(this._renderedComponent){var e=this._instance;if(e.componentWillUnmount&&!e._calledComponentWillUnmount)if(e._calledComponentWillUnmount=!0,t){var n=this.getName()+".componentWillUnmount()";u.invokeGuardedCallback(n,e.componentWillUnmount.bind(e))}else e.componentWillUnmount();this._renderedComponent&&(x.unmountComponent(this._renderedComponent,t),this._renderedNodeType=null,this._renderedComponent=null,this._instance=null),this._pendingStateQueue=null,this._pendingReplaceState=!1,this._pendingForceUpdate=!1,this._pendingCallbacks=null,this._pendingElement=null,this._context=null,this._rootNodeID=null,this._topLevelWrapper=null,f.remove(e)}},_maskContext:function(t){var e=this._currentElement.type,n=e.contextTypes;if(!n)return y;var o={};for(var r in n)o[r]=t[r];return o},_processContext:function(t){var e=this._maskContext(t);return e},_processChildContext:function(t){var e=this._currentElement.type,n=this._instance,o=n.getChildContext&&n.getChildContext();if(o){"object"!=typeof e.childContextTypes?i("107",this.getName()||"ReactCompositeComponent"):void 0;for(var r in o)r in e.childContextTypes?void 0:i("108",this.getName()||"ReactCompositeComponent",r);return d({},t,o)}return t},_checkContextTypes:function(t,e,n){g(t,e,n,this.getName(),null,this._debugID)},receiveComponent:function(t,e,n){var o=this._currentElement,r=this._context;this._pendingElement=null,this.updateComponent(e,o,t,r,n)},performUpdateIfNecessary:function(t){null!=this._pendingElement?x.receiveComponent(this,this._pendingElement,t,this._context):null!==this._pendingStateQueue||this._pendingForceUpdate?this.updateComponent(t,this._currentElement,this._currentElement,this._context,this._context):this._updateBatchNumber=null},updateComponent:function(t,e,n,o,r){var s=this._instance;null==s?i("136",this.getName()||"ReactCompositeComponent"):void 0;var a,d=!1;this._context===r?a=s.context:(a=this._processContext(r),d=!0);var c=e.props,p=n.props;e!==n&&(d=!0),d&&s.componentWillReceiveProps&&s.componentWillReceiveProps(p,a);var l=this._processPendingState(p,a),u=!0;this._pendingForceUpdate||(s.shouldComponentUpdate?u=s.shouldComponentUpdate(p,l,a):this._compositeType===b.PureClass&&(u=!h(c,p)||!h(s.state,l))),this._updateBatchNumber=null,u?(this._pendingForceUpdate=!1,this._performComponentUpdate(n,p,l,a,t,r)):(this._currentElement=n,this._context=r,s.props=p,s.state=l,s.context=a)},_processPendingState:function(t,e){var n=this._instance,o=this._pendingStateQueue,r=this._pendingReplaceState;if(this._pendingReplaceState=!1,this._pendingStateQueue=null,!o)return n.state;if(r&&1===o.length)return o[0];for(var s=d({},r?o[0]:n.state),a=r?1:0;a<o.length;a++){var i=o[a];d(s,"function"==typeof i?i.call(n,s,t,e):i)}return s},_performComponentUpdate:function(t,e,n,o,r,s){var a,i,d,c=this._instance,p=Boolean(c.componentDidUpdate);p&&(a=c.props,i=c.state,d=c.context),c.componentWillUpdate&&c.componentWillUpdate(e,n,o),this._currentElement=t,this._context=s,c.props=e,c.state=n,c.context=o,this._updateRenderedComponent(r,s),p&&r.getReactMountReady().enqueue(c.componentDidUpdate.bind(c,a,i,d),c)},_updateRenderedComponent:function(t,e){var n=this._renderedComponent,o=n._currentElement,r=this._renderValidatedComponent();if(m(o,r))x.receiveComponent(n,r,t,this._processChildContext(e));else{var s=x.getHostNode(n);x.unmountComponent(n,!1);var a=k.getType(r);this._renderedNodeType=a;var i=this._instantiateReactComponent(r,a!==k.EMPTY);this._renderedComponent=i;var d=x.mountComponent(i,t,this._hostParent,this._hostContainerInfo,this._processChildContext(e));this._replaceNodeWithMarkup(s,d,n)}},_replaceNodeWithMarkup:function(t,e,n){c.replaceNodeWithMarkup(t,e,n)},_renderValidatedComponentWithoutOwnerOrContext:function(){var t=this._instance,e=t.render();return e},_renderValidatedComponent:function(){var t;if(this._compositeType!==b.StatelessFunctional){p.current=this;try{t=this._renderValidatedComponentWithoutOwnerOrContext()}finally{p.current=null}}else t=this._renderValidatedComponentWithoutOwnerOrContext();return null===t||t===!1||l.isValidElement(t)?void 0:i("109",this.getName()||"ReactCompositeComponent"),t},attachRef:function(t,e){var n=this.getPublicInstance();null==n?i("110"):void 0;var o=e.getPublicInstance(),r=n.refs===y?n.refs={}:n.refs;r[t]=o},detachRef:function(t){var e=this.getPublicInstance().refs;delete e[t]},getName:function(){var t=this._currentElement.type,e=this._instance&&this._instance.constructor;return t.displayName||e&&e.displayName||t.name||e&&e.name||null},getPublicInstance:function(){var t=this._instance;return this._compositeType===b.StatelessFunctional?null:t},_instantiateReactComponent:null},T={Mixin:w};t.exports=T},function(t,e,n){"use strict";var o=n(5),r=n(140),s=n(72),a=n(18),i=n(10),d=n(76),c=n(168),p=n(81),l=n(175);n(3);r.inject();var u={findDOMNode:c,render:s.render,unmountComponentAtNode:s.unmountComponentAtNode,version:d,unstable_batchedUpdates:i.batchedUpdates,unstable_renderSubtreeIntoContainer:l};"undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject&&__REACT_DEVTOOLS_GLOBAL_HOOK__.inject({ComponentTree:{getClosestInstanceFromNode:o.getClosestInstanceFromNode,getNodeFromInstance:function(t){return t._renderedComponent&&(t=p(t)),t?o.getNodeFromInstance(t):null}},Mount:s,Reconciler:a});t.exports=u},function(t,e,n){"use strict";var o=n(26),r={getHostProps:o.getHostProps};t.exports=r},function(t,e,n){"use strict";function o(t){if(t){var e=t._currentElement._owner||null;if(e){var n=e.getName();if(n)return" This DOM node was rendered by `"+n+"`."}}return""}function r(t,e){e&&($[t._tag]&&(null!=e.children||null!=e.dangerouslySetInnerHTML?x("137",t._tag,t._currentElement._owner?" Check the render method of "+t._currentElement._owner.getName()+".":""):void 0),null!=e.dangerouslySetInnerHTML&&(null!=e.children?x("60"):void 0,"object"==typeof e.dangerouslySetInnerHTML&&W in e.dangerouslySetInnerHTML?void 0:x("61")),null!=e.style&&"object"!=typeof e.style?x("62",o(t)):void 0)}function s(t,e,n,o){if(!(o instanceof D)){var r=t._hostContainerInfo,s=r._node&&r._node.nodeType===Y,i=s?r._node:r._ownerDocument;B(e,i),o.getReactMountReady().enqueue(a,{inst:t,registrationName:e,listener:n})}}function a(){var t=this;O.putListener(t.inst,t.registrationName,t.listener)}function i(){var t=this;M.postMountWrapper(t)}function d(){var t=this;N.postMountWrapper(t)}function c(){var t=this;A.postMountWrapper(t)}function p(){var t=this;t._rootNodeID?void 0:x("63");var e=U(t);switch(e?void 0:x("64"),t._tag){case"iframe":case"object":t._wrapperState.listeners=[_.trapBubbledEvent(T.topLevelTypes.topLoad,"load",e)];break;case"video":case"audio":t._wrapperState.listeners=[];for(var n in G)G.hasOwnProperty(n)&&t._wrapperState.listeners.push(_.trapBubbledEvent(T.topLevelTypes[n],G[n],e));break;case"source":t._wrapperState.listeners=[_.trapBubbledEvent(T.topLevelTypes.topError,"error",e)];break;case"img":t._wrapperState.listeners=[_.trapBubbledEvent(T.topLevelTypes.topError,"error",e),_.trapBubbledEvent(T.topLevelTypes.topLoad,"load",e)];break;case"form":t._wrapperState.listeners=[_.trapBubbledEvent(T.topLevelTypes.topReset,"reset",e),_.trapBubbledEvent(T.topLevelTypes.topSubmit,"submit",e)];break;case"input":
case"select":case"textarea":t._wrapperState.listeners=[_.trapBubbledEvent(T.topLevelTypes.topInvalid,"invalid",e)]}}function l(){P.postUpdateWrapper(this)}function u(t){et.call(tt,t)||(Z.test(t)?void 0:x("65",t),tt[t]=!0)}function f(t,e){return t.indexOf("-")>=0||null!=e.is}function k(t){var e=t.type;u(e),this._currentElement=t,this._tag=e.toLowerCase(),this._namespaceURI=null,this._renderedChildren=null,this._previousStyle=null,this._previousStyleCopy=null,this._hostNode=null,this._hostParent=null,this._rootNodeID=null,this._domID=null,this._hostContainerInfo=null,this._wrapperState=null,this._topLevelWrapper=null,this._flags=0}var x=n(2),g=n(4),y=n(112),h=n(114),m=n(16),b=n(34),v=n(17),w=n(62),T=n(11),O=n(20),E=n(35),_=n(27),C=n(65),S=n(125),K=n(66),R=n(5),M=n(132),A=n(134),P=n(67),N=n(137),I=(n(7),n(145)),D=n(150),q=(n(8),n(29)),J=(n(1),n(52),n(13)),L=(n(31),n(55),n(3),K),F=O.deleteListener,U=R.getNodeFromInstance,B=_.listenTo,j=E.registrationNameModules,V={string:!0,number:!0},H=J({style:null}),W=J({__html:null}),z={children:null,dangerouslySetInnerHTML:null,suppressContentEditableWarning:null},Y=11,G={topAbort:"abort",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topSeeked:"seeked",topSeeking:"seeking",topStalled:"stalled",topSuspend:"suspend",topTimeUpdate:"timeupdate",topVolumeChange:"volumechange",topWaiting:"waiting"},X={area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0},Q={listing:!0,pre:!0,textarea:!0},$=g({menuitem:!0},X),Z=/^[a-zA-Z][a-zA-Z:_\.\-\d]*$/,tt={},et={}.hasOwnProperty,nt=1;k.displayName="ReactDOMComponent",k.Mixin={mountComponent:function(t,e,n,o){this._rootNodeID=nt++,this._domID=n._idCounter++,this._hostParent=e,this._hostContainerInfo=n;var s=this._currentElement.props;switch(this._tag){case"audio":case"form":case"iframe":case"img":case"link":case"object":case"source":case"video":this._wrapperState={listeners:null},t.getReactMountReady().enqueue(p,this);break;case"button":s=S.getHostProps(this,s,e);break;case"input":M.mountWrapper(this,s,e),s=M.getHostProps(this,s),t.getReactMountReady().enqueue(p,this);break;case"option":A.mountWrapper(this,s,e),s=A.getHostProps(this,s);break;case"select":P.mountWrapper(this,s,e),s=P.getHostProps(this,s),t.getReactMountReady().enqueue(p,this);break;case"textarea":N.mountWrapper(this,s,e),s=N.getHostProps(this,s),t.getReactMountReady().enqueue(p,this)}r(this,s);var a,l;null!=e?(a=e._namespaceURI,l=e._tag):n._tag&&(a=n._namespaceURI,l=n._tag),(null==a||a===b.svg&&"foreignobject"===l)&&(a=b.html),a===b.html&&("svg"===this._tag?a=b.svg:"math"===this._tag&&(a=b.mathml)),this._namespaceURI=a;var u;if(t.useCreateElement){var f,k=n._ownerDocument;if(a===b.html)if("script"===this._tag){var x=k.createElement("div"),g=this._currentElement.type;x.innerHTML="<"+g+"></"+g+">",f=x.removeChild(x.firstChild)}else f=s.is?k.createElement(this._currentElement.type,s.is):k.createElement(this._currentElement.type);else f=k.createElementNS(a,this._currentElement.type);R.precacheNode(this,f),this._flags|=L.hasCachedChildNodes,this._hostParent||w.setAttributeForRoot(f),this._updateDOMProperties(null,s,t);var h=m(f);this._createInitialChildren(t,s,o,h),u=h}else{var v=this._createOpenTagMarkupAndPutListeners(t,s),T=this._createContentMarkup(t,s,o);u=!T&&X[this._tag]?v+"/>":v+">"+T+"</"+this._currentElement.type+">"}switch(this._tag){case"input":t.getReactMountReady().enqueue(i,this),s.autoFocus&&t.getReactMountReady().enqueue(y.focusDOMComponent,this);break;case"textarea":t.getReactMountReady().enqueue(d,this),s.autoFocus&&t.getReactMountReady().enqueue(y.focusDOMComponent,this);break;case"select":s.autoFocus&&t.getReactMountReady().enqueue(y.focusDOMComponent,this);break;case"button":s.autoFocus&&t.getReactMountReady().enqueue(y.focusDOMComponent,this);break;case"option":t.getReactMountReady().enqueue(c,this)}return u},_createOpenTagMarkupAndPutListeners:function(t,e){var n="<"+this._currentElement.type;for(var o in e)if(e.hasOwnProperty(o)){var r=e[o];if(null!=r)if(j.hasOwnProperty(o))r&&s(this,o,r,t);else{o===H&&(r&&(r=this._previousStyleCopy=g({},e.style)),r=h.createMarkupForStyles(r,this));var a=null;null!=this._tag&&f(this._tag,e)?z.hasOwnProperty(o)||(a=w.createMarkupForCustomAttribute(o,r)):a=w.createMarkupForProperty(o,r),a&&(n+=" "+a)}}return t.renderToStaticMarkup?n:(this._hostParent||(n+=" "+w.createMarkupForRoot()),n+=" "+w.createMarkupForID(this._domID))},_createContentMarkup:function(t,e,n){var o="",r=e.dangerouslySetInnerHTML;if(null!=r)null!=r.__html&&(o=r.__html);else{var s=V[typeof e.children]?e.children:null,a=null!=s?null:e.children;if(null!=s)o=q(s);else if(null!=a){var i=this.mountChildren(a,t,n);o=i.join("")}}return Q[this._tag]&&"\n"===o.charAt(0)?"\n"+o:o},_createInitialChildren:function(t,e,n,o){var r=e.dangerouslySetInnerHTML;if(null!=r)null!=r.__html&&m.queueHTML(o,r.__html);else{var s=V[typeof e.children]?e.children:null,a=null!=s?null:e.children;if(null!=s)m.queueText(o,s);else if(null!=a)for(var i=this.mountChildren(a,t,n),d=0;d<i.length;d++)m.queueChild(o,i[d])}},receiveComponent:function(t,e,n){var o=this._currentElement;this._currentElement=t,this.updateComponent(e,o,t,n)},updateComponent:function(t,e,n,o){var s=e.props,a=this._currentElement.props;switch(this._tag){case"button":s=S.getHostProps(this,s),a=S.getHostProps(this,a);break;case"input":M.updateWrapper(this),s=M.getHostProps(this,s),a=M.getHostProps(this,a);break;case"option":s=A.getHostProps(this,s),a=A.getHostProps(this,a);break;case"select":s=P.getHostProps(this,s),a=P.getHostProps(this,a);break;case"textarea":N.updateWrapper(this),s=N.getHostProps(this,s),a=N.getHostProps(this,a)}r(this,a),this._updateDOMProperties(s,a,t),this._updateDOMChildren(s,a,t,o),"select"===this._tag&&t.getReactMountReady().enqueue(l,this)},_updateDOMProperties:function(t,e,n){var o,r,a;for(o in t)if(!e.hasOwnProperty(o)&&t.hasOwnProperty(o)&&null!=t[o])if(o===H){var i=this._previousStyleCopy;for(r in i)i.hasOwnProperty(r)&&(a=a||{},a[r]="");this._previousStyleCopy=null}else j.hasOwnProperty(o)?t[o]&&F(this,o):f(this._tag,t)?z.hasOwnProperty(o)||w.deleteValueForAttribute(U(this),o):(v.properties[o]||v.isCustomAttribute(o))&&w.deleteValueForProperty(U(this),o);for(o in e){var d=e[o],c=o===H?this._previousStyleCopy:null!=t?t[o]:void 0;if(e.hasOwnProperty(o)&&d!==c&&(null!=d||null!=c))if(o===H)if(d?d=this._previousStyleCopy=g({},d):this._previousStyleCopy=null,c){for(r in c)!c.hasOwnProperty(r)||d&&d.hasOwnProperty(r)||(a=a||{},a[r]="");for(r in d)d.hasOwnProperty(r)&&c[r]!==d[r]&&(a=a||{},a[r]=d[r])}else a=d;else if(j.hasOwnProperty(o))d?s(this,o,d,n):c&&F(this,o);else if(f(this._tag,e))z.hasOwnProperty(o)||w.setValueForAttribute(U(this),o,d);else if(v.properties[o]||v.isCustomAttribute(o)){var p=U(this);null!=d?w.setValueForProperty(p,o,d):w.deleteValueForProperty(p,o)}}a&&h.setValueForStyles(U(this),a,this)},_updateDOMChildren:function(t,e,n,o){var r=V[typeof t.children]?t.children:null,s=V[typeof e.children]?e.children:null,a=t.dangerouslySetInnerHTML&&t.dangerouslySetInnerHTML.__html,i=e.dangerouslySetInnerHTML&&e.dangerouslySetInnerHTML.__html,d=null!=r?null:t.children,c=null!=s?null:e.children,p=null!=r||null!=a,l=null!=s||null!=i;null!=d&&null==c?this.updateChildren(null,n,o):p&&!l&&this.updateTextContent(""),null!=s?r!==s&&this.updateTextContent(""+s):null!=i?a!==i&&this.updateMarkup(""+i):null!=c&&this.updateChildren(c,n,o)},getHostNode:function(){return U(this)},unmountComponent:function(t){switch(this._tag){case"audio":case"form":case"iframe":case"img":case"link":case"object":case"source":case"video":var e=this._wrapperState.listeners;if(e)for(var n=0;n<e.length;n++)e[n].remove();break;case"html":case"head":case"body":x("66",this._tag)}this.unmountChildren(t),R.uncacheNode(this),O.deleteAllListeners(this),C.unmountIDFromEnvironment(this._rootNodeID),this._rootNodeID=null,this._domID=null,this._wrapperState=null},getPublicInstance:function(){return U(this)}},g(k.prototype,k.Mixin,I.Mixin),t.exports=k},function(t,e,n){"use strict";function o(t,e){var n={_topLevelWrapper:t,_idCounter:1,_ownerDocument:e?e.nodeType===r?e:e.ownerDocument:null,_node:e,_tag:e?e.nodeName.toLowerCase():null,_namespaceURI:e?e.namespaceURI:null};return n}var r=(n(55),9);t.exports=o},function(t,e,n){"use strict";var o=n(4),r=n(16),s=n(5),a=function(t){this._currentElement=null,this._hostNode=null,this._hostParent=null,this._hostContainerInfo=null,this._domID=null};o(a.prototype,{mountComponent:function(t,e,n,o){var a=n._idCounter++;this._domID=a,this._hostParent=e,this._hostContainerInfo=n;var i=" react-empty: "+this._domID+" ";if(t.useCreateElement){var d=n._ownerDocument,c=d.createComment(i);return s.precacheNode(this,c),r(c)}return t.renderToStaticMarkup?"":"<!--"+i+"-->"},receiveComponent:function(){},getHostNode:function(){return s.getNodeFromInstance(this)},unmountComponent:function(){s.uncacheNode(this)}}),t.exports=a},function(t,e,n){"use strict";function o(t){return r.createFactory(t)}var r=n(9),s=n(99),a=s({a:"a",abbr:"abbr",address:"address",area:"area",article:"article",aside:"aside",audio:"audio",b:"b",base:"base",bdi:"bdi",bdo:"bdo",big:"big",blockquote:"blockquote",body:"body",br:"br",button:"button",canvas:"canvas",caption:"caption",cite:"cite",code:"code",col:"col",colgroup:"colgroup",data:"data",datalist:"datalist",dd:"dd",del:"del",details:"details",dfn:"dfn",dialog:"dialog",div:"div",dl:"dl",dt:"dt",em:"em",embed:"embed",fieldset:"fieldset",figcaption:"figcaption",figure:"figure",footer:"footer",form:"form",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",head:"head",header:"header",hgroup:"hgroup",hr:"hr",html:"html",i:"i",iframe:"iframe",img:"img",input:"input",ins:"ins",kbd:"kbd",keygen:"keygen",label:"label",legend:"legend",li:"li",link:"link",main:"main",map:"map",mark:"mark",menu:"menu",menuitem:"menuitem",meta:"meta",meter:"meter",nav:"nav",noscript:"noscript",object:"object",ol:"ol",optgroup:"optgroup",option:"option",output:"output",p:"p",param:"param",picture:"picture",pre:"pre",progress:"progress",q:"q",rp:"rp",rt:"rt",ruby:"ruby",s:"s",samp:"samp",script:"script",section:"section",select:"select",small:"small",source:"source",span:"span",strong:"strong",style:"style",sub:"sub",summary:"summary",sup:"sup",table:"table",tbody:"tbody",td:"td",textarea:"textarea",tfoot:"tfoot",th:"th",thead:"thead",time:"time",title:"title",tr:"tr",track:"track",u:"u",ul:"ul",var:"var",video:"video",wbr:"wbr",circle:"circle",clipPath:"clipPath",defs:"defs",ellipse:"ellipse",g:"g",image:"image",line:"line",linearGradient:"linearGradient",mask:"mask",path:"path",pattern:"pattern",polygon:"polygon",polyline:"polyline",radialGradient:"radialGradient",rect:"rect",stop:"stop",svg:"svg",text:"text",tspan:"tspan"},o);t.exports=a},function(t,e){"use strict";var n={useCreateElement:!0};t.exports=n},function(t,e,n){"use strict";var o=n(33),r=n(5),s={dangerouslyProcessChildrenUpdates:function(t,e){var n=r.getNodeFromInstance(t);o.processUpdates(n,e)}};t.exports=s},function(t,e,n){"use strict";function o(){this._rootNodeID&&u.updateWrapper(this)}function r(t){var e=this._currentElement.props,n=c.executeOnChange(e,t);l.asap(o,this);var r=e.name;if("radio"===e.type&&null!=r){for(var a=p.getNodeFromInstance(this),i=a;i.parentNode;)i=i.parentNode;for(var d=i.querySelectorAll("input[name="+JSON.stringify(""+r)+'][type="radio"]'),u=0;u<d.length;u++){var f=d[u];if(f!==a&&f.form===a.form){var k=p.getInstanceFromNode(f);k?void 0:s("90"),l.asap(o,k)}}}return n}var s=n(2),a=n(4),i=n(26),d=n(62),c=n(38),p=n(5),l=n(10),u=(n(1),n(3),{getHostProps:function(t,e){var n=c.getValue(e),o=c.getChecked(e),r=a({type:void 0,step:void 0},i.getHostProps(t,e),{defaultChecked:void 0,defaultValue:void 0,value:null!=n?n:t._wrapperState.initialValue,checked:null!=o?o:t._wrapperState.initialChecked,onChange:t._wrapperState.onChange});return r},mountWrapper:function(t,e){var n=e.defaultValue;t._wrapperState={initialChecked:null!=e.checked?e.checked:e.defaultChecked,initialValue:null!=e.value?e.value:n,listeners:null,onChange:r.bind(t)}},updateWrapper:function(t){var e=t._currentElement.props,n=e.checked;null!=n&&d.setValueForProperty(p.getNodeFromInstance(t),"checked",n||!1);var o=p.getNodeFromInstance(t),r=c.getValue(e);if(null!=r){var s=""+r;s!==o.value&&(o.value=s)}else null==e.value&&null!=e.defaultValue&&(o.defaultValue=""+e.defaultValue),null==e.checked&&null!=e.defaultChecked&&(o.defaultChecked=!!e.defaultChecked)},postMountWrapper:function(t){var e=t._currentElement.props,n=p.getNodeFromInstance(t);"submit"!==e.type&&"reset"!==e.type&&(n.value=n.value);var o=n.name;""!==o&&(n.name=""),n.defaultChecked=!n.defaultChecked,n.defaultChecked=!n.defaultChecked,""!==o&&(n.name=o)}});t.exports=u},function(t,e,n){"use strict";var o=null;t.exports={debugTool:o}},function(t,e,n){"use strict";function o(t){var e="";return s.forEach(t,function(t){null!=t&&("string"==typeof t||"number"==typeof t?e+=t:d||(d=!0))}),e}var r=n(4),s=n(63),a=n(5),i=n(67),d=(n(3),!1),c={mountWrapper:function(t,e,n){var r=null;if(null!=n){var s=n;"optgroup"===s._tag&&(s=s._hostParent),null!=s&&"select"===s._tag&&(r=i.getSelectValueContext(s))}var a=null;if(null!=r){var d;if(d=null!=e.value?e.value+"":o(e.children),a=!1,Array.isArray(r)){for(var c=0;c<r.length;c++)if(""+r[c]===d){a=!0;break}}else a=""+r===d}t._wrapperState={selected:a}},postMountWrapper:function(t){var e=t._currentElement.props;if(null!=e.value){var n=a.getNodeFromInstance(t);n.setAttribute("value",e.value)}},getHostProps:function(t,e){var n=r({selected:void 0,children:void 0},e);null!=t._wrapperState.selected&&(n.selected=t._wrapperState.selected);var s=o(e.children);return s&&(n.children=s),n}};t.exports=c},function(t,e,n){"use strict";function o(t,e,n,o){return t===n&&e===o}function r(t){var e=document.selection,n=e.createRange(),o=n.text.length,r=n.duplicate();r.moveToElementText(t),r.setEndPoint("EndToStart",n);var s=r.text.length,a=s+o;return{start:s,end:a}}function s(t){var e=window.getSelection&&window.getSelection();if(!e||0===e.rangeCount)return null;var n=e.anchorNode,r=e.anchorOffset,s=e.focusNode,a=e.focusOffset,i=e.getRangeAt(0);try{i.startContainer.nodeType,i.endContainer.nodeType}catch(d){return null}var c=o(e.anchorNode,e.anchorOffset,e.focusNode,e.focusOffset),p=c?0:i.toString().length,l=i.cloneRange();l.selectNodeContents(t),l.setEnd(i.startContainer,i.startOffset);var u=o(l.startContainer,l.startOffset,l.endContainer,l.endOffset),f=u?0:l.toString().length,k=f+p,x=document.createRange();x.setStart(n,r),x.setEnd(s,a);var g=x.collapsed;return{start:g?k:f,end:g?f:k}}function a(t,e){var n,o,r=document.selection.createRange().duplicate();void 0===e.end?(n=e.start,o=n):e.start>e.end?(n=e.end,o=e.start):(n=e.start,o=e.end),r.moveToElementText(t),r.moveStart("character",n),r.setEndPoint("EndToStart",r),r.moveEnd("character",o-n),r.select()}function i(t,e){if(window.getSelection){var n=window.getSelection(),o=t[p()].length,r=Math.min(e.start,o),s=void 0===e.end?r:Math.min(e.end,o);if(!n.extend&&r>s){var a=s;s=r,r=a}var i=c(t,r),d=c(t,s);if(i&&d){var l=document.createRange();l.setStart(i.node,i.offset),n.removeAllRanges(),r>s?(n.addRange(l),n.extend(d.node,d.offset)):(l.setEnd(d.node,d.offset),n.addRange(l))}}}var d=n(6),c=n(171),p=n(83),l=d.canUseDOM&&"selection"in document&&!("getSelection"in window),u={getOffsets:l?r:s,setOffsets:l?a:i};t.exports=u},function(t,e,n){"use strict";var o=n(2),r=n(4),s=n(33),a=n(16),i=n(5),d=(n(7),n(29)),c=(n(1),n(55),function(t){this._currentElement=t,this._stringText=""+t,this._hostNode=null,this._hostParent=null,this._domID=null,this._mountIndex=0,this._closingComment=null,this._commentNodes=null});r(c.prototype,{mountComponent:function(t,e,n,o){var r=n._idCounter++,s=" react-text: "+r+" ",c=" /react-text ";if(this._domID=r,this._hostParent=e,t.useCreateElement){var p=n._ownerDocument,l=p.createComment(s),u=p.createComment(c),f=a(p.createDocumentFragment());return a.queueChild(f,a(l)),this._stringText&&a.queueChild(f,a(p.createTextNode(this._stringText))),a.queueChild(f,a(u)),i.precacheNode(this,l),this._closingComment=u,f}var k=d(this._stringText);return t.renderToStaticMarkup?k:"<!--"+s+"-->"+k+"<!--"+c+"-->"},receiveComponent:function(t,e){if(t!==this._currentElement){this._currentElement=t;var n=""+t;if(n!==this._stringText){this._stringText=n;var o=this.getHostNode();s.replaceDelimitedText(o[0],o[1],n)}}},getHostNode:function(){var t=this._commentNodes;if(t)return t;if(!this._closingComment)for(var e=i.getNodeFromInstance(this),n=e.nextSibling;;){if(null==n?o("67",this._domID):void 0,8===n.nodeType&&" /react-text "===n.nodeValue){this._closingComment=n;break}n=n.nextSibling}return t=[this._hostNode,this._closingComment],this._commentNodes=t,t},unmountComponent:function(){this._closingComment=null,this._commentNodes=null,i.uncacheNode(this)}}),t.exports=c},function(t,e,n){"use strict";function o(){this._rootNodeID&&l.updateWrapper(this)}function r(t){var e=this._currentElement.props,n=d.executeOnChange(e,t);return p.asap(o,this),n}var s=n(2),a=n(4),i=n(26),d=n(38),c=n(5),p=n(10),l=(n(1),n(3),{getHostProps:function(t,e){null!=e.dangerouslySetInnerHTML?s("91"):void 0;var n=a({},i.getHostProps(t,e),{value:void 0,defaultValue:void 0,children:""+t._wrapperState.initialValue,onChange:t._wrapperState.onChange});return n},mountWrapper:function(t,e){var n=d.getValue(e),o=n;if(null==n){var a=e.defaultValue,i=e.children;null!=i&&(null!=a?s("92"):void 0,Array.isArray(i)&&(i.length<=1?void 0:s("93"),i=i[0]),a=""+i),null==a&&(a=""),o=a}t._wrapperState={initialValue:""+o,listeners:null,onChange:r.bind(t)}},updateWrapper:function(t){var e=t._currentElement.props,n=c.getNodeFromInstance(t),o=d.getValue(e);if(null!=o){var r=""+o;r!==n.value&&(n.value=r),null==e.defaultValue&&(n.defaultValue=r)}null!=e.defaultValue&&(n.defaultValue=e.defaultValue)},postMountWrapper:function(t){var e=c.getNodeFromInstance(t);e.value=e.textContent}});t.exports=l},function(t,e,n){"use strict";function o(t,e){"_hostNode"in t?void 0:d("33"),"_hostNode"in e?void 0:d("33");for(var n=0,o=t;o;o=o._hostParent)n++;for(var r=0,s=e;s;s=s._hostParent)r++;for(;n-r>0;)t=t._hostParent,n--;for(;r-n>0;)e=e._hostParent,r--;for(var a=n;a--;){if(t===e)return t;t=t._hostParent,e=e._hostParent}return null}function r(t,e){"_hostNode"in t?void 0:d("35"),"_hostNode"in e?void 0:d("35");for(;e;){if(e===t)return!0;e=e._hostParent}return!1}function s(t){return"_hostNode"in t?void 0:d("36"),t._hostParent}function a(t,e,n){for(var o=[];t;)o.push(t),t=t._hostParent;var r;for(r=o.length;r-- >0;)e(o[r],!1,n);for(r=0;r<o.length;r++)e(o[r],!0,n)}function i(t,e,n,r,s){for(var a=t&&e?o(t,e):null,i=[];t&&t!==a;)i.push(t),t=t._hostParent;for(var d=[];e&&e!==a;)d.push(e),e=e._hostParent;var c;for(c=0;c<i.length;c++)n(i[c],!0,r);for(c=d.length;c-- >0;)n(d[c],!1,s)}var d=n(2);n(1);t.exports={isAncestor:r,getLowestCommonAncestor:o,getParentInstance:s,traverseTwoPhase:a,traverseEnterLeave:i}},function(t,e,n){"use strict";function o(){this.reinitializeTransaction()}var r=n(4),s=n(10),a=n(24),i=n(8),d={initialize:i,close:function(){u.isBatchingUpdates=!1}},c={initialize:i,close:s.flushBatchedUpdates.bind(s)},p=[c,d];r(o.prototype,a.Mixin,{getTransactionWrappers:function(){return p}});var l=new o,u={isBatchingUpdates:!1,batchedUpdates:function(t,e,n,o,r,s){var a=u.isBatchingUpdates;u.isBatchingUpdates=!0,a?t(e,n,o,r,s):l.perform(t,null,e,n,o,r,s)}};t.exports=u},function(t,e,n){"use strict";function o(){w||(w=!0,y.EventEmitter.injectReactEventListener(g),y.EventPluginHub.injectEventPluginOrder(a),y.EventPluginUtils.injectComponentTree(l),y.EventPluginUtils.injectTreeTraversal(f),y.EventPluginHub.injectEventPluginsByName({SimpleEventPlugin:v,EnterLeaveEventPlugin:i,ChangeEventPlugin:s,SelectEventPlugin:b,BeforeInputEventPlugin:r}),y.HostComponent.injectGenericComponentClass(p),y.HostComponent.injectTextComponentClass(k),y.DOMProperty.injectDOMPropertyConfig(d),y.DOMProperty.injectDOMPropertyConfig(m),y.EmptyComponent.injectEmptyComponentFactory(function(t){return new u(t)}),y.Updates.injectReconcileTransaction(h),y.Updates.injectBatchingStrategy(x),y.Component.injectEnvironment(c))}var r=n(113),s=n(115),a=n(117),i=n(118),d=n(120),c=n(65),p=n(126),l=n(5),u=n(128),f=n(138),k=n(136),x=n(139),g=n(142),y=n(143),h=n(148),m=n(152),b=n(153),v=n(154),w=!1;t.exports={inject:o}},function(t,e,n){"use strict";function o(t){r.enqueueEvents(t),r.processEventQueue(!1)}var r=n(20),s={handleTopLevel:function(t,e,n,s){var a=r.extractEvents(t,e,n,s);o(a)}};t.exports=s},function(t,e,n){"use strict";function o(t){for(;t._hostParent;)t=t._hostParent;var e=l.getNodeFromInstance(t),n=e.parentNode;return l.getClosestInstanceFromNode(n)}function r(t,e){this.topLevelType=t,this.nativeEvent=e,this.ancestors=[]}function s(t){var e=f(t.nativeEvent),n=l.getClosestInstanceFromNode(e),r=n;do t.ancestors.push(r),r=r&&o(r);while(r);for(var s=0;s<t.ancestors.length;s++)n=t.ancestors[s],x._handleTopLevel(t.topLevelType,n,t.nativeEvent,f(t.nativeEvent))}function a(t){var e=k(window);t(e)}var i=n(4),d=n(56),c=n(6),p=n(14),l=n(5),u=n(10),f=n(51),k=n(94);i(r.prototype,{destructor:function(){this.topLevelType=null,this.nativeEvent=null,this.ancestors.length=0}}),p.addPoolingTo(r,p.twoArgumentPooler);var x={_enabled:!0,_handleTopLevel:null,WINDOW_HANDLE:c.canUseDOM?window:null,setHandleTopLevel:function(t){x._handleTopLevel=t},setEnabled:function(t){x._enabled=!!t},isEnabled:function(){return x._enabled},trapBubbledEvent:function(t,e,n){var o=n;return o?d.listen(o,e,x.dispatchEvent.bind(null,t)):null},trapCapturedEvent:function(t,e,n){var o=n;return o?d.capture(o,e,x.dispatchEvent.bind(null,t)):null},monitorScrollValue:function(t){var e=a.bind(null,t);d.listen(window,"scroll",e)},dispatchEvent:function(t,e){if(x._enabled){var n=r.getPooled(t,e);try{u.batchedUpdates(s,n)}finally{r.release(n)}}}};t.exports=x},function(t,e,n){"use strict";var o=n(17),r=n(20),s=n(36),a=n(40),i=n(64),d=n(68),c=n(27),p=n(70),l=n(10),u={Component:a.injection,Class:i.injection,DOMProperty:o.injection,EmptyComponent:d.injection,EventPluginHub:r.injection,EventPluginUtils:s.injection,EventEmitter:c.injection,HostComponent:p.injection,Updates:l.injection};t.exports=u},function(t,e,n){"use strict";var o=n(165),r=/\/?>/,s=/^<\!\-\-/,a={CHECKSUM_ATTR_NAME:"data-react-checksum",addChecksumToMarkup:function(t){var e=o(t);return s.test(t)?t:t.replace(r," "+a.CHECKSUM_ATTR_NAME+'="'+e+'"$&')},canReuseMarkup:function(t,e){var n=e.getAttribute(a.CHECKSUM_ATTR_NAME);n=n&&parseInt(n,10);var r=o(t);return r===n}};t.exports=a},function(t,e,n){"use strict";function o(t,e,n){return{type:u.INSERT_MARKUP,content:t,fromIndex:null,fromNode:null,toIndex:n,afterNode:e}}function r(t,e,n){return{type:u.MOVE_EXISTING,content:null,fromIndex:t._mountIndex,fromNode:f.getHostNode(t),toIndex:n,afterNode:e}}function s(t,e){return{type:u.REMOVE_NODE,content:null,fromIndex:t._mountIndex,fromNode:e,toIndex:null,afterNode:null}}function a(t){return{type:u.SET_MARKUP,content:t,fromIndex:null,fromNode:null,toIndex:null,afterNode:null}}function i(t){return{type:u.TEXT_CONTENT,content:t,fromIndex:null,fromNode:null,toIndex:null,afterNode:null}}function d(t,e){return e&&(t=t||[],t.push(e)),t}function c(t,e){l.processChildrenUpdates(t,e)}var p=n(2),l=n(40),u=(n(22),n(7),n(73)),f=(n(15),n(18)),k=n(122),x=(n(8),n(169)),g=(n(1),{Mixin:{_reconcilerInstantiateChildren:function(t,e,n){return k.instantiateChildren(t,e,n)},_reconcilerUpdateChildren:function(t,e,n,o,r,s){var a;return a=x(e),k.updateChildren(t,a,n,o,r,this,this._hostContainerInfo,s),a},mountChildren:function(t,e,n){var o=this._reconcilerInstantiateChildren(t,e,n);this._renderedChildren=o;var r=[],s=0;for(var a in o)if(o.hasOwnProperty(a)){var i=o[a],d=f.mountComponent(i,e,this,this._hostContainerInfo,n);i._mountIndex=s++,r.push(d)}return r},updateTextContent:function(t){var e=this._renderedChildren;k.unmountChildren(e,!1);for(var n in e)e.hasOwnProperty(n)&&p("118");var o=[i(t)];c(this,o)},updateMarkup:function(t){var e=this._renderedChildren;k.unmountChildren(e,!1);for(var n in e)e.hasOwnProperty(n)&&p("118");var o=[a(t)];c(this,o)},updateChildren:function(t,e,n){this._updateChildren(t,e,n)},_updateChildren:function(t,e,n){var o=this._renderedChildren,r={},s=[],a=this._reconcilerUpdateChildren(o,t,s,r,e,n);if(a||o){var i,p=null,l=0,u=0,k=0,x=null;for(i in a)if(a.hasOwnProperty(i)){var g=o&&o[i],y=a[i];g===y?(p=d(p,this.moveChild(g,x,l,u)),u=Math.max(g._mountIndex,u),g._mountIndex=l):(g&&(u=Math.max(g._mountIndex,u)),p=d(p,this._mountChildAtIndex(y,s[k],x,l,e,n)),k++),l++,x=f.getHostNode(y)}for(i in r)r.hasOwnProperty(i)&&(p=d(p,this._unmountChild(o[i],r[i])));p&&c(this,p),this._renderedChildren=a}},unmountChildren:function(t){var e=this._renderedChildren;k.unmountChildren(e,t),this._renderedChildren=null},moveChild:function(t,e,n,o){if(t._mountIndex<o)return r(t,e,n)},createChild:function(t,e,n){return o(n,e,t._mountIndex)},removeChild:function(t,e){return s(t,e)},_mountChildAtIndex:function(t,e,n,o,r,s){return t._mountIndex=o,this.createChild(t,n,e)},_unmountChild:function(t,e){var n=this.removeChild(t,e);return t._mountIndex=null,n}}});t.exports=g},function(t,e,n){"use strict";var o=n(2),r=(n(1),{isValidOwner:function(t){return!(!t||"function"!=typeof t.attachRef||"function"!=typeof t.detachRef)},addComponentAsRefTo:function(t,e,n){r.isValidOwner(n)?void 0:o("119"),n.attachRef(e,t)},removeComponentAsRefFrom:function(t,e,n){r.isValidOwner(n)?void 0:o("120");var s=n.getPublicInstance();s&&s.refs[e]===t.getPublicInstance()&&n.detachRef(e)}});t.exports=r},function(t,e,n){"use strict";function o(t,e,n){this.props=t,this.context=e,this.refs=d,this.updater=n||i}function r(){}var s=n(4),a=n(39),i=n(43),d=n(19);r.prototype=a.prototype,o.prototype=new r,o.prototype.constructor=o,s(o.prototype,a.prototype),o.prototype.isPureReactComponent=!0,t.exports=o},function(t,e,n){"use strict";function o(t){this.reinitializeTransaction(),this.renderToStaticMarkup=!1,this.reactMountReady=s.getPooled(null),this.useCreateElement=t}var r=n(4),s=n(61),a=n(14),i=n(27),d=n(71),c=(n(7),n(24)),p=n(47),l={initialize:d.getSelectionInformation,close:d.restoreSelection},u={initialize:function(){var t=i.isEnabled();return i.setEnabled(!1),t},close:function(t){i.setEnabled(t)}},f={initialize:function(){this.reactMountReady.reset()},close:function(){this.reactMountReady.notifyAll()}},k=[l,u,f],x={getTransactionWrappers:function(){return k},getReactMountReady:function(){return this.reactMountReady},getUpdateQueue:function(){return p},checkpoint:function(){return this.reactMountReady.checkpoint()},rollback:function(t){this.reactMountReady.rollback(t)},destructor:function(){s.release(this.reactMountReady),this.reactMountReady=null}};r(o.prototype,c.Mixin,x),a.addPoolingTo(o),t.exports=o},function(t,e,n){"use strict";function o(t,e,n){"function"==typeof t?t(e.getPublicInstance()):s.addComponentAsRefTo(e,t,n)}function r(t,e,n){"function"==typeof t?t(null):s.removeComponentAsRefFrom(e,t,n)}var s=n(146),a={};a.attachRefs=function(t,e){if(null!==e&&e!==!1){var n=e.ref;null!=n&&o(n,t,e._owner)}},a.shouldUpdateRefs=function(t,e){var n=null===t||t===!1,o=null===e||e===!1;return n||o||e.ref!==t.ref||"string"==typeof e.ref&&e._owner!==t._owner},a.detachRefs=function(t,e){if(null!==e&&e!==!1){var n=e.ref;null!=n&&r(n,t,e._owner)}},t.exports=a},function(t,e,n){"use strict";function o(t){this.reinitializeTransaction(),this.renderToStaticMarkup=t,this.useCreateElement=!1,this.updateQueue=new i(this)}var r=n(4),s=n(14),a=n(24),i=(n(7),n(151)),d=[],c={enqueue:function(){}},p={getTransactionWrappers:function(){return d},getReactMountReady:function(){return c},getUpdateQueue:function(){return this.updateQueue},destructor:function(){},checkpoint:function(){},rollback:function(){}};r(o.prototype,a.Mixin,p),s.addPoolingTo(o),t.exports=o},function(t,e,n){"use strict";function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function r(t,e){}var s=n(47),a=(n(24),n(3),function(){function t(e){o(this,t),this.transaction=e}return t.prototype.isMounted=function(t){return!1},t.prototype.enqueueCallback=function(t,e,n){this.transaction.isInTransaction()&&s.enqueueCallback(t,e,n)},t.prototype.enqueueForceUpdate=function(t){this.transaction.isInTransaction()?s.enqueueForceUpdate(t):r(t,"forceUpdate")},t.prototype.enqueueReplaceState=function(t,e){this.transaction.isInTransaction()?s.enqueueReplaceState(t,e):r(t,"replaceState")},t.prototype.enqueueSetState=function(t,e){this.transaction.isInTransaction()?s.enqueueSetState(t,e):r(t,"setState")},t}());t.exports=a},function(t,e){"use strict";var n={xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace"},o={accentHeight:"accent-height",accumulate:0,additive:0,alignmentBaseline:"alignment-baseline",allowReorder:"allowReorder",alphabetic:0,amplitude:0,arabicForm:"arabic-form",ascent:0,attributeName:"attributeName",attributeType:"attributeType",autoReverse:"autoReverse",azimuth:0,baseFrequency:"baseFrequency",baseProfile:"baseProfile",baselineShift:"baseline-shift",bbox:0,begin:0,bias:0,by:0,calcMode:"calcMode",capHeight:"cap-height",clip:0,clipPath:"clip-path",clipRule:"clip-rule",clipPathUnits:"clipPathUnits",colorInterpolation:"color-interpolation",colorInterpolationFilters:"color-interpolation-filters",colorProfile:"color-profile",colorRendering:"color-rendering",contentScriptType:"contentScriptType",contentStyleType:"contentStyleType",cursor:0,cx:0,cy:0,d:0,decelerate:0,descent:0,diffuseConstant:"diffuseConstant",direction:0,display:0,divisor:0,dominantBaseline:"dominant-baseline",dur:0,dx:0,dy:0,edgeMode:"edgeMode",elevation:0,enableBackground:"enable-background",end:0,exponent:0,externalResourcesRequired:"externalResourcesRequired",fill:0,fillOpacity:"fill-opacity",fillRule:"fill-rule",filter:0,filterRes:"filterRes",filterUnits:"filterUnits",floodColor:"flood-color",floodOpacity:"flood-opacity",focusable:0,fontFamily:"font-family",fontSize:"font-size",fontSizeAdjust:"font-size-adjust",fontStretch:"font-stretch",fontStyle:"font-style",fontVariant:"font-variant",fontWeight:"font-weight",format:0,from:0,fx:0,fy:0,g1:0,g2:0,glyphName:"glyph-name",glyphOrientationHorizontal:"glyph-orientation-horizontal",glyphOrientationVertical:"glyph-orientation-vertical",glyphRef:"glyphRef",gradientTransform:"gradientTransform",gradientUnits:"gradientUnits",hanging:0,horizAdvX:"horiz-adv-x",horizOriginX:"horiz-origin-x",ideographic:0,imageRendering:"image-rendering",in:0,in2:0,intercept:0,k:0,k1:0,k2:0,k3:0,k4:0,kernelMatrix:"kernelMatrix",kernelUnitLength:"kernelUnitLength",kerning:0,keyPoints:"keyPoints",keySplines:"keySplines",keyTimes:"keyTimes",lengthAdjust:"lengthAdjust",letterSpacing:"letter-spacing",lightingColor:"lighting-color",limitingConeAngle:"limitingConeAngle",local:0,markerEnd:"marker-end",markerMid:"marker-mid",markerStart:"marker-start",markerHeight:"markerHeight",markerUnits:"markerUnits",markerWidth:"markerWidth",mask:0,maskContentUnits:"maskContentUnits",maskUnits:"maskUnits",mathematical:0,mode:0,numOctaves:"numOctaves",offset:0,opacity:0,operator:0,order:0,orient:0,orientation:0,origin:0,overflow:0,overlinePosition:"overline-position",overlineThickness:"overline-thickness",paintOrder:"paint-order",panose1:"panose-1",pathLength:"pathLength",patternContentUnits:"patternContentUnits",patternTransform:"patternTransform",patternUnits:"patternUnits",pointerEvents:"pointer-events",points:0,pointsAtX:"pointsAtX",pointsAtY:"pointsAtY",pointsAtZ:"pointsAtZ",preserveAlpha:"preserveAlpha",preserveAspectRatio:"preserveAspectRatio",primitiveUnits:"primitiveUnits",r:0,radius:0,
refX:"refX",refY:"refY",renderingIntent:"rendering-intent",repeatCount:"repeatCount",repeatDur:"repeatDur",requiredExtensions:"requiredExtensions",requiredFeatures:"requiredFeatures",restart:0,result:0,rotate:0,rx:0,ry:0,scale:0,seed:0,shapeRendering:"shape-rendering",slope:0,spacing:0,specularConstant:"specularConstant",specularExponent:"specularExponent",speed:0,spreadMethod:"spreadMethod",startOffset:"startOffset",stdDeviation:"stdDeviation",stemh:0,stemv:0,stitchTiles:"stitchTiles",stopColor:"stop-color",stopOpacity:"stop-opacity",strikethroughPosition:"strikethrough-position",strikethroughThickness:"strikethrough-thickness",string:0,stroke:0,strokeDasharray:"stroke-dasharray",strokeDashoffset:"stroke-dashoffset",strokeLinecap:"stroke-linecap",strokeLinejoin:"stroke-linejoin",strokeMiterlimit:"stroke-miterlimit",strokeOpacity:"stroke-opacity",strokeWidth:"stroke-width",surfaceScale:"surfaceScale",systemLanguage:"systemLanguage",tableValues:"tableValues",targetX:"targetX",targetY:"targetY",textAnchor:"text-anchor",textDecoration:"text-decoration",textRendering:"text-rendering",textLength:"textLength",to:0,transform:0,u1:0,u2:0,underlinePosition:"underline-position",underlineThickness:"underline-thickness",unicode:0,unicodeBidi:"unicode-bidi",unicodeRange:"unicode-range",unitsPerEm:"units-per-em",vAlphabetic:"v-alphabetic",vHanging:"v-hanging",vIdeographic:"v-ideographic",vMathematical:"v-mathematical",values:0,vectorEffect:"vector-effect",version:0,vertAdvY:"vert-adv-y",vertOriginX:"vert-origin-x",vertOriginY:"vert-origin-y",viewBox:"viewBox",viewTarget:"viewTarget",visibility:0,widths:0,wordSpacing:"word-spacing",writingMode:"writing-mode",x:0,xHeight:"x-height",x1:0,x2:0,xChannelSelector:"xChannelSelector",xlinkActuate:"xlink:actuate",xlinkArcrole:"xlink:arcrole",xlinkHref:"xlink:href",xlinkRole:"xlink:role",xlinkShow:"xlink:show",xlinkTitle:"xlink:title",xlinkType:"xlink:type",xmlBase:"xml:base",xmlns:0,xmlnsXlink:"xmlns:xlink",xmlLang:"xml:lang",xmlSpace:"xml:space",y:0,y1:0,y2:0,yChannelSelector:"yChannelSelector",z:0,zoomAndPan:"zoomAndPan"},r={Properties:{},DOMAttributeNamespaces:{xlinkActuate:n.xlink,xlinkArcrole:n.xlink,xlinkHref:n.xlink,xlinkRole:n.xlink,xlinkShow:n.xlink,xlinkTitle:n.xlink,xlinkType:n.xlink,xmlBase:n.xml,xmlLang:n.xml,xmlSpace:n.xml},DOMAttributeNames:{}};Object.keys(o).forEach(function(t){r.Properties[t]=0,o[t]&&(r.DOMAttributeNames[t]=o[t])}),t.exports=r},function(t,e,n){"use strict";function o(t){if("selectionStart"in t&&c.hasSelectionCapabilities(t))return{start:t.selectionStart,end:t.selectionEnd};if(window.getSelection){var e=window.getSelection();return{anchorNode:e.anchorNode,anchorOffset:e.anchorOffset,focusNode:e.focusNode,focusOffset:e.focusOffset}}if(document.selection){var n=document.selection.createRange();return{parentElement:n.parentElement(),text:n.text,top:n.boundingTop,left:n.boundingLeft}}}function r(t,e){if(v||null==h||h!==l())return null;var n=o(h);if(!b||!k(b,n)){b=n;var r=p.getPooled(y.select,m,t,e);return r.type="select",r.target=h,a.accumulateTwoPhaseDispatches(r),r}return null}var s=n(11),a=n(21),i=n(6),d=n(5),c=n(71),p=n(12),l=n(58),u=n(85),f=n(13),k=n(31),x=s.topLevelTypes,g=i.canUseDOM&&"documentMode"in document&&document.documentMode<=11,y={select:{phasedRegistrationNames:{bubbled:f({onSelect:null}),captured:f({onSelectCapture:null})},dependencies:[x.topBlur,x.topContextMenu,x.topFocus,x.topKeyDown,x.topMouseDown,x.topMouseUp,x.topSelectionChange]}},h=null,m=null,b=null,v=!1,w=!1,T=f({onSelect:null}),O={eventTypes:y,extractEvents:function(t,e,n,o){if(!w)return null;var s=e?d.getNodeFromInstance(e):window;switch(t){case x.topFocus:(u(s)||"true"===s.contentEditable)&&(h=s,m=e,b=null);break;case x.topBlur:h=null,m=null,b=null;break;case x.topMouseDown:v=!0;break;case x.topContextMenu:case x.topMouseUp:return v=!1,r(n,o);case x.topSelectionChange:if(g)break;case x.topKeyDown:case x.topKeyUp:return r(n,o)}return null},didPutListener:function(t,e,n){e===T&&(w=!0)}};t.exports=O},function(t,e,n){"use strict";function o(t){return"."+t._rootNodeID}var r=n(2),s=n(11),a=n(56),i=n(21),d=n(5),c=n(155),p=n(156),l=n(12),u=n(159),f=n(161),k=n(28),x=n(158),g=n(162),y=n(163),h=n(23),m=n(164),b=n(8),v=n(49),w=(n(1),n(13)),T=s.topLevelTypes,O={abort:{phasedRegistrationNames:{bubbled:w({onAbort:!0}),captured:w({onAbortCapture:!0})}},animationEnd:{phasedRegistrationNames:{bubbled:w({onAnimationEnd:!0}),captured:w({onAnimationEndCapture:!0})}},animationIteration:{phasedRegistrationNames:{bubbled:w({onAnimationIteration:!0}),captured:w({onAnimationIterationCapture:!0})}},animationStart:{phasedRegistrationNames:{bubbled:w({onAnimationStart:!0}),captured:w({onAnimationStartCapture:!0})}},blur:{phasedRegistrationNames:{bubbled:w({onBlur:!0}),captured:w({onBlurCapture:!0})}},canPlay:{phasedRegistrationNames:{bubbled:w({onCanPlay:!0}),captured:w({onCanPlayCapture:!0})}},canPlayThrough:{phasedRegistrationNames:{bubbled:w({onCanPlayThrough:!0}),captured:w({onCanPlayThroughCapture:!0})}},click:{phasedRegistrationNames:{bubbled:w({onClick:!0}),captured:w({onClickCapture:!0})}},contextMenu:{phasedRegistrationNames:{bubbled:w({onContextMenu:!0}),captured:w({onContextMenuCapture:!0})}},copy:{phasedRegistrationNames:{bubbled:w({onCopy:!0}),captured:w({onCopyCapture:!0})}},cut:{phasedRegistrationNames:{bubbled:w({onCut:!0}),captured:w({onCutCapture:!0})}},doubleClick:{phasedRegistrationNames:{bubbled:w({onDoubleClick:!0}),captured:w({onDoubleClickCapture:!0})}},drag:{phasedRegistrationNames:{bubbled:w({onDrag:!0}),captured:w({onDragCapture:!0})}},dragEnd:{phasedRegistrationNames:{bubbled:w({onDragEnd:!0}),captured:w({onDragEndCapture:!0})}},dragEnter:{phasedRegistrationNames:{bubbled:w({onDragEnter:!0}),captured:w({onDragEnterCapture:!0})}},dragExit:{phasedRegistrationNames:{bubbled:w({onDragExit:!0}),captured:w({onDragExitCapture:!0})}},dragLeave:{phasedRegistrationNames:{bubbled:w({onDragLeave:!0}),captured:w({onDragLeaveCapture:!0})}},dragOver:{phasedRegistrationNames:{bubbled:w({onDragOver:!0}),captured:w({onDragOverCapture:!0})}},dragStart:{phasedRegistrationNames:{bubbled:w({onDragStart:!0}),captured:w({onDragStartCapture:!0})}},drop:{phasedRegistrationNames:{bubbled:w({onDrop:!0}),captured:w({onDropCapture:!0})}},durationChange:{phasedRegistrationNames:{bubbled:w({onDurationChange:!0}),captured:w({onDurationChangeCapture:!0})}},emptied:{phasedRegistrationNames:{bubbled:w({onEmptied:!0}),captured:w({onEmptiedCapture:!0})}},encrypted:{phasedRegistrationNames:{bubbled:w({onEncrypted:!0}),captured:w({onEncryptedCapture:!0})}},ended:{phasedRegistrationNames:{bubbled:w({onEnded:!0}),captured:w({onEndedCapture:!0})}},error:{phasedRegistrationNames:{bubbled:w({onError:!0}),captured:w({onErrorCapture:!0})}},focus:{phasedRegistrationNames:{bubbled:w({onFocus:!0}),captured:w({onFocusCapture:!0})}},input:{phasedRegistrationNames:{bubbled:w({onInput:!0}),captured:w({onInputCapture:!0})}},invalid:{phasedRegistrationNames:{bubbled:w({onInvalid:!0}),captured:w({onInvalidCapture:!0})}},keyDown:{phasedRegistrationNames:{bubbled:w({onKeyDown:!0}),captured:w({onKeyDownCapture:!0})}},keyPress:{phasedRegistrationNames:{bubbled:w({onKeyPress:!0}),captured:w({onKeyPressCapture:!0})}},keyUp:{phasedRegistrationNames:{bubbled:w({onKeyUp:!0}),captured:w({onKeyUpCapture:!0})}},load:{phasedRegistrationNames:{bubbled:w({onLoad:!0}),captured:w({onLoadCapture:!0})}},loadedData:{phasedRegistrationNames:{bubbled:w({onLoadedData:!0}),captured:w({onLoadedDataCapture:!0})}},loadedMetadata:{phasedRegistrationNames:{bubbled:w({onLoadedMetadata:!0}),captured:w({onLoadedMetadataCapture:!0})}},loadStart:{phasedRegistrationNames:{bubbled:w({onLoadStart:!0}),captured:w({onLoadStartCapture:!0})}},mouseDown:{phasedRegistrationNames:{bubbled:w({onMouseDown:!0}),captured:w({onMouseDownCapture:!0})}},mouseMove:{phasedRegistrationNames:{bubbled:w({onMouseMove:!0}),captured:w({onMouseMoveCapture:!0})}},mouseOut:{phasedRegistrationNames:{bubbled:w({onMouseOut:!0}),captured:w({onMouseOutCapture:!0})}},mouseOver:{phasedRegistrationNames:{bubbled:w({onMouseOver:!0}),captured:w({onMouseOverCapture:!0})}},mouseUp:{phasedRegistrationNames:{bubbled:w({onMouseUp:!0}),captured:w({onMouseUpCapture:!0})}},paste:{phasedRegistrationNames:{bubbled:w({onPaste:!0}),captured:w({onPasteCapture:!0})}},pause:{phasedRegistrationNames:{bubbled:w({onPause:!0}),captured:w({onPauseCapture:!0})}},play:{phasedRegistrationNames:{bubbled:w({onPlay:!0}),captured:w({onPlayCapture:!0})}},playing:{phasedRegistrationNames:{bubbled:w({onPlaying:!0}),captured:w({onPlayingCapture:!0})}},progress:{phasedRegistrationNames:{bubbled:w({onProgress:!0}),captured:w({onProgressCapture:!0})}},rateChange:{phasedRegistrationNames:{bubbled:w({onRateChange:!0}),captured:w({onRateChangeCapture:!0})}},reset:{phasedRegistrationNames:{bubbled:w({onReset:!0}),captured:w({onResetCapture:!0})}},scroll:{phasedRegistrationNames:{bubbled:w({onScroll:!0}),captured:w({onScrollCapture:!0})}},seeked:{phasedRegistrationNames:{bubbled:w({onSeeked:!0}),captured:w({onSeekedCapture:!0})}},seeking:{phasedRegistrationNames:{bubbled:w({onSeeking:!0}),captured:w({onSeekingCapture:!0})}},stalled:{phasedRegistrationNames:{bubbled:w({onStalled:!0}),captured:w({onStalledCapture:!0})}},submit:{phasedRegistrationNames:{bubbled:w({onSubmit:!0}),captured:w({onSubmitCapture:!0})}},suspend:{phasedRegistrationNames:{bubbled:w({onSuspend:!0}),captured:w({onSuspendCapture:!0})}},timeUpdate:{phasedRegistrationNames:{bubbled:w({onTimeUpdate:!0}),captured:w({onTimeUpdateCapture:!0})}},touchCancel:{phasedRegistrationNames:{bubbled:w({onTouchCancel:!0}),captured:w({onTouchCancelCapture:!0})}},touchEnd:{phasedRegistrationNames:{bubbled:w({onTouchEnd:!0}),captured:w({onTouchEndCapture:!0})}},touchMove:{phasedRegistrationNames:{bubbled:w({onTouchMove:!0}),captured:w({onTouchMoveCapture:!0})}},touchStart:{phasedRegistrationNames:{bubbled:w({onTouchStart:!0}),captured:w({onTouchStartCapture:!0})}},transitionEnd:{phasedRegistrationNames:{bubbled:w({onTransitionEnd:!0}),captured:w({onTransitionEndCapture:!0})}},volumeChange:{phasedRegistrationNames:{bubbled:w({onVolumeChange:!0}),captured:w({onVolumeChangeCapture:!0})}},waiting:{phasedRegistrationNames:{bubbled:w({onWaiting:!0}),captured:w({onWaitingCapture:!0})}},wheel:{phasedRegistrationNames:{bubbled:w({onWheel:!0}),captured:w({onWheelCapture:!0})}}},E={topAbort:O.abort,topAnimationEnd:O.animationEnd,topAnimationIteration:O.animationIteration,topAnimationStart:O.animationStart,topBlur:O.blur,topCanPlay:O.canPlay,topCanPlayThrough:O.canPlayThrough,topClick:O.click,topContextMenu:O.contextMenu,topCopy:O.copy,topCut:O.cut,topDoubleClick:O.doubleClick,topDrag:O.drag,topDragEnd:O.dragEnd,topDragEnter:O.dragEnter,topDragExit:O.dragExit,topDragLeave:O.dragLeave,topDragOver:O.dragOver,topDragStart:O.dragStart,topDrop:O.drop,topDurationChange:O.durationChange,topEmptied:O.emptied,topEncrypted:O.encrypted,topEnded:O.ended,topError:O.error,topFocus:O.focus,topInput:O.input,topInvalid:O.invalid,topKeyDown:O.keyDown,topKeyPress:O.keyPress,topKeyUp:O.keyUp,topLoad:O.load,topLoadedData:O.loadedData,topLoadedMetadata:O.loadedMetadata,topLoadStart:O.loadStart,topMouseDown:O.mouseDown,topMouseMove:O.mouseMove,topMouseOut:O.mouseOut,topMouseOver:O.mouseOver,topMouseUp:O.mouseUp,topPaste:O.paste,topPause:O.pause,topPlay:O.play,topPlaying:O.playing,topProgress:O.progress,topRateChange:O.rateChange,topReset:O.reset,topScroll:O.scroll,topSeeked:O.seeked,topSeeking:O.seeking,topStalled:O.stalled,topSubmit:O.submit,topSuspend:O.suspend,topTimeUpdate:O.timeUpdate,topTouchCancel:O.touchCancel,topTouchEnd:O.touchEnd,topTouchMove:O.touchMove,topTouchStart:O.touchStart,topTransitionEnd:O.transitionEnd,topVolumeChange:O.volumeChange,topWaiting:O.waiting,topWheel:O.wheel};for(var _ in E)E[_].dependencies=[_];var C=w({onClick:null}),S={},K={eventTypes:O,extractEvents:function(t,e,n,o){var s=E[t];if(!s)return null;var a;switch(t){case T.topAbort:case T.topCanPlay:case T.topCanPlayThrough:case T.topDurationChange:case T.topEmptied:case T.topEncrypted:case T.topEnded:case T.topError:case T.topInput:case T.topInvalid:case T.topLoad:case T.topLoadedData:case T.topLoadedMetadata:case T.topLoadStart:case T.topPause:case T.topPlay:case T.topPlaying:case T.topProgress:case T.topRateChange:case T.topReset:case T.topSeeked:case T.topSeeking:case T.topStalled:case T.topSubmit:case T.topSuspend:case T.topTimeUpdate:case T.topVolumeChange:case T.topWaiting:a=l;break;case T.topKeyPress:if(0===v(n))return null;case T.topKeyDown:case T.topKeyUp:a=f;break;case T.topBlur:case T.topFocus:a=u;break;case T.topClick:if(2===n.button)return null;case T.topContextMenu:case T.topDoubleClick:case T.topMouseDown:case T.topMouseMove:case T.topMouseOut:case T.topMouseOver:case T.topMouseUp:a=k;break;case T.topDrag:case T.topDragEnd:case T.topDragEnter:case T.topDragExit:case T.topDragLeave:case T.topDragOver:case T.topDragStart:case T.topDrop:a=x;break;case T.topTouchCancel:case T.topTouchEnd:case T.topTouchMove:case T.topTouchStart:a=g;break;case T.topAnimationEnd:case T.topAnimationIteration:case T.topAnimationStart:a=c;break;case T.topTransitionEnd:a=y;break;case T.topScroll:a=h;break;case T.topWheel:a=m;break;case T.topCopy:case T.topCut:case T.topPaste:a=p}a?void 0:r("86",t);var d=a.getPooled(s,e,n,o);return i.accumulateTwoPhaseDispatches(d),d},didPutListener:function(t,e,n){if(e===C){var r=o(t),s=d.getNodeFromInstance(t);S[r]||(S[r]=a.listen(s,"click",b))}},willDeleteListener:function(t,e){if(e===C){var n=o(t);S[n].remove(),delete S[n]}}};t.exports=K},function(t,e,n){"use strict";function o(t,e,n,o){return r.call(this,t,e,n,o)}var r=n(12),s={animationName:null,elapsedTime:null,pseudoElement:null};r.augmentClass(o,s),t.exports=o},function(t,e,n){"use strict";function o(t,e,n,o){return r.call(this,t,e,n,o)}var r=n(12),s={clipboardData:function(t){return"clipboardData"in t?t.clipboardData:window.clipboardData}};r.augmentClass(o,s),t.exports=o},function(t,e,n){"use strict";function o(t,e,n,o){return r.call(this,t,e,n,o)}var r=n(12),s={data:null};r.augmentClass(o,s),t.exports=o},function(t,e,n){"use strict";function o(t,e,n,o){return r.call(this,t,e,n,o)}var r=n(28),s={dataTransfer:null};r.augmentClass(o,s),t.exports=o},function(t,e,n){"use strict";function o(t,e,n,o){return r.call(this,t,e,n,o)}var r=n(23),s={relatedTarget:null};r.augmentClass(o,s),t.exports=o},function(t,e,n){"use strict";function o(t,e,n,o){return r.call(this,t,e,n,o)}var r=n(12),s={data:null};r.augmentClass(o,s),t.exports=o},function(t,e,n){"use strict";function o(t,e,n,o){return r.call(this,t,e,n,o)}var r=n(23),s=n(49),a=n(170),i=n(50),d={key:a,location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:i,charCode:function(t){return"keypress"===t.type?s(t):0},keyCode:function(t){return"keydown"===t.type||"keyup"===t.type?t.keyCode:0},which:function(t){return"keypress"===t.type?s(t):"keydown"===t.type||"keyup"===t.type?t.keyCode:0}};r.augmentClass(o,d),t.exports=o},function(t,e,n){"use strict";function o(t,e,n,o){return r.call(this,t,e,n,o)}var r=n(23),s=n(50),a={touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:s};r.augmentClass(o,a),t.exports=o},function(t,e,n){"use strict";function o(t,e,n,o){return r.call(this,t,e,n,o)}var r=n(12),s={propertyName:null,elapsedTime:null,pseudoElement:null};r.augmentClass(o,s),t.exports=o},function(t,e,n){"use strict";function o(t,e,n,o){return r.call(this,t,e,n,o)}var r=n(28),s={deltaX:function(t){return"deltaX"in t?t.deltaX:"wheelDeltaX"in t?-t.wheelDeltaX:0},deltaY:function(t){return"deltaY"in t?t.deltaY:"wheelDeltaY"in t?-t.wheelDeltaY:"wheelDelta"in t?-t.wheelDelta:0},deltaZ:null,deltaMode:null};r.augmentClass(o,s),t.exports=o},function(t,e){"use strict";function n(t){for(var e=1,n=0,r=0,s=t.length,a=s&-4;r<a;){for(var i=Math.min(r+4096,a);r<i;r+=4)n+=(e+=t.charCodeAt(r))+(e+=t.charCodeAt(r+1))+(e+=t.charCodeAt(r+2))+(e+=t.charCodeAt(r+3));e%=o,n%=o}for(;r<s;r++)n+=e+=t.charCodeAt(r);return e%=o,n%=o,e|n<<16}var o=65521;t.exports=n},function(t,e,n){(function(e){"use strict";function o(t,e,n,o,d,c){for(var p in t)if(t.hasOwnProperty(p)){var l;try{"function"!=typeof t[p]?r("84",o||"React class",s[n],p):void 0,l=t[p](e,p,o,n,null,a)}catch(u){l=u}if(l instanceof Error&&!(l.message in i)){i[l.message]=!0}}}var r=n(2),s=n(44),a=n(46);n(1),n(3);"undefined"!=typeof e&&e.env,1;var i={};t.exports=o}).call(e,n(32))},function(t,e,n){"use strict";function o(t,e,n){var o=null==e||"boolean"==typeof e||""===e;if(o)return"";var r=isNaN(e);if(r||0===e||s.hasOwnProperty(t)&&s[t])return""+e;if("string"==typeof e){e=e.trim()}return e+"px"}var r=n(60),s=(n(3),r.isUnitlessNumber);t.exports=o},function(t,e,n){"use strict";function o(t){if(null==t)return null;if(1===t.nodeType)return t;var e=a.get(t);return e?(e=i(e),e?s.getNodeFromInstance(e):null):void("function"==typeof t.render?r("44"):r("45",Object.keys(t)))}var r=n(2),s=(n(15),n(5)),a=n(22),i=n(81);n(1),n(3);t.exports=o},function(t,e,n){(function(e){"use strict";function o(t,e,n,o){if(t&&"object"==typeof t){var r=t,s=void 0===r[n];s&&null!=e&&(r[n]=e)}}function r(t,e){if(null==t)return t;var n={};return s(t,o,n),n}var s=(n(37),n(54));n(3);"undefined"!=typeof e&&e.env,1,t.exports=r}).call(e,n(32))},function(t,e,n){"use strict";function o(t){if(t.key){var e=s[t.key]||t.key;if("Unidentified"!==e)return e}if("keypress"===t.type){var n=r(t);return 13===n?"Enter":String.fromCharCode(n)}return"keydown"===t.type||"keyup"===t.type?a[t.keyCode]||"Unidentified":""}var r=n(49),s={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},a={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"};t.exports=o},function(t,e){"use strict";function n(t){for(;t&&t.firstChild;)t=t.firstChild;return t}function o(t){for(;t;){if(t.nextSibling)return t.nextSibling;t=t.parentNode}}function r(t,e){for(var r=n(t),s=0,a=0;r;){if(3===r.nodeType){if(a=s+r.textContent.length,s<=e&&a>=e)return{node:r,offset:e-s};s=a}r=n(o(r))}}t.exports=r},function(t,e,n){"use strict";function o(t,e){var n={};return n[t.toLowerCase()]=e.toLowerCase(),n["Webkit"+t]="webkit"+e,n["Moz"+t]="moz"+e,n["ms"+t]="MS"+e,n["O"+t]="o"+e.toLowerCase(),n}function r(t){if(i[t])return i[t];if(!a[t])return t;var e=a[t];for(var n in e)if(e.hasOwnProperty(n)&&n in d)return i[t]=e[n];return""}var s=n(6),a={animationend:o("Animation","AnimationEnd"),animationiteration:o("Animation","AnimationIteration"),animationstart:o("Animation","AnimationStart"),transitionend:o("Transition","TransitionEnd")},i={},d={};s.canUseDOM&&(d=document.createElement("div").style,"AnimationEvent"in window||(delete a.animationend.animation,delete a.animationiteration.animation,delete a.animationstart.animation),"TransitionEvent"in window||delete a.transitionend.transition),t.exports=r},function(t,e,n){"use strict";function o(t){return s.isValidElement(t)?void 0:r("23"),t}var r=n(2),s=n(9);n(1);t.exports=o},function(t,e,n){"use strict";function o(t){return'"'+r(t)+'"'}var r=n(29);t.exports=o},function(t,e,n){"use strict";var o=n(72);t.exports=o.renderSubtreeIntoContainer}]));
//# sourceMappingURL=main.95ad305d.js.map